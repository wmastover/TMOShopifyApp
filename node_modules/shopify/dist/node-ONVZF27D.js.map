{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@shopify+cli-hydrogen@9.0.3_@graphql-codegen+cli@5.0.2_react-dom@17.0.2_react@17.0.2/node_modules/@shopify/cli-hydrogen/dist/lib/mini-oxygen/node.js"],
  "sourcesContent": ["import { AsyncLocalStorage } from 'node:async_hooks';\nimport { readFile } from '@shopify/cli-kit/node/fs';\nimport { renderSuccess } from '@shopify/cli-kit/node/ui';\nimport colors from '@shopify/cli-kit/node/colors';\nimport { AbortError } from '@shopify/cli-kit/node/error';\nimport { DEFAULT_INSPECTOR_PORT } from '../flags.js';\nimport { handleMiniOxygenImportFail, SUBREQUEST_PROFILER_ENDPOINT, logRequestLine } from './common.js';\nimport { setConstructors, createLogRequestEvent, handleDebugNetworkRequest, H2O_BINDING_NAME } from '../request-events.js';\nimport { findPort } from '../find-port.js';\nimport { getUtilityBannerlines } from '../dev-shared.js';\nimport { outputNewline } from '@shopify/cli-kit/node/output';\nimport { importLocal } from '../import-utils.js';\n\nasync function startNodeServer({\n  appPort,\n  watch = false,\n  buildPathWorkerFile,\n  buildPathClient,\n  env,\n  debug = false,\n  inspectorPort,\n  root\n}) {\n  const { startServer, Request, Response } = await importLocal(\n    \"@shopify/mini-oxygen/node\",\n    root\n  ).catch(handleMiniOxygenImportFail);\n  setConstructors({ Response });\n  const logRequestEvent = createLogRequestEvent();\n  const asyncLocalStorage = new AsyncLocalStorage();\n  const serviceBindings = {\n    [H2O_BINDING_NAME]: {\n      fetch: async (request) => logRequestEvent(\n        new Request(request.url, {\n          method: \"POST\",\n          body: JSON.stringify({\n            ...asyncLocalStorage.getStore(),\n            ...await request.json()\n          })\n        })\n      )\n    }\n  };\n  if (debug) {\n    if (!inspectorPort) inspectorPort = await findPort(DEFAULT_INSPECTOR_PORT);\n    (await import('node:inspector')).open(inspectorPort);\n  }\n  const readWorkerFile = () => readFile(buildPathWorkerFile).catch((error) => {\n    throw new AbortError(\n      `Could not read worker file.\n\n` + error.stack,\n      \"Did you build the project?\"\n    );\n  });\n  const miniOxygen = await startServer({\n    script: await readWorkerFile(),\n    workerFile: buildPathWorkerFile,\n    assetsDir: buildPathClient,\n    publicPath: \"\",\n    port: appPort,\n    watch,\n    autoReload: watch,\n    modules: true,\n    env: {\n      ...env,\n      ...process.env,\n      ...serviceBindings\n    },\n    log: () => {\n    },\n    async onRequest(request, defaultDispatcher) {\n      const url = new URL(request.url);\n      if (url.pathname === SUBREQUEST_PROFILER_ENDPOINT) {\n        return handleDebugNetworkRequest(request);\n      }\n      const requestId = request.headers.get(\"request-id\");\n      const startTimeMs = Date.now();\n      const response = await asyncLocalStorage.run(\n        { requestId, purpose: request.headers.get(\"purpose\") },\n        () => defaultDispatcher(request)\n      );\n      const endTimeMs = Date.now();\n      logRequestLine({\n        request: {\n          url: request.url,\n          method: request.method,\n          headers: Object.fromEntries(request.headers.entries())\n        },\n        response: {\n          status: response.status,\n          statusText: response.statusText,\n          headers: Object.fromEntries(response.headers.entries())\n        },\n        meta: {\n          startTimeMs,\n          endTimeMs,\n          durationMs: startTimeMs > 0 ? endTimeMs - startTimeMs : 0\n        }\n      });\n      return response;\n    }\n  });\n  const listeningAt = `http://localhost:${miniOxygen.port}`;\n  return {\n    listeningAt,\n    port: miniOxygen.port,\n    async reload(options) {\n      const nextOptions = {};\n      if (options?.env) {\n        nextOptions.env = {\n          ...options.env,\n          ...process.env\n        };\n      }\n      nextOptions.script = await readWorkerFile();\n      await miniOxygen.reload(nextOptions);\n    },\n    showBanner(options) {\n      outputNewline();\n      const customSections = [];\n      if (options?.host) {\n        customSections.push({ body: getUtilityBannerlines(options.host) });\n      }\n      if (debug && inspectorPort) {\n        customSections.push({\n          body: { warn: `Debugger listening on ws://localhost:${inspectorPort}` }\n        });\n      }\n      renderSuccess({\n        headline: `${options?.headlinePrefix ?? \"\"}MiniOxygen (Node Sandbox) ${options?.mode ?? \"development\"} server running.`,\n        body: [\n          `View ${options?.appName ? colors.cyan(options?.appName) : \"Hydrogen\"} app:`,\n          { link: { url: options?.host || listeningAt } }\n        ],\n        customSections\n      });\n      console.log(\"\");\n    },\n    async close() {\n      await miniOxygen.close();\n    }\n  };\n}\n\nexport { startNodeServer };\n"],
  "mappings": "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",
  "names": []
}
