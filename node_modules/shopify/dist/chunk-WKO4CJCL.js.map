{
  "version": 3,
  "sources": ["../../cli-kit/src/public/node/session.ts"],
  "sourcesContent": ["import {normalizeStoreFqdn} from './context/fqdn.js'\nimport {BugError} from './error.js'\nimport {getPartnersToken} from './environment.js'\nimport {nonRandomUUID} from './crypto.js'\nimport * as secureStore from '../../private/node/session/store.js'\nimport {exchangeCustomPartnerToken} from '../../private/node/session/exchange.js'\nimport {outputContent, outputToken, outputDebug} from '../../public/node/output.js'\nimport {\n  AdminAPIScope,\n  AppManagementAPIScope,\n  BusinessPlatformScope,\n  PartnersAPIScope,\n  StorefrontRendererScope,\n  ensureAuthenticated,\n  setLastSeenAuthMethod,\n  setLastSeenUserIdAfterAuth,\n} from '../../private/node/session.js'\nimport {isThemeAccessSession} from '../../private/node/api/rest.js'\n\n/**\n * Session Object to access the Admin API, includes the token and the store FQDN.\n */\nexport interface AdminSession {\n  token: string\n  storeFqdn: string\n}\n\ninterface EnsureAuthenticatedAdditionalOptions {\n  noPrompt?: boolean\n}\n\n/**\n * Ensure that we have a valid session to access the Partners API.\n * If SHOPIFY_CLI_PARTNERS_TOKEN exists, that token will be used to obtain a valid Partners Token\n * If SHOPIFY_CLI_PARTNERS_TOKEN exists, scopes will be ignored.\n *\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @param env - Optional environment variables to use.\n * @param options - Optional extra options to use.\n * @returns The access token for the Partners API.\n */\nexport async function ensureAuthenticatedPartners(\n  scopes: PartnersAPIScope[] = [],\n  env = process.env,\n  options: EnsureAuthenticatedAdditionalOptions = {},\n): Promise<{token: string; userId: string}> {\n  outputDebug(outputContent`Ensuring that the user is authenticated with the Partners API with the following scopes:\n${outputToken.json(scopes)}\n`)\n  const envToken = getPartnersToken()\n  if (envToken) {\n    const result = await exchangeCustomPartnerToken(envToken)\n    return {token: result.accessToken, userId: result.userId}\n  }\n  const tokens = await ensureAuthenticated({partnersApi: {scopes}}, env, options)\n  if (!tokens.partners) {\n    throw new BugError('No partners token found after ensuring authenticated')\n  }\n  return {token: tokens.partners, userId: tokens.userId}\n}\n\n/**\n * Ensure that we have a valid session to access the App Management API.\n *\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @param env - Optional environment variables to use.\n * @param options - Optional extra options to use.\n * @returns The access token for the App Management API.\n */\nexport async function ensureAuthenticatedAppManagement(\n  scopes: AppManagementAPIScope[] = [],\n  env = process.env,\n  options: EnsureAuthenticatedAdditionalOptions = {},\n): Promise<{token: string; userId: string}> {\n  outputDebug(outputContent`Ensuring that the user is authenticated with the App Management API with the following scopes:\n${outputToken.json(scopes)}\n`)\n  const tokens = await ensureAuthenticated({appManagementApi: {scopes}}, env, options)\n  if (!tokens) {\n    throw new BugError('No App Management token found after ensuring authenticated')\n  }\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  return {token: tokens.appManagement!, userId: tokens.userId}\n}\n\n/**\n * Ensure that we have a valid session to access the Storefront API.\n *\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @param password - Optional password to use.\n * @param forceRefresh - Optional flag to force a refresh of the token.\n * @returns The access token for the Storefront API.\n */\nexport async function ensureAuthenticatedStorefront(\n  scopes: StorefrontRendererScope[] = [],\n  password: string | undefined = undefined,\n  forceRefresh = false,\n): Promise<string> {\n  if (password) {\n    const session = {token: password, storeFqdn: ''}\n    const authMethod = isThemeAccessSession(session) ? 'theme_access_token' : 'custom_app_token'\n    setLastSeenAuthMethod(authMethod)\n    setLastSeenUserIdAfterAuth(nonRandomUUID(password))\n    return password\n  }\n\n  outputDebug(outputContent`Ensuring that the user is authenticated with the Storefront API with the following scopes:\n${outputToken.json(scopes)}\n`)\n  const tokens = await ensureAuthenticated({storefrontRendererApi: {scopes}}, process.env, {forceRefresh})\n  if (!tokens.storefront) {\n    throw new BugError('No storefront token found after ensuring authenticated')\n  }\n  return tokens.storefront\n}\n\n/**\n * Ensure that we have a valid Admin session for the given store.\n *\n * @param store - Store fqdn to request auth for.\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @param forceRefresh - Optional flag to force a refresh of the token.\n * @param options - Optional extra options to use.\n * @returns The access token for the Admin API.\n */\nexport async function ensureAuthenticatedAdmin(\n  store: string,\n  scopes: AdminAPIScope[] = [],\n  forceRefresh = false,\n  options: EnsureAuthenticatedAdditionalOptions = {},\n): Promise<AdminSession> {\n  outputDebug(outputContent`Ensuring that the user is authenticated with the Admin API with the following scopes for the store ${outputToken.raw(\n    store,\n  )}:\n${outputToken.json(scopes)}\n`)\n  const tokens = await ensureAuthenticated({adminApi: {scopes, storeFqdn: store}}, process.env, {\n    forceRefresh,\n    ...options,\n  })\n  if (!tokens.admin) {\n    throw new BugError('No admin token found after ensuring authenticated')\n  }\n  return tokens.admin\n}\n\n/**\n * Ensure that we have a valid session to access the Theme API.\n * If a password is provided, that token will be used against Theme Access API.\n * Otherwise, it will ensure that the user is authenticated with the Admin API.\n *\n * @param store - Store fqdn to request auth for.\n * @param password - Password generated from Theme Access app.\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @param forceRefresh - Optional flag to force a refresh of the token.\n * @returns The access token and store.\n */\nexport async function ensureAuthenticatedThemes(\n  store: string,\n  password: string | undefined,\n  scopes: AdminAPIScope[] = [],\n  forceRefresh = false,\n): Promise<AdminSession> {\n  outputDebug(outputContent`Ensuring that the user is authenticated with the Theme API with the following scopes:\n${outputToken.json(scopes)}\n`)\n  if (password) {\n    const session = {token: password, storeFqdn: await normalizeStoreFqdn(store)}\n    const authMethod = isThemeAccessSession(session) ? 'theme_access_token' : 'custom_app_token'\n    setLastSeenAuthMethod(authMethod)\n    setLastSeenUserIdAfterAuth(nonRandomUUID(password))\n    return session\n  }\n  return ensureAuthenticatedAdmin(store, scopes, forceRefresh)\n}\n\n/**\n * Ensure that we have a valid session to access the Business Platform API.\n *\n * @param scopes - Optional array of extra scopes to authenticate with.\n * @returns The access token for the Business Platform API.\n */\nexport async function ensureAuthenticatedBusinessPlatform(scopes: BusinessPlatformScope[] = []): Promise<string> {\n  outputDebug(outputContent`Ensuring that the user is authenticated with the Business Platform API with the following scopes:\n${outputToken.json(scopes)}\n`)\n  const tokens = await ensureAuthenticated({businessPlatformApi: {scopes}}, process.env)\n  if (!tokens.businessPlatform) {\n    throw new BugError('No business-platform token found after ensuring authenticated')\n  }\n  return tokens.businessPlatform\n}\n\n/**\n * Logout from Shopify.\n *\n * @returns A promise that resolves when the logout is complete.\n */\nexport function logout(): Promise<void> {\n  return secureStore.remove()\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAAA;AAyCA,eAAsB,4BACpB,SAA6B,CAAA,GAC7B,MAAM,QAAQ,KACd,UAAgD,CAAA,GAAE;AAElD,cAAY;EACZ,YAAY,KAAK,MAAM,CAAC;CACzB;AACC,MAAM,WAAW,iBAAgB;AACjC,MAAI,UAAU;AACZ,QAAM,SAAS,MAAM,2BAA2B,QAAQ;AACxD,WAAO,EAAC,OAAO,OAAO,aAAa,QAAQ,OAAO,OAAM;EAC1D;AACA,MAAM,SAAS,MAAM,oBAAoB,EAAC,aAAa,EAAC,OAAM,EAAC,GAAG,KAAK,OAAO;AAC9E,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,SAAS,sDAAsD;AAE3E,SAAO,EAAC,OAAO,OAAO,UAAU,QAAQ,OAAO,OAAM;AACvD;AAUA,eAAsB,iCACpB,SAAkC,CAAA,GAClC,MAAM,QAAQ,KACd,UAAgD,CAAA,GAAE;AAElD,cAAY;EACZ,YAAY,KAAK,MAAM,CAAC;CACzB;AACC,MAAM,SAAS,MAAM,oBAAoB,EAAC,kBAAkB,EAAC,OAAM,EAAC,GAAG,KAAK,OAAO;AACnF,MAAI,CAAC;AACH,UAAM,IAAI,SAAS,4DAA4D;AAGjF,SAAO,EAAC,OAAO,OAAO,eAAgB,QAAQ,OAAO,OAAM;AAC7D;AAUA,eAAsB,8BACpB,SAAoC,CAAA,GACpC,WAA+B,QAC/B,eAAe,IAAK;AAEpB,MAAI,UAAU;AAEZ,QAAM,aAAa,qBADH,EAAC,OAAO,UAAU,WAAW,GAAE,CACA,IAAI,uBAAuB;AAC1E,iCAAsB,UAAU,GAChC,2BAA2B,cAAc,QAAQ,CAAC,GAC3C;EACT;AAEA,cAAY;EACZ,YAAY,KAAK,MAAM,CAAC;CACzB;AACC,MAAM,SAAS,MAAM,oBAAoB,EAAC,uBAAuB,EAAC,OAAM,EAAC,GAAG,QAAQ,KAAK,EAAC,aAAY,CAAC;AACvG,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,SAAS,wDAAwD;AAE7E,SAAO,OAAO;AAChB;AAWA,eAAsB,yBACpB,OACA,SAA0B,CAAA,GAC1B,eAAe,IACf,UAAgD,CAAA,GAAE;AAElD,cAAY,mHAAmH,YAAY,IACzI,KAAK,CACN;EACD,YAAY,KAAK,MAAM,CAAC;CACzB;AACC,MAAM,SAAS,MAAM,oBAAoB,EAAC,UAAU,EAAC,QAAQ,WAAW,MAAK,EAAC,GAAG,QAAQ,KAAK;IAC5F;IACA,GAAG;GACJ;AACD,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,SAAS,mDAAmD;AAExE,SAAO,OAAO;AAChB;AAaA,eAAsB,0BACpB,OACA,UACA,SAA0B,CAAA,GAC1B,eAAe,IAAK;AAKpB,MAHA,YAAY;EACZ,YAAY,KAAK,MAAM,CAAC;CACzB,GACK,UAAU;AACZ,QAAM,UAAU,EAAC,OAAO,UAAU,WAAW,MAAM,mBAAmB,KAAK,EAAC,GACtE,aAAa,qBAAqB,OAAO,IAAI,uBAAuB;AAC1E,iCAAsB,UAAU,GAChC,2BAA2B,cAAc,QAAQ,CAAC,GAC3C;EACT;AACA,SAAO,yBAAyB,OAAO,QAAQ,YAAY;AAC7D;AAQA,eAAsB,oCAAoC,SAAkC,CAAA,GAAE;AAC5F,cAAY;EACZ,YAAY,KAAK,MAAM,CAAC;CACzB;AACC,MAAM,SAAS,MAAM,oBAAoB,EAAC,qBAAqB,EAAC,OAAM,EAAC,GAAG,QAAQ,GAAG;AACrF,MAAI,CAAC,OAAO;AACV,UAAM,IAAI,SAAS,+DAA+D;AAEpF,SAAO,OAAO;AAChB;AAOM,SAAU,SAAM;AACpB,SAAmB,OAAM;AAC3B;",
  "names": []
}
