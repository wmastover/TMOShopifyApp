{
  "version": 3,
  "sources": ["../src/cli/services/commands/notifications.ts"],
  "sourcesContent": ["import {CLI_KIT_VERSION} from '@shopify/cli-kit/common/version'\nimport {randomUUID} from '@shopify/cli-kit/node/crypto'\nimport {writeFile} from '@shopify/cli-kit/node/fs'\nimport {\n  Notifications,\n  Notification,\n  stringifyFilters,\n  getNotifications,\n} from '@shopify/cli-kit/node/notifications-system'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\nimport {renderSelectPrompt, renderTextPrompt, renderSuccess, renderTable, TableColumn} from '@shopify/cli-kit/node/ui'\n\nexport async function generate() {\n  const today = new Date()\n  const formattedToday = `${today.getFullYear()}-${(today.getMonth() + 1).toString().padStart(2, '0')}-${today\n    .getDate()\n    .toString()\n    .padStart(2, '0')}`\n  const id = randomUUID()\n\n  const type: 'info' | 'warning' | 'error' = await renderSelectPrompt({\n    message: 'Type of message?',\n    choices: [\n      {label: 'Info', value: 'info'},\n      {label: 'Warning', value: 'warning'},\n      {label: 'Error', value: 'error'},\n    ],\n  })\n  const title = await renderTextPrompt({\n    message: 'Title',\n  })\n  const message = await renderTextPrompt({\n    message: 'Message',\n  })\n  const frequency: 'always' | 'once' | 'once_a_day' | 'once_a_week' = await renderSelectPrompt({\n    message: 'Frequency',\n    choices: [\n      {label: 'Only once', value: 'once'},\n      {label: 'Once a week', value: 'once_a_week'},\n      {label: 'Once a day', value: 'once_a_day'},\n      {label: 'Always', value: 'always'},\n    ],\n  })\n  const minVersion = await renderTextPrompt({\n    message: 'Minimum CLI version (optional)',\n    initialAnswer: CLI_KIT_VERSION,\n    allowEmpty: true,\n  })\n  const maxVersion = await renderTextPrompt({\n    message: 'Maximum CLI version (optional)',\n    initialAnswer: CLI_KIT_VERSION,\n    allowEmpty: true,\n  })\n  const minDate = await renderTextPrompt({\n    message: 'Minimum date in YYYY-MM-DD format (optional)',\n    initialAnswer: formattedToday,\n    allowEmpty: true,\n  })\n  const maxDate = await renderTextPrompt({\n    message: 'Maximum date in YYYY-MM-DD format (optional)',\n    initialAnswer: formattedToday,\n    allowEmpty: true,\n  })\n  const surface = await renderTextPrompt({\n    message: 'Surface. E.g.: app, theme, hydrogen, theme_app_extension... (optional)',\n    allowEmpty: true,\n  })\n  const commands = await renderTextPrompt({\n    message: 'Comma separated list of commands. E.g.: app:generate:extension (optional)',\n    allowEmpty: true,\n  })\n  const ownerChannel = await renderTextPrompt({\n    message: 'Slack channel of the team who will own this notification',\n  })\n\n  const notifications: Notifications = await getNotifications()\n  const notification: Notification = {\n    id,\n    type,\n    title,\n    frequency,\n    message,\n    minVersion: minVersion.length === 0 ? undefined : minVersion,\n    maxVersion: maxVersion.length === 0 ? undefined : maxVersion,\n    minDate: minDate.length === 0 ? undefined : minDate,\n    maxDate: maxDate.length === 0 ? undefined : maxDate,\n    surface: surface.length === 0 ? undefined : surface,\n    commands: commands.length === 0 ? undefined : commands.split(',').map((command) => command.trim()),\n    ownerChannel,\n  }\n  notifications.notifications.push(notification)\n  await writeFile('./notifications.json', JSON.stringify(notifications))\n\n  renderSuccess({headline: 'notifications.json file updated successfully.'})\n}\n\nexport async function list() {\n  const notifications: Notifications = await getNotifications()\n\n  const columns: TableColumn<{type: string; title: string; message: string; filters: string}> = {\n    type: {header: 'Type', color: 'dim'},\n    title: {header: 'Title', color: 'dim'},\n    message: {header: 'Message', color: 'dim'},\n    filters: {header: 'Filters', color: 'dim'},\n  }\n\n  const rows = notifications.notifications.map((notification: Notification) => {\n    return {\n      type: notification.type,\n      title: notification.title || '',\n      message: notification.message,\n      filters: stringifyFilters(notification),\n    }\n  })\n\n  renderTable({rows, columns})\n  outputInfo('\\n')\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAAA;AAYA,eAAsB,WAAW;AAC/B,MAAM,QAAQ,oBAAI,KAAK,GACjB,iBAAiB,GAAG,MAAM,YAAY,CAAC,KAAK,MAAM,SAAS,IAAI,GAAG,SAAS,EAAE,SAAS,GAAG,GAAG,CAAC,IAAI,MACpG,QAAQ,EACR,SAAS,EACT,SAAS,GAAG,GAAG,CAAC,IACb,KAAK,WAAW,GAEhB,OAAqC,MAAM,mBAAmB;AAAA,IAClE,SAAS;AAAA,IACT,SAAS;AAAA,MACP,EAAC,OAAO,QAAQ,OAAO,OAAM;AAAA,MAC7B,EAAC,OAAO,WAAW,OAAO,UAAS;AAAA,MACnC,EAAC,OAAO,SAAS,OAAO,QAAO;AAAA,IACjC;AAAA,EACF,CAAC,GACK,QAAQ,MAAM,iBAAiB;AAAA,IACnC,SAAS;AAAA,EACX,CAAC,GACK,UAAU,MAAM,iBAAiB;AAAA,IACrC,SAAS;AAAA,EACX,CAAC,GACK,YAA8D,MAAM,mBAAmB;AAAA,IAC3F,SAAS;AAAA,IACT,SAAS;AAAA,MACP,EAAC,OAAO,aAAa,OAAO,OAAM;AAAA,MAClC,EAAC,OAAO,eAAe,OAAO,cAAa;AAAA,MAC3C,EAAC,OAAO,cAAc,OAAO,aAAY;AAAA,MACzC,EAAC,OAAO,UAAU,OAAO,SAAQ;AAAA,IACnC;AAAA,EACF,CAAC,GACK,aAAa,MAAM,iBAAiB;AAAA,IACxC,SAAS;AAAA,IACT,eAAe;AAAA,IACf,YAAY;AAAA,EACd,CAAC,GACK,aAAa,MAAM,iBAAiB;AAAA,IACxC,SAAS;AAAA,IACT,eAAe;AAAA,IACf,YAAY;AAAA,EACd,CAAC,GACK,UAAU,MAAM,iBAAiB;AAAA,IACrC,SAAS;AAAA,IACT,eAAe;AAAA,IACf,YAAY;AAAA,EACd,CAAC,GACK,UAAU,MAAM,iBAAiB;AAAA,IACrC,SAAS;AAAA,IACT,eAAe;AAAA,IACf,YAAY;AAAA,EACd,CAAC,GACK,UAAU,MAAM,iBAAiB;AAAA,IACrC,SAAS;AAAA,IACT,YAAY;AAAA,EACd,CAAC,GACK,WAAW,MAAM,iBAAiB;AAAA,IACtC,SAAS;AAAA,IACT,YAAY;AAAA,EACd,CAAC,GACK,eAAe,MAAM,iBAAiB;AAAA,IAC1C,SAAS;AAAA,EACX,CAAC,GAEK,gBAA+B,MAAM,iBAAiB,GACtD,eAA6B;AAAA,IACjC;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,YAAY,WAAW,WAAW,IAAI,SAAY;AAAA,IAClD,YAAY,WAAW,WAAW,IAAI,SAAY;AAAA,IAClD,SAAS,QAAQ,WAAW,IAAI,SAAY;AAAA,IAC5C,SAAS,QAAQ,WAAW,IAAI,SAAY;AAAA,IAC5C,SAAS,QAAQ,WAAW,IAAI,SAAY;AAAA,IAC5C,UAAU,SAAS,WAAW,IAAI,SAAY,SAAS,MAAM,GAAG,EAAE,IAAI,CAAC,YAAY,QAAQ,KAAK,CAAC;AAAA,IACjG;AAAA,EACF;AACA,gBAAc,cAAc,KAAK,YAAY,GAC7C,MAAM,UAAU,wBAAwB,KAAK,UAAU,aAAa,CAAC,GAErE,cAAc,EAAC,UAAU,gDAA+C,CAAC;AAC3E;AAEA,eAAsB,OAAO;AAC3B,MAAM,gBAA+B,MAAM,iBAAiB,GAEtD,UAAwF;AAAA,IAC5F,MAAM,EAAC,QAAQ,QAAQ,OAAO,MAAK;AAAA,IACnC,OAAO,EAAC,QAAQ,SAAS,OAAO,MAAK;AAAA,IACrC,SAAS,EAAC,QAAQ,WAAW,OAAO,MAAK;AAAA,IACzC,SAAS,EAAC,QAAQ,WAAW,OAAO,MAAK;AAAA,EAC3C,GAEM,OAAO,cAAc,cAAc,IAAI,CAAC,kBACrC;AAAA,IACL,MAAM,aAAa;AAAA,IACnB,OAAO,aAAa,SAAS;AAAA,IAC7B,SAAS,aAAa;AAAA,IACtB,SAAS,iBAAiB,YAAY;AAAA,EACxC,EACD;AAED,cAAY,EAAC,MAAM,QAAO,CAAC,GAC3B,WAAW;AAAA,CAAI;AACjB;",
  "names": []
}
