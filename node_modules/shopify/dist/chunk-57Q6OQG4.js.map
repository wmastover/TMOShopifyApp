{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/commondir@1.0.1/node_modules/commondir/index.js", "../../cli-kit/src/public/node/path.ts"],
  "sourcesContent": ["var path = require('path');\n\nmodule.exports = function (basedir, relfiles) {\n    if (relfiles) {\n        var files = relfiles.map(function (r) {\n            return path.resolve(basedir, r);\n        });\n    }\n    else {\n        var files = basedir;\n    }\n    \n    var res = files.slice(1).reduce(function (ps, file) {\n        if (!file.match(/^([A-Za-z]:)?\\/|\\\\/)) {\n            throw new Error('relative path without a basedir');\n        }\n        \n        var xs = file.split(/\\/+|\\\\+/);\n        for (\n            var i = 0;\n            ps[i] === xs[i] && i < Math.min(ps.length, xs.length);\n            i++\n        );\n        return ps.slice(0, i);\n    }, files[0].split(/\\/+|\\\\+/));\n    \n    // Windows correctly handles paths with forward-slashes\n    return res.length > 1 ? res.join('/') : '/'\n};\n", "import commondir from 'commondir'\nimport {\n  relative,\n  dirname as patheDirname,\n  join,\n  normalize,\n  resolve,\n  basename as basenamePathe,\n  extname as extnamePathe,\n  isAbsolute,\n} from 'pathe'\nimport {fileURLToPath} from 'url'\n// eslint-disable-next-line node/prefer-global/url\nimport type {URL} from 'url'\n\n/**\n * Joins a list of paths together.\n *\n * @param paths - Paths to join.\n * @returns Joined path.\n */\nexport function joinPath(...paths: string[]): string {\n  return join(...paths)\n}\n\n/**\n * Normalizes a path.\n *\n * @param path - Path to normalize.\n * @returns Normalized path.\n */\nexport function normalizePath(path: string): string {\n  return normalize(path)\n}\n\n/**\n * Resolves a list of paths together.\n *\n * @param paths - Paths to resolve.\n * @returns Resolved path.\n */\nexport function resolvePath(...paths: string[]): string {\n  return resolve(...paths)\n}\n\n/**\n * Returns the relative path from one path to another.\n *\n * @param from - Path to resolve from.\n * @param to - Path to resolve to.\n * @returns Relative path.\n */\nexport function relativePath(from: string, to: string): string {\n  return relative(from, to)\n}\n\n/**\n * Returns whether the path is absolute.\n *\n * @param path - Path to check.\n * @returns Whether the path is absolute.\n */\nexport function isAbsolutePath(path: string): boolean {\n  return isAbsolute(path)\n}\n\n/**\n * Returns the directory name of a path.\n *\n * @param path - Path to get the directory name of.\n * @returns Directory name.\n */\nexport function dirname(path: string): string {\n  return patheDirname(path)\n}\n\n/**\n * Returns the base name of a path.\n *\n * @param path - Path to get the base name of.\n * @param ext - Optional extension to remove from the result.\n * @returns Base name.\n */\nexport function basename(path: string, ext?: string): string {\n  return basenamePathe(path, ext)\n}\n\n/**\n * Returns the extension of the path.\n *\n * @param path - Path to get the extension of.\n * @returns Extension.\n */\nexport function extname(path: string): string {\n  return extnamePathe(path)\n}\n\n/**\n * Given an absolute filesystem path, it makes it relative to\n * the current working directory. This is useful when logging paths\n * to allow the users to click on the file and let the OS open it\n * in the editor of choice.\n *\n * @param path - Path to relativize.\n * @param dir - Current working directory.\n * @returns Relativized path.\n */\nexport function relativizePath(path: string, dir: string = cwd()): string {\n  const result = commondir([path, dir])\n  const relativePath = relative(dir, path)\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore\n  const relativeComponents = relativePath.split('/').filter((component) => component === '..').length\n  if (result === '/' || relativePath === '' || relativeComponents > 2) {\n    return path\n  } else {\n    return relativePath\n  }\n}\n\n/**\n * Given 2 paths, it returns whether the second path is a subpath of the first path.\n *\n * @param mainPath - The main path.\n * @param subpath - The subpath.\n * @returns Whether the subpath is a subpath of the main path.\n */\nexport function isSubpath(mainPath: string, subpath: string): boolean {\n  const relativePath = relative(mainPath, subpath)\n  return !relativePath.startsWith('..') && !isAbsolutePath(relativePath)\n}\n\n/**\n * Given a module's import.meta.url it returns the directory containing the module.\n *\n * @param moduleURL - The value of import.meta.url in the context of the caller module.\n * @returns The path to the directory containing the caller module.\n */\nexport function moduleDirectory(moduleURL: string | URL): string {\n  return dirname(fileURLToPath(moduleURL))\n}\n\n/**\n * When running a script using `npm run`, something interesting happens. If the current\n * folder does not have a `package.json` or a `node_modules` folder, npm will traverse\n * the directory tree upwards until it finds one. Then it will run the script and set\n * `process.cwd()` to that folder, while the actual path is stored in the INIT_CWD\n * environment variable (see here: https://docs.npmjs.com/cli/v9/commands/npm-run-script#description).\n *\n * @returns The path to the current working directory.\n */\nexport function cwd(): string {\n  // eslint-disable-next-line @shopify/cli/no-process-cwd\n  return normalize(process.env.INIT_CWD ? process.env.INIT_CWD : process.cwd())\n}\n\n/**\n * Tries to get the value of the `--path` argument, if provided.\n *\n * @param argv - The arguments to search for the `--path` argument.\n * @returns The value of the `--path` argument, if provided.\n */\nexport function sniffForPath(argv = process.argv): string | undefined {\n  const pathFlagIndex = argv.indexOf('--path')\n  if (pathFlagIndex === -1) {\n    const pathArg = argv.find((arg) => arg.startsWith('--path='))\n    return pathArg?.split('=')[1]\n  }\n  const pathFlag = argv[pathFlagIndex + 1]\n  if (!pathFlag || pathFlag.startsWith('-')) return\n  return pathFlag\n}\n\n/**\n * Returns whether the `--json` or `-j` flags are present in the arguments.\n *\n * @param argv - The arguments to search for the `--json` and `-j` flags.\n * @returns Whether the `--json` or `-j` flag is present in the arguments.\n */\nexport function sniffForJson(argv = process.argv): boolean {\n  return argv.includes('--json') || argv.includes('-j')\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA,QAAI,OAAO,UAAQ,MAAM;AAEzB,WAAO,UAAU,SAAU,SAAS,UAAU;AAC1C,UAAI;AACA,YAAI,QAAQ,SAAS,IAAI,SAAU,GAAG;AAClC,iBAAO,KAAK,QAAQ,SAAS,CAAC;AAAA,QAClC,CAAC;AAAA;AAGD,YAAI,QAAQ;AAGhB,UAAI,MAAM,MAAM,MAAM,CAAC,EAAE,OAAO,SAAU,IAAI,MAAM;AAChD,YAAI,CAAC,KAAK,MAAM,oBAAoB;AAChC,gBAAM,IAAI,MAAM,iCAAiC;AAIrD,iBADI,KAAK,KAAK,MAAM,SAAS,GAErB,IAAI,GACR,GAAG,CAAC,MAAM,GAAG,CAAC,KAAK,IAAI,KAAK,IAAI,GAAG,QAAQ,GAAG,MAAM,GACpD,IACH;AACD,eAAO,GAAG,MAAM,GAAG,CAAC;AAAA,MACxB,GAAG,MAAM,CAAC,EAAE,MAAM,SAAS,CAAC;AAG5B,aAAO,IAAI,SAAS,IAAI,IAAI,KAAK,GAAG,IAAI;AAAA,IAC5C;AAAA;AAAA;;;AC5BA;uBAAsB;AAWtB,SAAQ,qBAAoB;AAUtB,SAAU,YAAY,OAAe;AACzC,SAAO,KAAK,GAAG,KAAK;AACtB;AAQM,SAAU,cAAc,MAAY;AACxC,SAAO,UAAU,IAAI;AACvB;AAQM,SAAU,eAAe,OAAe;AAC5C,SAAO,QAAQ,GAAG,KAAK;AACzB;AASM,SAAU,aAAa,MAAc,IAAU;AACnD,SAAO,SAAS,MAAM,EAAE;AAC1B;AAQM,SAAU,eAAe,MAAY;AACzC,SAAO,WAAW,IAAI;AACxB;AAQM,SAAUA,SAAQ,MAAY;AAClC,SAAO,QAAa,IAAI;AAC1B;AASM,SAAUC,UAAS,MAAc,KAAY;AACjD,SAAO,SAAc,MAAM,GAAG;AAChC;AAQM,SAAUC,SAAQ,MAAY;AAClC,SAAO,QAAa,IAAI;AAC1B;AAYM,SAAU,eAAe,MAAc,MAAc,IAAG,GAAE;AAC9D,MAAM,aAAS,iBAAAC,SAAU,CAAC,MAAM,GAAG,CAAC,GAC9BC,gBAAe,SAAS,KAAK,IAAI,GAGjC,qBAAqBA,cAAa,MAAM,GAAG,EAAE,OAAO,CAAC,cAAc,cAAc,IAAI,EAAE;AAC7F,SAAI,WAAW,OAAOA,kBAAiB,MAAM,qBAAqB,IACzD,OAEAA;AAEX;AASM,SAAU,UAAU,UAAkB,SAAe;AACzD,MAAMA,gBAAe,SAAS,UAAU,OAAO;AAC/C,SAAO,CAACA,cAAa,WAAW,IAAI,KAAK,CAAC,eAAeA,aAAY;AACvE;AAQM,SAAU,gBAAgB,WAAuB;AACrD,SAAOJ,SAAQ,cAAc,SAAS,CAAC;AACzC;AAWM,SAAU,MAAG;AAEjB,SAAO,UAAU,QAAQ,IAAI,WAAW,QAAQ,IAAI,WAAW,QAAQ,IAAG,CAAE;AAC9E;AAQM,SAAU,aAAa,OAAO,QAAQ,MAAI;AAC9C,MAAM,gBAAgB,KAAK,QAAQ,QAAQ;AAC3C,MAAI,kBAAkB;AAEpB,WADgB,KAAK,KAAK,CAAC,QAAQ,IAAI,WAAW,SAAS,CAAC,GAC5C,MAAM,GAAG,EAAE,CAAC;AAE9B,MAAM,WAAW,KAAK,gBAAgB,CAAC;AACvC,MAAI,GAAC,YAAY,SAAS,WAAW,GAAG;AACxC,WAAO;AACT;AAQM,SAAU,aAAa,OAAO,QAAQ,MAAI;AAC9C,SAAO,KAAK,SAAS,QAAQ,KAAK,KAAK,SAAS,IAAI;AACtD;",
  "names": ["dirname", "basename", "extname", "commondir", "relativePath"]
}
