{
  "version": 3,
  "sources": ["../src/cli/commands/docs/generate.ts"],
  "sourcesContent": ["import Command from '@shopify/cli-kit/node/base-command'\nimport {Command as oclifCommand} from '@oclif/core'\nimport {mkdir, rmdir, writeFile} from '@shopify/cli-kit/node/fs'\nimport {cwd, joinPath} from '@shopify/cli-kit/node/path'\nimport {outputInfo} from '@shopify/cli-kit/node/output'\n\nconst docsPath = joinPath(cwd(), '/docs-shopify.dev/commands')\n\nexport type CommandWithMarkdown = oclifCommand.Loadable & {descriptionWithMarkdown?: string}\n\nexport interface CommandData {\n  commandName: string\n  fileName: string\n  interfaceName: string\n  hasTopic: boolean\n  topic: string | undefined\n  hasFlags: boolean\n}\n\nexport default class DocsGenerate extends Command {\n  static description = 'Generate CLI commands documentation'\n  static hidden = true\n\n  async run(): Promise<void> {\n    const commands = this.config.commands as CommandWithMarkdown[]\n\n    // Remove all files and recreate the folder. To make sure we don't leave any orphaned files.\n    await rmdir(docsPath)\n    await mkdir(docsPath)\n\n    // Short by length to ensure that we first generate the interfaces for the parent topics to detect hidden ones.\n    const sortedCommands = commands\n      .sort((ca, cb) => ca.id.length - cb.id.length)\n      .filter((command) => !isHidden(command))\n    const promises = sortedCommands.flatMap((command) => {\n      const commandData = extractCommandData(command)\n      return [\n        writeCommandFlagInterface(command, commandData),\n        writeCommandUsageExampleFile(command, commandData),\n        writeCommandDocumentation(command, commandData),\n      ]\n    })\n\n    await Promise.all(promises)\n  }\n}\n\n// By default we hide oclif commands that are not part of the Shopify CLI documentation\nconst hiddenTopics: string[] = ['commands', 'help', 'plugins']\n\n// Topics that are included in the general commands category\nconst generalTopics: string[] = ['config', 'auth']\n\nfunction isHidden(command: oclifCommand.Loadable) {\n  // Some commands rely on the hidden property of the parent topic, but is not returned in the oclif command object\n  if (command.hidden) {\n    hiddenTopics.push(command.id)\n    return true\n  }\n\n  // User plugins are installed locally and are not part of the Shopify CLI documentation\n  if (command.pluginType === 'user') return true\n  return hiddenTopics.some((topic) => command.id.startsWith(`${topic}:`))\n}\n\nexport function extractCommandData(command: CommandWithMarkdown) {\n  const commandName = command.id.replace(/[:]/g, ' ')\n  const fileName = command.id.replace(/[:]/g, '-')\n  const interfaceName = command.id.replace(/[:-]/g, '')\n  const hasTopic = command.id.includes(':')\n  const topic = command.id.split(':')[0]\n  const hasFlags = command.flags && Object.keys(command.flags).length > 0\n  return {commandName, fileName, interfaceName, hasTopic, topic, hasFlags}\n}\n\n// Generates the documentation for a command and writes it to a file (also a file with an example usage of the command)\nexport async function writeCommandDocumentation(\n  command: CommandWithMarkdown,\n  {commandName, fileName, interfaceName, hasTopic, topic, hasFlags}: CommandData,\n) {\n  const flagDoc = `\n  {\n    title: 'Flags',\n    description: 'The following flags are available for the \\`${commandName}\\` command:',\n    type: '${interfaceName}',\n  },`\n\n  const description = command.descriptionWithMarkdown ?? command.description ?? command.summary ?? ''\n  const cleanDescription = description?.replace(/`/g, '\\\\`').replace(/https:\\/\\/shopify\\.dev/g, '')\n  const previewDescription = command.summary ?? description ?? ''\n  const cleanPreview = previewDescription.replace(/`/g, '\\\\`').replace(/https:\\/\\/shopify\\.dev/g, '')\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  const category = hasTopic && !generalTopics.includes(topic!) ? topic : 'general commands'\n\n  const string = `// This is an autogenerated file. Don't edit this file manually.\nimport {ReferenceEntityTemplateSchema} from '@shopify/generate-docs'\n\nconst data: ReferenceEntityTemplateSchema = {\n  name: '${commandName}',\n  description: \\`${cleanDescription}\\`,\n  overviewPreviewDescription: \\`${cleanPreview}\\`,\n  type: 'command',\n  isVisualComponent: false,\n  defaultExample: {\n    codeblock: {\n      tabs: [\n        {\n          title: '${commandName}',\n          code: './examples/${fileName}.example.sh',\n          language: 'bash',\n        },\n      ],\n      title: '${commandName}',\n    },\n  },\n  definitions: [${hasFlags ? flagDoc : ''}\n  ],\n  category: '${category}',\n  related: [\n  ],\n}\n\nexport default data`\n\n  await writeFile(`${docsPath}/${fileName}.doc.ts`, string)\n  outputInfo(`Generated docs for ${commandName}`)\n}\n\n// Generates an interface for the flags of a command and writes it to a file\nexport async function writeCommandFlagInterface(\n  command: oclifCommand.Loadable,\n  {fileName, interfaceName}: CommandData,\n) {\n  const flagsDetails = Object.keys(command.flags)\n    .map((flagName) => {\n      const flag = command.flags[flagName]\n      if (!flag) return\n      if (flag.hidden) return\n      const flagDescription = flag.description || ''\n      const char = flag.char ? `-${flag.char}, ` : ''\n      const type = flag.type === 'option' ? 'string' : \"''\"\n      const value = flag.type === 'option' ? ' <value>' : ''\n      const optional = flag.required ? '' : '?'\n      // eslint-disable-next-line no-negated-condition\n      const envValue = flag.env !== undefined ? ` @environment ${flag.env}` : ''\n      const flagContent = `  /**\n   * ${flagDescription}\n   *${envValue}\n   */\n  '${char}--${flagName}${value}'${optional}: ${type}`\n      // Example output: '-c, --config <value>'?: string\n      return flagContent\n    })\n    .filter((str) => str && str?.length > 0)\n    .join('\\n\\n')\n\n  const commandContent = `// This is an autogenerated file. Don't edit this file manually.\nexport interface ${interfaceName} {\n${flagsDetails}\n}\n`\n  await mkdir(`${docsPath}/interfaces`)\n  await writeFile(`${docsPath}/interfaces/${fileName}.interface.ts`, commandContent)\n}\n\n// Generates a file with an example usage of a command\nexport async function writeCommandUsageExampleFile(command: CommandWithMarkdown, {fileName, commandName}: CommandData) {\n  let usage = ''\n  const hasFlags = command.flags && Object.keys(command.flags).length > 0\n  if (typeof command.usage === 'string') {\n    usage = command.usage\n  } else if (Array.isArray(command.usage)) {\n    usage = command.usage.join('\\n\\n')\n  } else {\n    usage = `shopify ${commandName}${hasFlags ? ' [flags]' : ''}`\n  }\n  await mkdir(`${docsPath}/examples`)\n  await writeFile(`${docsPath}/examples/${fileName}.example.sh`, usage)\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;AAAA;AAMA,IAAM,WAAW,SAAS,IAAI,GAAG,4BAA4B,GAaxC,eAArB,cAA0C,qBAAQ;AAAA,EAChD;AAAA,SAAO,cAAc;AAAA;AAAA,EACrB;AAAA,SAAO,SAAS;AAAA;AAAA,EAEhB,MAAM,MAAqB;AACzB,QAAM,WAAW,KAAK,OAAO;AAG7B,UAAM,MAAM,QAAQ,GACpB,MAAM,MAAM,QAAQ;AAMpB,QAAM,WAHiB,SACpB,KAAK,CAAC,IAAI,OAAO,GAAG,GAAG,SAAS,GAAG,GAAG,MAAM,EAC5C,OAAO,CAAC,YAAY,CAAC,SAAS,OAAO,CAAC,EACT,QAAQ,CAAC,YAAY;AACnD,UAAM,cAAc,mBAAmB,OAAO;AAC9C,aAAO;AAAA,QACL,0BAA0B,SAAS,WAAW;AAAA,QAC9C,6BAA6B,SAAS,WAAW;AAAA,QACjD,0BAA0B,SAAS,WAAW;AAAA,MAChD;AAAA,IACF,CAAC;AAED,UAAM,QAAQ,IAAI,QAAQ;AAAA,EAC5B;AACF,GAGM,eAAyB,CAAC,YAAY,QAAQ,SAAS,GAGvD,gBAA0B,CAAC,UAAU,MAAM;AAEjD,SAAS,SAAS,SAAgC;AAEhD,SAAI,QAAQ,UACV,aAAa,KAAK,QAAQ,EAAE,GACrB,MAIL,QAAQ,eAAe,SAAe,KACnC,aAAa,KAAK,CAAC,UAAU,QAAQ,GAAG,WAAW,GAAG,KAAK,GAAG,CAAC;AACxE;AAEO,SAAS,mBAAmB,SAA8B;AAC/D,MAAM,cAAc,QAAQ,GAAG,QAAQ,QAAQ,GAAG,GAC5C,WAAW,QAAQ,GAAG,QAAQ,QAAQ,GAAG,GACzC,gBAAgB,QAAQ,GAAG,QAAQ,SAAS,EAAE,GAC9C,WAAW,QAAQ,GAAG,SAAS,GAAG,GAClC,QAAQ,QAAQ,GAAG,MAAM,GAAG,EAAE,CAAC,GAC/B,WAAW,QAAQ,SAAS,OAAO,KAAK,QAAQ,KAAK,EAAE,SAAS;AACtE,SAAO,EAAC,aAAa,UAAU,eAAe,UAAU,OAAO,SAAQ;AACzE;AAGA,eAAsB,0BACpB,SACA,EAAC,aAAa,UAAU,eAAe,UAAU,OAAO,SAAQ,GAChE;AACA,MAAM,UAAU;AAAA;AAAA;AAAA,gEAG8C,WAAW;AAAA,aAC9D,aAAa;AAAA,OAGlB,cAAc,QAAQ,2BAA2B,QAAQ,eAAe,QAAQ,WAAW,IAC3F,mBAAmB,aAAa,QAAQ,MAAM,KAAK,EAAE,QAAQ,2BAA2B,EAAE,GAE1F,gBADqB,QAAQ,WAAW,eAAe,IACrB,QAAQ,MAAM,KAAK,EAAE,QAAQ,2BAA2B,EAAE,GAG5F,WAAW,YAAY,CAAC,cAAc,SAAS,KAAM,IAAI,QAAQ,oBAEjE,SAAS;AAAA;AAAA;AAAA;AAAA,WAIN,WAAW;AAAA,mBACH,gBAAgB;AAAA,kCACD,YAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAO1B,WAAW;AAAA,8BACD,QAAQ;AAAA;AAAA;AAAA;AAAA,gBAItB,WAAW;AAAA;AAAA;AAAA,kBAGT,WAAW,UAAU,EAAE;AAAA;AAAA,eAE1B,QAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAOrB,QAAM,UAAU,GAAG,QAAQ,IAAI,QAAQ,WAAW,MAAM,GACxD,WAAW,sBAAsB,WAAW,EAAE;AAChD;AAGA,eAAsB,0BACpB,SACA,EAAC,UAAU,cAAa,GACxB;AACA,MAAM,eAAe,OAAO,KAAK,QAAQ,KAAK,EAC3C,IAAI,CAAC,aAAa;AACjB,QAAM,OAAO,QAAQ,MAAM,QAAQ;AAEnC,QADI,CAAC,QACD,KAAK,OAAQ;AACjB,QAAM,kBAAkB,KAAK,eAAe,IACtC,OAAO,KAAK,OAAO,IAAI,KAAK,IAAI,OAAO,IACvC,OAAO,KAAK,SAAS,WAAW,WAAW,MAC3C,QAAQ,KAAK,SAAS,WAAW,aAAa,IAC9C,WAAW,KAAK,WAAW,KAAK,KAEhC,WAAW,KAAK,QAAQ,SAAY,iBAAiB,KAAK,GAAG,KAAK;AAOxE,WANoB;AAAA,OACnB,eAAe;AAAA,MAChB,QAAQ;AAAA;AAAA,KAET,IAAI,KAAK,QAAQ,GAAG,KAAK,IAAI,QAAQ,KAAK,IAAI;AAAA,EAG/C,CAAC,EACA,OAAO,CAAC,QAAQ,OAAO,KAAK,SAAS,CAAC,EACtC,KAAK;AAAA;AAAA,CAAM,GAER,iBAAiB;AAAA,mBACN,aAAa;AAAA,EAC9B,YAAY;AAAA;AAAA;AAGZ,QAAM,MAAM,GAAG,QAAQ,aAAa,GACpC,MAAM,UAAU,GAAG,QAAQ,eAAe,QAAQ,iBAAiB,cAAc;AACnF;AAGA,eAAsB,6BAA6B,SAA8B,EAAC,UAAU,YAAW,GAAgB;AACrH,MAAI,QAAQ,IACN,WAAW,QAAQ,SAAS,OAAO,KAAK,QAAQ,KAAK,EAAE,SAAS;AACtE,EAAI,OAAO,QAAQ,SAAU,WAC3B,QAAQ,QAAQ,QACP,MAAM,QAAQ,QAAQ,KAAK,IACpC,QAAQ,QAAQ,MAAM,KAAK;AAAA;AAAA,CAAM,IAEjC,QAAQ,WAAW,WAAW,GAAG,WAAW,aAAa,EAAE,IAE7D,MAAM,MAAM,GAAG,QAAQ,WAAW,GAClC,MAAM,UAAU,GAAG,QAAQ,aAAa,QAAQ,eAAe,KAAK;AACtE;",
  "names": []
}
