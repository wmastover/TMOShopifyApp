{
  "version": 3,
  "sources": ["../../../src/cli/services/upgrade.test.ts"],
  "sourcesContent": ["import {upgrade} from './upgrade.js'\nimport * as upgradeService from './upgrade.js'\nimport {afterEach, beforeEach, describe, expect, vi, test} from 'vitest'\nimport {platformAndArch} from '@shopify/cli-kit/node/os'\nimport * as nodePackageManager from '@shopify/cli-kit/node/node-package-manager'\nimport {exec, captureOutput} from '@shopify/cli-kit/node/system'\nimport {inTemporaryDirectory, touchFile, writeFile} from '@shopify/cli-kit/node/fs'\nimport {joinPath, normalizePath} from '@shopify/cli-kit/node/path'\nimport {mockAndCaptureOutput} from '@shopify/cli-kit/node/testing/output'\nimport {AbortError} from '@shopify/cli-kit/node/error'\n\nconst oldCliVersion = '3.0.0'\n// just needs to be higher than oldCliVersion for these tests\nconst currentCliVersion = '3.10.0'\n\nvi.mock('@shopify/cli-kit/node/os', async () => {\n  return {\n    platformAndArch: vi.fn(),\n  }\n})\nvi.mock('@shopify/cli-kit/node/system')\n\nbeforeEach(async () => {\n  vi.mocked(platformAndArch).mockReturnValue({platform: 'windows', arch: 'amd64'})\n})\nafterEach(() => {\n  mockAndCaptureOutput().clear()\n})\n\ndescribe('upgrade global CLI', () => {\n  test('does not upgrade globally if the latest version is found', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValue(undefined)\n\n      // When\n      await upgrade(tmpDir, currentCliVersion, {env: {}})\n\n      // Then\n      expect(outputMock.info()).toMatchInlineSnapshot(`\n        \"You're on the latest version, ${currentCliVersion}, no need to upgrade!\"\n      `)\n    })\n  })\n\n  test('upgrades globally using npm if the latest version is not found', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      const outputMock = mockAndCaptureOutput()\n      vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValue(currentCliVersion)\n\n      // When\n      await upgrade(tmpDir, oldCliVersion, {env: {}})\n\n      // Then\n      expect(vi.mocked(exec)).toHaveBeenCalledWith(\n        'npm',\n        ['install', '-g', '@shopify/cli@latest', '@shopify/theme@latest'],\n        {stdio: 'inherit'},\n      )\n      expect(outputMock.info()).toMatchInlineSnapshot(`\n        \"Upgrading CLI from ${oldCliVersion} to ${currentCliVersion}...\\nAttempting to upgrade via \\`npm install -g @shopify/cli@latest @shopify/theme@latest\\`...\"\n      `)\n      expect(outputMock.success()).toMatchInlineSnapshot(`\n        \"Upgraded Shopify CLI to version ${currentCliVersion}\"\n      `)\n    })\n  })\n\n  const homebrewPackageNames = ['shopify-cli', 'shopify-cli@3']\n  homebrewPackageNames.forEach((homebrewPackageName: string) => {\n    test('upgrades globally using Homebrew if the latest version is not found and the CLI was installed via Homebrew', async () => {\n      await inTemporaryDirectory(async (tmpDir) => {\n        // Given\n        vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValue(currentCliVersion)\n\n        // Then\n        await expect(async () => {\n          await upgrade(tmpDir, oldCliVersion, {env: {SHOPIFY_HOMEBREW_FORMULA: homebrewPackageName}})\n        }).rejects.toThrowError(AbortError)\n      })\n    })\n  })\n})\n\ndescribe('upgrade local CLI', () => {\n  test('throws an error if a valid app config file is missing', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      await Promise.all([\n        writeFile(\n          joinPath(tmpDir, 'package.json'),\n          JSON.stringify({dependencies: {'@shopify/cli': currentCliVersion, '@shopify/app': currentCliVersion}}),\n        ),\n        touchFile(joinPath(tmpDir, 'shopify.wrongapp.toml')),\n      ])\n      const outputMock = mockAndCaptureOutput()\n      vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValue(undefined)\n\n      // When // Then\n      await expect(upgrade(tmpDir, currentCliVersion, {env: {npm_config_user_agent: 'npm'}})).rejects.toBeInstanceOf(\n        AbortError,\n      )\n    })\n  })\n\n  test('does not upgrade locally if the latest version is found', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      await Promise.all([\n        writeFile(\n          joinPath(tmpDir, 'package.json'),\n          JSON.stringify({dependencies: {'@shopify/cli': currentCliVersion, '@shopify/app': currentCliVersion}}),\n        ),\n        touchFile(joinPath(tmpDir, 'shopify.app.toml')),\n      ])\n      const outputMock = mockAndCaptureOutput()\n      vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValue(undefined)\n\n      // When\n      await upgrade(tmpDir, currentCliVersion, {env: {npm_config_user_agent: 'npm'}})\n\n      // Then\n      expect(outputMock.info()).toMatchInlineSnapshot(`\n        \"You're on the latest version, ${currentCliVersion}, no need to upgrade!\"\n      `)\n    })\n  })\n\n  test('upgrades locally if the latest version is not found', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      await Promise.all([\n        writeFile(\n          joinPath(tmpDir, 'package.json'),\n          JSON.stringify({dependencies: {'@shopify/cli': oldCliVersion, '@shopify/app': oldCliVersion}}),\n        ),\n        touchFile(joinPath(tmpDir, 'shopify.app.toml')),\n      ])\n      vi.mocked(captureOutput).mockResolvedValueOnce(tmpDir)\n\n      const outputMock = mockAndCaptureOutput()\n      vi.spyOn(nodePackageManager as any, 'checkForNewVersion').mockResolvedValueOnce(currentCliVersion)\n      const addNPMDependenciesMock = vi\n        .spyOn(nodePackageManager as any, 'addNPMDependencies')\n        .mockResolvedValue(undefined)\n\n      // When\n      await upgradeService.upgrade(tmpDir, oldCliVersion, {env: {}})\n\n      // Then\n      expect(captureOutput).toHaveBeenCalledWith('npm', ['prefix'], {cwd: normalizePath(tmpDir)})\n      expect(outputMock.info()).toMatchInlineSnapshot(`\n        \"Upgrading CLI from ${oldCliVersion} to ${currentCliVersion}...\"\n      `)\n      expect(addNPMDependenciesMock).toHaveBeenCalledWith([{name: '@shopify/cli', version: 'latest'}], {\n        packageManager: 'npm',\n        type: 'prod',\n        directory: normalizePath(tmpDir),\n        stdout: process.stdout,\n        stderr: process.stderr,\n        addToRootDirectory: false,\n      })\n      expect(outputMock.success()).toMatchInlineSnapshot(`\n        \"Upgraded Shopify CLI to version ${currentCliVersion}\"\n      `)\n    })\n  })\n\n  test('upgrades locally if CLI is on latest version but APP isnt', async () => {\n    await inTemporaryDirectory(async (tmpDir) => {\n      // Given\n      await Promise.all([\n        writeFile(\n          joinPath(tmpDir, 'package.json'),\n          JSON.stringify({dependencies: {'@shopify/cli': currentCliVersion, '@shopify/app': oldCliVersion}}),\n        ),\n        touchFile(joinPath(tmpDir, 'shopify.app.nondefault.toml')),\n      ])\n      vi.mocked(captureOutput).mockResolvedValueOnce(tmpDir)\n\n      const outputMock = mockAndCaptureOutput()\n      const checkMock = vi.spyOn(nodePackageManager as any, 'checkForNewVersion')\n      checkMock.mockResolvedValueOnce(undefined).mockResolvedValueOnce(currentCliVersion)\n      const addNPMDependenciesMock = vi\n        .spyOn(nodePackageManager as any, 'addNPMDependencies')\n        .mockResolvedValue(undefined)\n\n      // When\n      await upgradeService.upgrade(tmpDir, oldCliVersion, {env: {}})\n\n      // Then\n      expect(captureOutput).toHaveBeenCalledWith('npm', ['prefix'], {cwd: normalizePath(tmpDir)})\n      expect(outputMock.info()).toMatchInlineSnapshot(`\n        \"Upgrading CLI from ${oldCliVersion} to ${currentCliVersion}...\"\n      `)\n      expect(addNPMDependenciesMock).toHaveBeenCalledWith([{name: '@shopify/cli', version: 'latest'}], {\n        packageManager: 'npm',\n        type: 'prod',\n        directory: normalizePath(tmpDir),\n        stdout: process.stdout,\n        stderr: process.stderr,\n        addToRootDirectory: false,\n      })\n      expect(outputMock.success()).toMatchInlineSnapshot(`\n        \"Upgraded Shopify CLI to version ${currentCliVersion}\"\n      `)\n    })\n  })\n})\n"],
  "mappings": "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",
  "names": []
}
