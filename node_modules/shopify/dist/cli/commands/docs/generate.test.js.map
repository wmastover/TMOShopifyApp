{
  "version": 3,
  "sources": ["../../../../src/cli/commands/docs/generate.test.ts"],
  "sourcesContent": ["import {\n  CommandData,\n  CommandWithMarkdown,\n  extractCommandData,\n  writeCommandDocumentation,\n  writeCommandFlagInterface,\n  writeCommandUsageExampleFile,\n} from './generate.js'\nimport {writeFile} from '@shopify/cli-kit/node/fs'\nimport {describe, test, vi, expect} from 'vitest'\n\nvi.mock('@shopify/cli-kit/node/fs')\n\nconst testCommand: CommandWithMarkdown = {\n  aliases: [],\n  args: {},\n  flags: {\n    flag1: {\n      name: 'flag1',\n      type: 'option',\n      char: 'f',\n      description: 'flag description',\n    },\n    flag2: {\n      name: 'flag2',\n      type: 'boolean',\n      char: 'a',\n      description: 'another flag description',\n      env: 'FLAG_ENV',\n      allowNo: false,\n    },\n  },\n  descriptionWithMarkdown: 'command markdown description',\n  description: 'command description',\n  summary: 'command summary',\n  hidden: false,\n  hiddenAliases: [],\n  id: 'topic:test-command',\n  load: () => Promise.resolve({} as any),\n}\n\nconst commandData: CommandData = {\n  commandName: 'topic test-command',\n  fileName: 'topic-test-command',\n  interfaceName: 'topictestcommand',\n  hasTopic: true,\n  topic: 'topic',\n  hasFlags: true,\n}\n\ndescribe('extractCommandData', () => {\n  test('returns the correct data', () => {\n    expect(extractCommandData(testCommand)).toEqual(commandData)\n  })\n})\n\ndescribe('writeCommandFlagInterface', () => {\n  test('calls writeFile with the correct content', async () => {\n    await writeCommandFlagInterface(testCommand, commandData)\n\n    expect(writeFile).toHaveBeenCalledWith(\n      expect.stringContaining('docs-shopify.dev/commands/interfaces/topic-test-command.interface.ts'),\n      `// This is an autogenerated file. Don't edit this file manually.\nexport interface topictestcommand {\n  /**\n   * flag description\n   *\n   */\n  '-f, --flag1 <value>'?: string\n\n  /**\n   * another flag description\n   * @environment FLAG_ENV\n   */\n  '-a, --flag2'?: ''\n}\n`,\n    )\n  })\n\n  test('calls writeFile with the correct content for a command with no flags', async () => {\n    await writeCommandFlagInterface({...testCommand, flags: {}}, commandData)\n\n    expect(writeFile).toHaveBeenCalledWith(\n      expect.stringContaining('docs-shopify.dev/commands/interfaces/topic-test-command.interface.ts'),\n      `// This is an autogenerated file. Don't edit this file manually.\nexport interface topictestcommand {\n\n}\n`,\n    )\n  })\n})\n\ndescribe('writeCommandDocs', () => {\n  test('calls writeFile with the correct content', async () => {\n    await writeCommandDocumentation(testCommand, commandData)\n\n    expect(writeFile).toHaveBeenCalledWith(\n      expect.stringContaining('docs-shopify.dev/commands/topic-test-command.doc.ts'),\n      `// This is an autogenerated file. Don't edit this file manually.\nimport {ReferenceEntityTemplateSchema} from '@shopify/generate-docs'\n\nconst data: ReferenceEntityTemplateSchema = {\n  name: 'topic test-command',\n  description: \\`command markdown description\\`,\n  overviewPreviewDescription: \\`command summary\\`,\n  type: 'command',\n  isVisualComponent: false,\n  defaultExample: {\n    codeblock: {\n      tabs: [\n        {\n          title: 'topic test-command',\n          code: './examples/topic-test-command.example.sh',\n          language: 'bash',\n        },\n      ],\n      title: 'topic test-command',\n    },\n  },\n  definitions: [\n  {\n    title: 'Flags',\n    description: 'The following flags are available for the \\`topic test-command\\` command:',\n    type: 'topictestcommand',\n  },\n  ],\n  category: 'topic',\n  related: [\n  ],\n}\n\nexport default data`,\n    )\n  })\n})\n\ndescribe('writeCommandUsageExampleFile', () => {\n  test('calls writeFile with the correct content', async () => {\n    await writeCommandUsageExampleFile(testCommand, commandData)\n\n    expect(writeFile).toHaveBeenCalledWith(\n      expect.stringContaining('docs-shopify.dev/commands/examples/topic-test-command.example.sh'),\n      'shopify topic test-command [flags]',\n    )\n  })\n})\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAWA,GAAG,KAAK,0BAA0B;AAElC,IAAM,cAAmC;AAAA,EACvC,SAAS,CAAC;AAAA,EACV,MAAM,CAAC;AAAA,EACP,OAAO;AAAA,IACL,OAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,MAAM;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,MACb,KAAK;AAAA,MACL,SAAS;AAAA,IACX;AAAA,EACF;AAAA,EACA,yBAAyB;AAAA,EACzB,aAAa;AAAA,EACb,SAAS;AAAA,EACT,QAAQ;AAAA,EACR,eAAe,CAAC;AAAA,EAChB,IAAI;AAAA,EACJ,MAAM,MAAM,QAAQ,QAAQ,CAAC,CAAQ;AACvC,GAEM,cAA2B;AAAA,EAC/B,aAAa;AAAA,EACb,UAAU;AAAA,EACV,eAAe;AAAA,EACf,UAAU;AAAA,EACV,OAAO;AAAA,EACP,UAAU;AACZ;AAEA,SAAS,sBAAsB,MAAM;AACnC,OAAK,4BAA4B,MAAM;AACrC,iBAAO,mBAAmB,WAAW,CAAC,EAAE,QAAQ,WAAW;AAAA,EAC7D,CAAC;AACH,CAAC;AAED,SAAS,6BAA6B,MAAM;AAC1C,OAAK,4CAA4C,YAAY;AAC3D,UAAM,0BAA0B,aAAa,WAAW,GAExD,aAAO,SAAS,EAAE;AAAA,MAChB,aAAO,iBAAiB,sEAAsE;AAAA,MAC9F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAeF;AAAA,EACF,CAAC,GAED,KAAK,wEAAwE,YAAY;AACvF,UAAM,0BAA0B,EAAC,GAAG,aAAa,OAAO,CAAC,EAAC,GAAG,WAAW,GAExE,aAAO,SAAS,EAAE;AAAA,MAChB,aAAO,iBAAiB,sEAAsE;AAAA,MAC9F;AAAA;AAAA;AAAA;AAAA;AAAA,IAKF;AAAA,EACF,CAAC;AACH,CAAC;AAED,SAAS,oBAAoB,MAAM;AACjC,OAAK,4CAA4C,YAAY;AAC3D,UAAM,0BAA0B,aAAa,WAAW,GAExD,aAAO,SAAS,EAAE;AAAA,MAChB,aAAO,iBAAiB,qDAAqD;AAAA,MAC7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAkCF;AAAA,EACF,CAAC;AACH,CAAC;AAED,SAAS,gCAAgC,MAAM;AAC7C,OAAK,4CAA4C,YAAY;AAC3D,UAAM,6BAA6B,aAAa,WAAW,GAE3D,aAAO,SAAS,EAAE;AAAA,MAChB,aAAO,iBAAiB,kEAAkE;AAAA,MAC1F;AAAA,IACF;AAAA,EACF,CAAC;AACH,CAAC;",
  "names": []
}
