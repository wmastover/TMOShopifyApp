{
  "version": 3,
  "sources": ["../../src/hooks/prerun.ts", "../../../cli-kit/src/public/node/hooks/prerun.ts"],
  "sourcesContent": ["export {hook as default} from '@shopify/cli-kit/node/hooks/prerun'\n", "import {CLI_KIT_VERSION} from '../../common/version.js'\nimport {checkForNewVersion, checkForCachedNewVersion} from '../node-package-manager.js'\nimport {startAnalytics} from '../../../private/node/analytics.js'\nimport {outputDebug, outputWarn} from '../../../public/node/output.js'\nimport {getOutputUpdateCLIReminder} from '../../../public/node/upgrade.js'\nimport Command from '../../../public/node/base-command.js'\nimport {runAtMinimumInterval} from '../../../private/node/conf-store.js'\nimport {Hook} from '@oclif/core'\n\nexport declare interface CommandContent {\n  command: string\n  topic?: string\n  alias?: string\n}\n// This hook is called before each command run. More info: https://oclif.io/docs/hooks\nexport const hook: Hook.Prerun = async (options) => {\n  const commandContent = parseCommandContent({\n    id: options.Command.id,\n    aliases: options.Command.aliases,\n    pluginAlias: options.Command.plugin?.alias,\n  })\n  const args = options.argv\n  await warnOnAvailableUpgrade()\n  outputDebug(`Running command ${commandContent.command}`)\n  await startAnalytics({commandContent, args, commandClass: options.Command as unknown as typeof Command})\n}\n\nexport function parseCommandContent(cmdInfo: {id: string; aliases: string[]; pluginAlias?: string}): CommandContent {\n  let commandContent = parseCreateCommand(cmdInfo.pluginAlias)\n  if (!commandContent) {\n    commandContent = parseNormalCommand(cmdInfo.id, cmdInfo.aliases)\n  }\n  return commandContent\n}\n\nfunction parseNormalCommand(id: string, aliases: string[]): CommandContent {\n  return {\n    command: id.replace(/:/g, ' '),\n    topic: parseTopic(id),\n    alias: findAlias(aliases),\n  }\n}\n\n/**\n * Create commands implement Init by default, so the name of the command must be extracted from\n * the plugin/module name. Neither alias or topic are supported\n *\n * @param commandClass - Oclif command configuration\n * @returns Command content with the name of the command or undefined otherwise\n */\nfunction parseCreateCommand(pluginAlias?: string): CommandContent | undefined {\n  if (!pluginAlias?.startsWith('@shopify/create-')) {\n    return undefined\n  }\n\n  return {command: pluginAlias.substring(pluginAlias.indexOf('/') + 1)}\n}\n\n/**\n * Commands use this pattern topic:subtopic1:...:subtopicN:command. This method extract the topic and subtopic\n * information replacing the ':' separator with one space\n *\n * @param cmd - Complete command string to extract the topic information\n * @returns The topic name or undefined otherwise\n */\nfunction parseTopic(cmd: string) {\n  if (cmd.lastIndexOf(':') === -1) {\n    return\n  }\n  return cmd.slice(0, cmd.lastIndexOf(':')).replace(/:/g, ' ')\n}\n\n/**\n * Identifies if the command was launched using an alias instead of the oficial command name\n *\n * @param aliases - List of possible alias a command has\n * @returns The alias used or undefined otherwise\n */\nfunction findAlias(aliases: string[]) {\n  const existingAlias = aliases.find((alias) =>\n    alias.split(':').every((aliasToken) => process.argv.includes(aliasToken)),\n  )\n  if (existingAlias) {\n    return existingAlias.replace(/:/g, ' ')\n  }\n}\n\n/**\n * Warns the user if there is a new version of the CLI available\n */\nexport async function warnOnAvailableUpgrade(): Promise<void> {\n  const cliDependency = '@shopify/cli'\n  const currentVersion = CLI_KIT_VERSION\n  if (currentVersion.startsWith('0.0.0')) {\n    // This is a nightly/snapshot/experimental version, so we don't want to check for updates\n    return\n  }\n\n  // Check in the background, once daily\n  // eslint-disable-next-line no-void\n  void checkForNewVersion(cliDependency, currentVersion, {cacheExpiryInHours: 24})\n\n  // Warn if we previously found a new version\n  await runAtMinimumInterval('warn-on-available-upgrade', {days: 1}, async () => {\n    const newerVersion = checkForCachedNewVersion(cliDependency, currentVersion)\n    if (newerVersion) {\n      outputWarn(getOutputUpdateCLIReminder(newerVersion))\n    }\n  })\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;ACAA;AAeO,IAAM,OAAoB,OAAO,YAAW;AACjD,MAAM,iBAAiB,oBAAoB;IACzC,IAAI,QAAQ,QAAQ;IACpB,SAAS,QAAQ,QAAQ;IACzB,aAAa,QAAQ,QAAQ,QAAQ;GACtC,GACK,OAAO,QAAQ;AACrB,QAAM,uBAAsB,GAC5B,YAAY,mBAAmB,eAAe,OAAO,EAAE,GACvD,MAAM,eAAe,EAAC,gBAAgB,MAAM,cAAc,QAAQ,QAAoC,CAAC;AACzG;AAEM,SAAU,oBAAoB,SAA8D;AAChG,MAAI,iBAAiB,mBAAmB,QAAQ,WAAW;AAC3D,SAAK,mBACH,iBAAiB,mBAAmB,QAAQ,IAAI,QAAQ,OAAO,IAE1D;AACT;AAEA,SAAS,mBAAmB,IAAY,SAAiB;AACvD,SAAO;IACL,SAAS,GAAG,QAAQ,MAAM,GAAG;IAC7B,OAAO,WAAW,EAAE;IACpB,OAAO,UAAU,OAAO;;AAE5B;AASA,SAAS,mBAAmB,aAAoB;AAC9C,MAAK,aAAa,WAAW,kBAAkB;AAI/C,WAAO,EAAC,SAAS,YAAY,UAAU,YAAY,QAAQ,GAAG,IAAI,CAAC,EAAC;AACtE;AASA,SAAS,WAAW,KAAW;AAC7B,MAAI,IAAI,YAAY,GAAG,MAAM;AAG7B,WAAO,IAAI,MAAM,GAAG,IAAI,YAAY,GAAG,CAAC,EAAE,QAAQ,MAAM,GAAG;AAC7D;AAQA,SAAS,UAAU,SAAiB;AAClC,MAAM,gBAAgB,QAAQ,KAAK,CAAC,UAClC,MAAM,MAAM,GAAG,EAAE,MAAM,CAAC,eAAe,QAAQ,KAAK,SAAS,UAAU,CAAC,CAAC;AAE3E,MAAI;AACF,WAAO,cAAc,QAAQ,MAAM,GAAG;AAE1C;AAKA,eAAsB,yBAAsB;AAC1C,MAAM,gBAAgB,gBAChB,iBAAiB;AACvB,EAAI,eAAe,WAAW,OAAO,MAOhC,mBAAmB,eAAe,gBAAgB,EAAC,oBAAoB,GAAE,CAAC,GAG/E,MAAM,qBAAqB,6BAA6B,EAAC,MAAM,EAAC,GAAG,YAAW;AAC5E,QAAM,eAAe,yBAAyB,eAAe,cAAc;AAC3E,IAAI,gBACF,WAAW,2BAA2B,YAAY,CAAC;EAEvD,CAAC;AACH;",
  "names": []
}
