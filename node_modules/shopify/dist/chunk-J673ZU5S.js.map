{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@shopify+cli-hydrogen@9.0.3_@graphql-codegen+cli@5.0.2_react-dom@17.0.2_react@17.0.2/node_modules/@shopify/cli-hydrogen/dist/lib/find-port.js", "../../../node_modules/.pnpm/get-port@7.1.0/node_modules/get-port/index.js"],
  "sourcesContent": ["import getPort, { portNumbers } from 'get-port';\n\nfunction findPort(portPreference, range = 100) {\n  return getPort({\n    port: portNumbers(portPreference, portPreference + range)\n  });\n}\n\nexport { findPort };\n", "import net from 'node:net';\nimport os from 'node:os';\n\nclass Locked extends Error {\n\tconstructor(port) {\n\t\tsuper(`${port} is locked`);\n\t}\n}\n\nconst lockedPorts = {\n\told: new Set(),\n\tyoung: new Set(),\n};\n\n// On this interval, the old locked ports are discarded,\n// the young locked ports are moved to old locked ports,\n// and a new young set for locked ports are created.\nconst releaseOldLockedPortsIntervalMs = 1000 * 15;\n\nconst minPort = 1024;\nconst maxPort = 65_535;\n\n// Lazily create timeout on first use\nlet timeout;\n\nconst getLocalHosts = () => {\n\tconst interfaces = os.networkInterfaces();\n\n\t// Add undefined value for createServer function to use default host,\n\t// and default IPv4 host in case createServer defaults to IPv6.\n\tconst results = new Set([undefined, '0.0.0.0']);\n\n\tfor (const _interface of Object.values(interfaces)) {\n\t\tfor (const config of _interface) {\n\t\t\tresults.add(config.address);\n\t\t}\n\t}\n\n\treturn results;\n};\n\nconst checkAvailablePort = options =>\n\tnew Promise((resolve, reject) => {\n\t\tconst server = net.createServer();\n\t\tserver.unref();\n\t\tserver.on('error', reject);\n\n\t\tserver.listen(options, () => {\n\t\t\tconst {port} = server.address();\n\t\t\tserver.close(() => {\n\t\t\t\tresolve(port);\n\t\t\t});\n\t\t});\n\t});\n\nconst getAvailablePort = async (options, hosts) => {\n\tif (options.host || options.port === 0) {\n\t\treturn checkAvailablePort(options);\n\t}\n\n\tfor (const host of hosts) {\n\t\ttry {\n\t\t\tawait checkAvailablePort({port: options.port, host}); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tif (!['EADDRNOTAVAIL', 'EINVAL'].includes(error.code)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\treturn options.port;\n};\n\nconst portCheckSequence = function * (ports) {\n\tif (ports) {\n\t\tyield * ports;\n\t}\n\n\tyield 0; // Fall back to 0 if anything else failed\n};\n\nexport default async function getPorts(options) {\n\tlet ports;\n\tlet exclude = new Set();\n\n\tif (options) {\n\t\tif (options.port) {\n\t\t\tports = typeof options.port === 'number' ? [options.port] : options.port;\n\t\t}\n\n\t\tif (options.exclude) {\n\t\t\tconst excludeIterable = options.exclude;\n\n\t\t\tif (typeof excludeIterable[Symbol.iterator] !== 'function') {\n\t\t\t\tthrow new TypeError('The `exclude` option must be an iterable.');\n\t\t\t}\n\n\t\t\tfor (const element of excludeIterable) {\n\t\t\t\tif (typeof element !== 'number') {\n\t\t\t\t\tthrow new TypeError('Each item in the `exclude` option must be a number corresponding to the port you want excluded.');\n\t\t\t\t}\n\n\t\t\t\tif (!Number.isSafeInteger(element)) {\n\t\t\t\t\tthrow new TypeError(`Number ${element} in the exclude option is not a safe integer and can't be used`);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\texclude = new Set(excludeIterable);\n\t\t}\n\t}\n\n\tif (timeout === undefined) {\n\t\ttimeout = setTimeout(() => {\n\t\t\ttimeout = undefined;\n\n\t\t\tlockedPorts.old = lockedPorts.young;\n\t\t\tlockedPorts.young = new Set();\n\t\t}, releaseOldLockedPortsIntervalMs);\n\n\t\t// Does not exist in some environments (Electron, Jest jsdom env, browser, etc).\n\t\tif (timeout.unref) {\n\t\t\ttimeout.unref();\n\t\t}\n\t}\n\n\tconst hosts = getLocalHosts();\n\n\tfor (const port of portCheckSequence(ports)) {\n\t\ttry {\n\t\t\tif (exclude.has(port)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tlet availablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\twhile (lockedPorts.old.has(availablePort) || lockedPorts.young.has(availablePort)) {\n\t\t\t\tif (port !== 0) {\n\t\t\t\t\tthrow new Locked(port);\n\t\t\t\t}\n\n\t\t\t\tavailablePort = await getAvailablePort({...options, port}, hosts); // eslint-disable-line no-await-in-loop\n\t\t\t}\n\n\t\t\tlockedPorts.young.add(availablePort);\n\n\t\t\treturn availablePort;\n\t\t} catch (error) {\n\t\t\tif (!['EADDRINUSE', 'EACCES'].includes(error.code) && !(error instanceof Locked)) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tthrow new Error('No available ports found');\n}\n\nexport function portNumbers(from, to) {\n\tif (!Number.isInteger(from) || !Number.isInteger(to)) {\n\t\tthrow new TypeError('`from` and `to` must be integer numbers');\n\t}\n\n\tif (from < minPort || from > maxPort) {\n\t\tthrow new RangeError(`'from' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (to < minPort || to > maxPort) {\n\t\tthrow new RangeError(`'to' must be between ${minPort} and ${maxPort}`);\n\t}\n\n\tif (from > to) {\n\t\tthrow new RangeError('`to` must be greater than or equal to `from`');\n\t}\n\n\tconst generator = function * (from, to) {\n\t\tfor (let port = from; port <= to; port++) {\n\t\t\tyield port;\n\t\t}\n\t};\n\n\treturn generator(from, to);\n}\n\nexport function clearLockedPorts() {\n\tlockedPorts.old.clear();\n\tlockedPorts.young.clear();\n}\n"],
  "mappings": "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",
  "names": ["from", "to"]
}
