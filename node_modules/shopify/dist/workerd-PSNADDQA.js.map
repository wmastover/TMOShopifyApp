{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/@shopify+cli-hydrogen@9.0.3_@graphql-codegen+cli@5.0.2_react-dom@17.0.2_react@17.0.2/node_modules/@shopify/cli-hydrogen/dist/lib/mini-oxygen/workerd.js"],
  "sourcesContent": ["import { createRequire } from 'node:module';\nimport { resolvePath, dirname } from '@shopify/cli-kit/node/path';\nimport { createFileReadStream, readFile } from '@shopify/cli-kit/node/fs';\nimport { renderSuccess } from '@shopify/cli-kit/node/ui';\nimport { outputNewline } from '@shopify/cli-kit/node/output';\nimport { AbortError } from '@shopify/cli-kit/node/error';\nimport colors from '@shopify/cli-kit/node/colors';\nimport { handleMiniOxygenImportFail, logRequestLine, SUBREQUEST_PROFILER_ENDPOINT } from './common.js';\nimport { TUNNEL_DOMAIN, getUtilityBannerlines, getDebugBannerLine } from '../dev-shared.js';\nimport { setConstructors, handleDebugNetworkRequest, H2O_BINDING_NAME, createLogRequestEvent } from '../request-events.js';\nimport { importLocal } from '../import-utils.js';\n\nasync function startWorkerdServer({\n  root,\n  appPort,\n  inspectorPort: publicInspectorPort,\n  assetsPort,\n  debug = false,\n  watch = false,\n  buildPathWorkerFile,\n  buildPathClient,\n  env\n}) {\n  const { createMiniOxygen, Response } = await importLocal(\n    \"@shopify/mini-oxygen\",\n    root\n  ).catch(handleMiniOxygenImportFail);\n  setConstructors({ Response });\n  async function handleCustomerAccountSchema() {\n    const require2 = createRequire(import.meta.url);\n    const filePath = require2.resolve(\n      \"@shopify/hydrogen/customer-account.schema.json\"\n    );\n    return new Response(createFileReadStream(filePath), {\n      headers: { \"Content-Type\": \"application/json\" }\n    });\n  }\n  const mainWorkerName = \"hydrogen\";\n  const absoluteBundlePath = resolvePath(root, buildPathWorkerFile);\n  const readWorkerFile = () => readFile(absoluteBundlePath).catch((error) => {\n    throw new AbortError(\n      `Could not read worker file.\n\n` + error.stack,\n      \"Did you build the project?\"\n    );\n  });\n  const miniOxygen = createMiniOxygen({\n    debug,\n    port: appPort,\n    host: \"localhost\",\n    liveReload: watch,\n    requestHook: logRequestLine,\n    inspectorPort: publicInspectorPort,\n    inspectWorkerName: mainWorkerName,\n    assets: { port: assetsPort, directory: buildPathClient },\n    workers: [\n      {\n        name: \"hydrogen:middleware\",\n        modules: true,\n        script: `export default { fetch: (request, env) => {\n          const url = new URL(request.url);\n          if (url.hostname.endsWith('${TUNNEL_DOMAIN.ORIGINAL}')) {\n            url.hostname = url.hostname.replace(\n              '${TUNNEL_DOMAIN.ORIGINAL}',\n              '${TUNNEL_DOMAIN.REBRANDED}',\n            );\n          }\n\n          return url.pathname === '${SUBREQUEST_PROFILER_ENDPOINT}'\n            ? env.profiler.fetch(url, request)\n            : url.pathname === '/graphiql/customer-account.schema.json'\n            ? env.assets.fetch(url, request)\n            : env.next.fetch(url, request)\n          }\n        }`,\n        serviceBindings: {\n          profiler: handleDebugNetworkRequest,\n          assets: handleCustomerAccountSchema,\n          next: mainWorkerName\n        }\n      },\n      {\n        name: mainWorkerName,\n        modulesRoot: dirname(absoluteBundlePath),\n        modules: [\n          {\n            type: \"ESModule\",\n            path: absoluteBundlePath,\n            contents: await readWorkerFile()\n          }\n        ],\n        bindings: { ...env },\n        serviceBindings: {\n          [H2O_BINDING_NAME]: createLogRequestEvent({\n            transformLocation: () => absoluteBundlePath\n          })\n        }\n      }\n    ]\n  });\n  const { workerUrl, inspectorUrl } = await miniOxygen.ready;\n  return {\n    port: Number(workerUrl.port),\n    listeningAt: workerUrl.origin,\n    reload(nextOptions) {\n      return miniOxygen.reload(async ({ workers }) => {\n        const mainWorker = workers.find(({ name }) => name === mainWorkerName);\n        if (Array.isArray(mainWorker.modules) && mainWorker.modules[0]) {\n          mainWorker.modules[0].contents = await readWorkerFile();\n        }\n        if (nextOptions) {\n          mainWorker.bindings = { ...nextOptions?.env ?? env };\n        }\n        return { workers };\n      });\n    },\n    showBanner(options) {\n      outputNewline();\n      const customSections = [];\n      if (options?.host) {\n        customSections.push({ body: getUtilityBannerlines(options.host) });\n      }\n      if (inspectorUrl) {\n        customSections.push({\n          body: { warn: getDebugBannerLine(Number(inspectorUrl.port)) }\n        });\n      }\n      renderSuccess({\n        headline: `${options?.headlinePrefix ?? \"\"}MiniOxygen (Worker Runtime) ${options?.mode ?? \"development\"} server running.`,\n        body: [\n          `View ${options?.appName ? colors.cyan(options?.appName) : \"Hydrogen\"} app:`,\n          { link: { url: options?.host || workerUrl.origin } }\n        ],\n        customSections\n      });\n      console.log(\"\");\n    },\n    async close() {\n      await miniOxygen.dispose();\n    }\n  };\n}\n\nexport { startWorkerdServer };\n"],
  "mappings": "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",
  "names": []
}
