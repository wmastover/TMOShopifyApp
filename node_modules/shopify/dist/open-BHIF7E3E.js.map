{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/define-lazy-prop@2.0.0/node_modules/define-lazy-prop/index.js", "../../../node_modules/.pnpm/open@8.4.2/node_modules/open/index.js"],
  "sourcesContent": ["'use strict';\nmodule.exports = (object, propertyName, fn) => {\n\tconst define = value => Object.defineProperty(object, propertyName, {value, enumerable: true, writable: true});\n\n\tObject.defineProperty(object, propertyName, {\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t\tget() {\n\t\t\tconst result = fn();\n\t\t\tdefine(result);\n\t\t\treturn result;\n\t\t},\n\t\tset(value) {\n\t\t\tdefine(value);\n\t\t}\n\t});\n\n\treturn object;\n};\n", "const path = require('path');\nconst childProcess = require('child_process');\nconst {promises: fs, constants: fsConstants} = require('fs');\nconst isWsl = require('is-wsl');\nconst isDocker = require('is-docker');\nconst defineLazyProperty = require('define-lazy-prop');\n\n// Path to included `xdg-open`.\nconst localXdgOpenPath = path.join(__dirname, 'xdg-open');\n\nconst {platform, arch} = process;\n\n// Podman detection\nconst hasContainerEnv = () => {\n\ttry {\n\t\tfs.statSync('/run/.containerenv');\n\t\treturn true;\n\t} catch {\n\t\treturn false;\n\t}\n};\n\nlet cachedResult;\nfunction isInsideContainer() {\n\tif (cachedResult === undefined) {\n\t\tcachedResult = hasContainerEnv() || isDocker();\n\t}\n\n\treturn cachedResult;\n}\n\n/**\nGet the mount point for fixed drives in WSL.\n\n@inner\n@returns {string} The mount point.\n*/\nconst getWslDrivesMountPoint = (() => {\n\t// Default value for \"root\" param\n\t// according to https://docs.microsoft.com/en-us/windows/wsl/wsl-config\n\tconst defaultMountPoint = '/mnt/';\n\n\tlet mountPoint;\n\n\treturn async function () {\n\t\tif (mountPoint) {\n\t\t\t// Return memoized mount point value\n\t\t\treturn mountPoint;\n\t\t}\n\n\t\tconst configFilePath = '/etc/wsl.conf';\n\n\t\tlet isConfigFileExists = false;\n\t\ttry {\n\t\t\tawait fs.access(configFilePath, fsConstants.F_OK);\n\t\t\tisConfigFileExists = true;\n\t\t} catch {}\n\n\t\tif (!isConfigFileExists) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tconst configContent = await fs.readFile(configFilePath, {encoding: 'utf8'});\n\t\tconst configMountPoint = /(?<!#.*)root\\s*=\\s*(?<mountPoint>.*)/g.exec(configContent);\n\n\t\tif (!configMountPoint) {\n\t\t\treturn defaultMountPoint;\n\t\t}\n\n\t\tmountPoint = configMountPoint.groups.mountPoint.trim();\n\t\tmountPoint = mountPoint.endsWith('/') ? mountPoint : `${mountPoint}/`;\n\n\t\treturn mountPoint;\n\t};\n})();\n\nconst pTryEach = async (array, mapper) => {\n\tlet latestError;\n\n\tfor (const item of array) {\n\t\ttry {\n\t\t\treturn await mapper(item); // eslint-disable-line no-await-in-loop\n\t\t} catch (error) {\n\t\t\tlatestError = error;\n\t\t}\n\t}\n\n\tthrow latestError;\n};\n\nconst baseOpen = async options => {\n\toptions = {\n\t\twait: false,\n\t\tbackground: false,\n\t\tnewInstance: false,\n\t\tallowNonzeroExitCode: false,\n\t\t...options\n\t};\n\n\tif (Array.isArray(options.app)) {\n\t\treturn pTryEach(options.app, singleApp => baseOpen({\n\t\t\t...options,\n\t\t\tapp: singleApp\n\t\t}));\n\t}\n\n\tlet {name: app, arguments: appArguments = []} = options.app || {};\n\tappArguments = [...appArguments];\n\n\tif (Array.isArray(app)) {\n\t\treturn pTryEach(app, appName => baseOpen({\n\t\t\t...options,\n\t\t\tapp: {\n\t\t\t\tname: appName,\n\t\t\t\targuments: appArguments\n\t\t\t}\n\t\t}));\n\t}\n\n\tlet command;\n\tconst cliArguments = [];\n\tconst childProcessOptions = {};\n\n\tif (platform === 'darwin') {\n\t\tcommand = 'open';\n\n\t\tif (options.wait) {\n\t\t\tcliArguments.push('--wait-apps');\n\t\t}\n\n\t\tif (options.background) {\n\t\t\tcliArguments.push('--background');\n\t\t}\n\n\t\tif (options.newInstance) {\n\t\t\tcliArguments.push('--new');\n\t\t}\n\n\t\tif (app) {\n\t\t\tcliArguments.push('-a', app);\n\t\t}\n\t} else if (platform === 'win32' || (isWsl && !isInsideContainer() && !app)) {\n\t\tconst mountPoint = await getWslDrivesMountPoint();\n\n\t\tcommand = isWsl ?\n\t\t\t`${mountPoint}c/Windows/System32/WindowsPowerShell/v1.0/powershell.exe` :\n\t\t\t`${process.env.SYSTEMROOT}\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell`;\n\n\t\tcliArguments.push(\n\t\t\t'-NoProfile',\n\t\t\t'-NonInteractive',\n\t\t\t'\u2013ExecutionPolicy',\n\t\t\t'Bypass',\n\t\t\t'-EncodedCommand'\n\t\t);\n\n\t\tif (!isWsl) {\n\t\t\tchildProcessOptions.windowsVerbatimArguments = true;\n\t\t}\n\n\t\tconst encodedArguments = ['Start'];\n\n\t\tif (options.wait) {\n\t\t\tencodedArguments.push('-Wait');\n\t\t}\n\n\t\tif (app) {\n\t\t\t// Double quote with double quotes to ensure the inner quotes are passed through.\n\t\t\t// Inner quotes are delimited for PowerShell interpretation with backticks.\n\t\t\tencodedArguments.push(`\"\\`\"${app}\\`\"\"`, '-ArgumentList');\n\t\t\tif (options.target) {\n\t\t\t\tappArguments.unshift(options.target);\n\t\t\t}\n\t\t} else if (options.target) {\n\t\t\tencodedArguments.push(`\"${options.target}\"`);\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tappArguments = appArguments.map(arg => `\"\\`\"${arg}\\`\"\"`);\n\t\t\tencodedArguments.push(appArguments.join(','));\n\t\t}\n\n\t\t// Using Base64-encoded command, accepted by PowerShell, to allow special characters.\n\t\toptions.target = Buffer.from(encodedArguments.join(' '), 'utf16le').toString('base64');\n\t} else {\n\t\tif (app) {\n\t\t\tcommand = app;\n\t\t} else {\n\t\t\t// When bundled by Webpack, there's no actual package file path and no local `xdg-open`.\n\t\t\tconst isBundled = !__dirname || __dirname === '/';\n\n\t\t\t// Check if local `xdg-open` exists and is executable.\n\t\t\tlet exeLocalXdgOpen = false;\n\t\t\ttry {\n\t\t\t\tawait fs.access(localXdgOpenPath, fsConstants.X_OK);\n\t\t\t\texeLocalXdgOpen = true;\n\t\t\t} catch {}\n\n\t\t\tconst useSystemXdgOpen = process.versions.electron ||\n\t\t\t\tplatform === 'android' || isBundled || !exeLocalXdgOpen;\n\t\t\tcommand = useSystemXdgOpen ? 'xdg-open' : localXdgOpenPath;\n\t\t}\n\n\t\tif (appArguments.length > 0) {\n\t\t\tcliArguments.push(...appArguments);\n\t\t}\n\n\t\tif (!options.wait) {\n\t\t\t// `xdg-open` will block the process unless stdio is ignored\n\t\t\t// and it's detached from the parent even if it's unref'd.\n\t\t\tchildProcessOptions.stdio = 'ignore';\n\t\t\tchildProcessOptions.detached = true;\n\t\t}\n\t}\n\n\tif (options.target) {\n\t\tcliArguments.push(options.target);\n\t}\n\n\tif (platform === 'darwin' && appArguments.length > 0) {\n\t\tcliArguments.push('--args', ...appArguments);\n\t}\n\n\tconst subprocess = childProcess.spawn(command, cliArguments, childProcessOptions);\n\n\tif (options.wait) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsubprocess.once('error', reject);\n\n\t\t\tsubprocess.once('close', exitCode => {\n\t\t\t\tif (!options.allowNonzeroExitCode && exitCode > 0) {\n\t\t\t\t\treject(new Error(`Exited with code ${exitCode}`));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tresolve(subprocess);\n\t\t\t});\n\t\t});\n\t}\n\n\tsubprocess.unref();\n\n\treturn subprocess;\n};\n\nconst open = (target, options) => {\n\tif (typeof target !== 'string') {\n\t\tthrow new TypeError('Expected a `target`');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\ttarget\n\t});\n};\n\nconst openApp = (name, options) => {\n\tif (typeof name !== 'string') {\n\t\tthrow new TypeError('Expected a `name`');\n\t}\n\n\tconst {arguments: appArguments = []} = options || {};\n\tif (appArguments !== undefined && appArguments !== null && !Array.isArray(appArguments)) {\n\t\tthrow new TypeError('Expected `appArguments` as Array type');\n\t}\n\n\treturn baseOpen({\n\t\t...options,\n\t\tapp: {\n\t\t\tname,\n\t\t\targuments: appArguments\n\t\t}\n\t});\n};\n\nfunction detectArchBinary(binary) {\n\tif (typeof binary === 'string' || Array.isArray(binary)) {\n\t\treturn binary;\n\t}\n\n\tconst {[arch]: archBinary} = binary;\n\n\tif (!archBinary) {\n\t\tthrow new Error(`${arch} is not supported`);\n\t}\n\n\treturn archBinary;\n}\n\nfunction detectPlatformBinary({[platform]: platformBinary}, {wsl}) {\n\tif (wsl && isWsl) {\n\t\treturn detectArchBinary(wsl);\n\t}\n\n\tif (!platformBinary) {\n\t\tthrow new Error(`${platform} is not supported`);\n\t}\n\n\treturn detectArchBinary(platformBinary);\n}\n\nconst apps = {};\n\ndefineLazyProperty(apps, 'chrome', () => detectPlatformBinary({\n\tdarwin: 'google chrome',\n\twin32: 'chrome',\n\tlinux: ['google-chrome', 'google-chrome-stable', 'chromium']\n}, {\n\twsl: {\n\t\tia32: '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe',\n\t\tx64: ['/mnt/c/Program Files/Google/Chrome/Application/chrome.exe', '/mnt/c/Program Files (x86)/Google/Chrome/Application/chrome.exe']\n\t}\n}));\n\ndefineLazyProperty(apps, 'firefox', () => detectPlatformBinary({\n\tdarwin: 'firefox',\n\twin32: 'C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe',\n\tlinux: 'firefox'\n}, {\n\twsl: '/mnt/c/Program Files/Mozilla Firefox/firefox.exe'\n}));\n\ndefineLazyProperty(apps, 'edge', () => detectPlatformBinary({\n\tdarwin: 'microsoft edge',\n\twin32: 'msedge',\n\tlinux: ['microsoft-edge', 'microsoft-edge-dev']\n}, {\n\twsl: '/mnt/c/Program Files (x86)/Microsoft/Edge/Application/msedge.exe'\n}));\n\nopen.apps = apps;\nopen.openApp = openApp;\n\nmodule.exports = open;\n"],
  "mappings": "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",
  "names": []
}
