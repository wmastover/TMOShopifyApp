{
  "version": 3,
  "sources": ["../src/cli/commands/debug/command-flags.ts"],
  "sourcesContent": ["import Command from '@shopify/cli-kit/node/base-command'\nimport {renderTable, renderText} from '@shopify/cli-kit/node/ui'\nimport {Flags} from '@oclif/core'\n\nexport default class CommandFlags extends Command {\n  static description = 'View all the available command flags'\n  static hidden = true\n\n  static flags = {\n    // Similar options as the `commands` command from `plugin-commands`\n    csv: Flags.boolean({\n      description: 'Output as CSV',\n      env: 'SHOPIFY_FLAG_OUTPUT_CSV',\n      default: false,\n    }),\n  }\n\n  async run(): Promise<void> {\n    const {flags} = await this.parse(CommandFlags)\n\n    const data: {pluginName: string; command: string; flagName: string; flagChar: string; flagEnv?: string}[] = []\n    for (const [_, plugin] of this.config.plugins) {\n      for (const command of plugin.commands) {\n        // We have to load the command, otherwise OCLIF will just use the manifest, and we need the actual class\n        // eslint-disable-next-line no-await-in-loop\n        const loaded = await command.load()\n\n        let pluginName\n        if (plugin.name.startsWith('@shopify')) {\n          pluginName = plugin.name.substring('@shopify/'.length)\n        } else {\n          pluginName = plugin.name.startsWith('@oclif') ? plugin.name.substring('@oclif/'.length) : plugin.name\n        }\n\n        const flags = loaded.flags\n        if (flags) {\n          for (const [flagName, flagConfig] of Object.entries(flags)) {\n            data.push({\n              pluginName,\n              command: command.id,\n              flagName: `--${flagName}`,\n              flagChar: flagConfig.char ? `-${flagConfig.char}` : '',\n              flagEnv: flagConfig.env,\n            })\n          }\n        }\n      }\n    }\n\n    if (flags.csv) {\n      const columns = ['pluginName', 'command', 'flagName', 'flagChar', 'flagEnv'] as const\n      const header = `${columns.join(',')}\\n`\n      const rows = data.map((obj) => columns.map((key) => obj[key]).join(',')).join('\\n')\n      const csvString = header + rows\n      renderText({text: csvString})\n    } else {\n      renderTable({\n        rows: data,\n        columns: {\n          pluginName: {\n            header: 'plugin',\n            color: 'red',\n          },\n          command: {},\n          flagName: {\n            header: 'long flag',\n            color: 'green',\n          },\n          flagChar: {\n            header: 'short flag',\n            color: 'green',\n          },\n          flagEnv: {\n            header: 'env variable',\n            color: 'blueBright',\n          },\n        },\n      })\n    }\n  }\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;AAAA;AAEA,kBAAoB,2BAEC,eAArB,MAAqB,sBAAqB,qBAAQ;AAAA,EAChD;AAAA,SAAO,cAAc;AAAA;AAAA,EACrB;AAAA,SAAO,SAAS;AAAA;AAAA,EAEhB;AAAA,SAAO,QAAQ;AAAA;AAAA,MAEb,KAAK,kBAAM,QAAQ;AAAA,QACjB,aAAa;AAAA,QACb,KAAK;AAAA,QACL,SAAS;AAAA,MACX,CAAC;AAAA,IACH;AAAA;AAAA,EAEA,MAAM,MAAqB;AACzB,QAAM,EAAC,MAAK,IAAI,MAAM,KAAK,MAAM,aAAY,GAEvC,OAAsG,CAAC;AAC7G,aAAW,CAAC,GAAG,MAAM,KAAK,KAAK,OAAO;AACpC,eAAW,WAAW,OAAO,UAAU;AAGrC,YAAM,SAAS,MAAM,QAAQ,KAAK,GAE9B;AACJ,QAAI,OAAO,KAAK,WAAW,UAAU,IACnC,aAAa,OAAO,KAAK,UAAU,CAAkB,IAErD,aAAa,OAAO,KAAK,WAAW,QAAQ,IAAI,OAAO,KAAK,UAAU,CAAgB,IAAI,OAAO;AAGnG,YAAMA,SAAQ,OAAO;AACrB,YAAIA;AACF,mBAAW,CAAC,UAAU,UAAU,KAAK,OAAO,QAAQA,MAAK;AACvD,iBAAK,KAAK;AAAA,cACR;AAAA,cACA,SAAS,QAAQ;AAAA,cACjB,UAAU,KAAK,QAAQ;AAAA,cACvB,UAAU,WAAW,OAAO,IAAI,WAAW,IAAI,KAAK;AAAA,cACpD,SAAS,WAAW;AAAA,YACtB,CAAC;AAAA,MAGP;AAGF,QAAI,MAAM,KAAK;AACb,UAAM,UAAU,CAAC,cAAc,WAAW,YAAY,YAAY,SAAS,GACrE,SAAS,GAAG,QAAQ,KAAK,GAAG,CAAC;AAAA,GAC7B,OAAO,KAAK,IAAI,CAAC,QAAQ,QAAQ,IAAI,CAAC,QAAQ,IAAI,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,EAAE,KAAK;AAAA,CAAI,GAC5E,YAAY,SAAS;AAC3B,iBAAW,EAAC,MAAM,UAAS,CAAC;AAAA,IAC9B;AACE,kBAAY;AAAA,QACV,MAAM;AAAA,QACN,SAAS;AAAA,UACP,YAAY;AAAA,YACV,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,UACA,SAAS,CAAC;AAAA,UACV,UAAU;AAAA,YACR,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,UACA,UAAU;AAAA,YACR,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,UACA,SAAS;AAAA,YACP,QAAQ;AAAA,YACR,OAAO;AAAA,UACT;AAAA,QACF;AAAA,MACF,CAAC;AAAA,EAEL;AACF;",
  "names": ["flags"]
}
