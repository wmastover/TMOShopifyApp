{
  "version": 3,
  "sources": ["../src/cli/commands/cache/clear.ts", "../../cli-kit/src/public/node/cli.ts", "../../cli-kit/src/public/node/cli-launcher.ts"],
  "sourcesContent": ["import Command from '@shopify/cli-kit/node/base-command'\nimport {clearCache} from '@shopify/cli-kit/node/cli'\n\nexport default class ClearCache extends Command {\n  static description = 'Clear the CLI cache, used to store some API responses and handle notifications status'\n  static hidden = true\n\n  async run(): Promise<void> {\n    clearCache()\n  }\n}\n", "import {isTruthy} from './context/utilities.js'\nimport {launchCLI as defaultLaunchCli} from './cli-launcher.js'\nimport {cacheClear} from '../../private/node/conf-store.js'\nimport {environmentVariables} from '../../private/node/constants.js'\nimport {Flags} from '@oclif/core'\n\n/**\n * IMPORTANT NOTE: Imports in this module are dynamic to ensure that \"setupEnvironmentVariables\" can dynamically\n * set the DEBUG environment variable before the 'debug' package sets up its configuration when modules\n * are loaded statically.\n */\ninterface RunCLIOptions {\n  /** The value of import.meta.url of the CLI executable module */\n  moduleURL: string\n  development: boolean\n}\n\nasync function warnIfOldNodeVersion(versions: NodeJS.ProcessVersions = process.versions) {\n  const nodeVersion = versions.node\n  const nodeMajorVersion = Number(nodeVersion.split('.')[0])\n\n  const currentSupportedNodeVersion = 18\n  if (nodeMajorVersion < currentSupportedNodeVersion) {\n    const {renderWarning} = await import('./ui.js')\n    renderWarning({\n      headline: 'Upgrade to a supported Node version now.',\n      body: [\n        `Node ${nodeMajorVersion} has reached end-of-life and poses security risks. When you upgrade to a`,\n        {\n          link: {\n            url: 'https://nodejs.dev/en/about/previous-releases',\n            label: 'supported version',\n          },\n        },\n        {char: ','},\n        \"you'll be able to use Shopify CLI without interruption.\",\n      ],\n    })\n  }\n}\n\nfunction setupEnvironmentVariables(\n  options: Pick<RunCLIOptions, 'development'>,\n  argv: string[] = process.argv,\n  env: NodeJS.ProcessEnv = process.env,\n) {\n  /**\n   * By setting DEBUG=* when --verbose is passed we are increasing the\n   * verbosity of oclif. Oclif uses debug (https://www.npmjs.com/package/debug)\n   * for logging, and it's configured through the DEBUG= environment variable.\n   */\n  if (argv.includes('--verbose')) {\n    env.DEBUG = env.DEBUG ?? '*'\n  }\n  if (options.development) {\n    env.SHOPIFY_CLI_ENV = env.SHOPIFY_CLI_ENV ?? 'development'\n  }\n}\n\nfunction forceNoColor(argv: string[] = process.argv, env: NodeJS.ProcessEnv = process.env) {\n  if (\n    argv.includes('--no-color') ||\n    isTruthy(env.NO_COLOR) ||\n    isTruthy(env.SHOPIFY_FLAG_NO_COLOR) ||\n    env.TERM === 'dumb'\n  ) {\n    env.FORCE_COLOR = '0'\n  }\n}\n\n/**\n * A function that abstracts away setting up the environment and running\n * a CLI\n * @param options - Options.\n */\nexport async function runCLI(\n  options: RunCLIOptions & {runInCreateMode?: boolean},\n  launchCLI: (options: {moduleURL: string}) => Promise<void> = defaultLaunchCli,\n  argv: string[] = process.argv,\n  env: NodeJS.ProcessEnv = process.env,\n  versions: NodeJS.ProcessVersions = process.versions,\n): Promise<void> {\n  setupEnvironmentVariables(options, argv, env)\n  if (options.runInCreateMode) {\n    await addInitToArgvWhenRunningCreateCLI(options, argv)\n  }\n  forceNoColor(argv, env)\n  await warnIfOldNodeVersion(versions)\n  return launchCLI({moduleURL: options.moduleURL})\n}\n\nasync function addInitToArgvWhenRunningCreateCLI(\n  options: Pick<RunCLIOptions, 'moduleURL'>,\n  argv: string[] = process.argv,\n): Promise<void> {\n  const {findUpAndReadPackageJson} = await import('./node-package-manager.js')\n  const {moduleDirectory} = await import('./path.js')\n\n  const packageJson = await findUpAndReadPackageJson(moduleDirectory(options.moduleURL))\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const packageName = (packageJson.content as any).name as string\n  const name = packageName.replace('@shopify/create-', '')\n  const initIndex = argv.findIndex((arg) => arg.includes('init'))\n  if (initIndex === -1) {\n    const initIndex = argv.findIndex((arg) => arg.match(new RegExp(`bin(\\\\/|\\\\\\\\)+(create-${name}|dev|run)`))) + 1\n    argv.splice(initIndex, 0, 'init')\n  }\n}\n\n/**\n * A function for create-x CLIs that automatically runs the \"init\" command.\n */\nexport async function runCreateCLI(\n  options: RunCLIOptions,\n  launchCLI: (options: {moduleURL: string}) => Promise<void> = defaultLaunchCli,\n  argv: string[] = process.argv,\n  env: NodeJS.ProcessEnv = process.env,\n  versions: NodeJS.ProcessVersions = process.versions,\n): Promise<void> {\n  return runCLI({...options, runInCreateMode: true}, launchCLI, argv, env, versions)\n}\n\n/**\n * An object that contains the flags that\n * are shared across all the commands.\n */\nexport const globalFlags = {\n  'no-color': Flags.boolean({\n    hidden: false,\n    description: 'Disable color output.',\n    env: 'SHOPIFY_FLAG_NO_COLOR',\n  }),\n  verbose: Flags.boolean({\n    hidden: false,\n    description: 'Increase the verbosity of the output.',\n    env: 'SHOPIFY_FLAG_VERBOSE',\n  }),\n}\n\nexport const jsonFlag = {\n  json: Flags.boolean({\n    char: 'j',\n    description: 'Output the result as JSON.',\n    hidden: false,\n    default: false,\n    env: environmentVariables.json,\n  }),\n}\n\n/**\n * Clear the CLI cache, used to store some API responses and handle notifications status\n */\nexport function clearCache(): void {\n  cacheClear()\n}\n", "import {fileURLToPath} from 'node:url'\n\ninterface Options {\n  moduleURL: string\n  argv?: string[]\n}\n\n/**\n * Launches the CLI through our custom OCLIF loader.\n *\n * @param options - Options.\n * @returns A promise that resolves when the CLI has been launched.\n */\nexport async function launchCLI(options: Options): Promise<void> {\n  const {errorHandler} = await import('./error-handler.js')\n  const {isDevelopment} = await import('./context/local.js')\n  const oclif = await import('@oclif/core')\n  const {ShopifyConfig} = await import('./custom-oclif-loader.js')\n\n  if (isDevelopment()) {\n    oclif.default.settings.debug = true\n  }\n\n  try {\n    // Use a custom OCLIF config to customize the behavior of the CLI\n    const config = new ShopifyConfig({root: fileURLToPath(options.moduleURL)})\n    await config.load()\n\n    await oclif.default.run(options.argv, config)\n    await oclif.default.flush()\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch (error) {\n    await errorHandler(error as Error)\n    return oclif.default.Errors.handle(error as Error)\n  }\n}\n"],
  "mappings": "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",
  "names": ["launchCLI", "initIndex"]
}
