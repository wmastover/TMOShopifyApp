{
  "version": 3,
  "sources": ["../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/base64.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/base64-vlq.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/util.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/array-set.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/mapping-list.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/source-map-generator.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/binary-search.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/read-wasm.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/wasm.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/source-map-consumer.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/lib/source-node.js", "../../../node_modules/.pnpm/source-map@0.7.4/node_modules/source-map/source-map.js"],
  "sourcesContent": ["/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst intToCharMap = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\".split(\"\");\n\n/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */\nexports.encode = function(number) {\n  if (0 <= number && number < intToCharMap.length) {\n    return intToCharMap[number];\n  }\n  throw new TypeError(\"Must be between 0 and 63: \" + number);\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */\n\nconst base64 = require(\"./base64\");\n\n// A single base 64 digit can contain 6 bits of data. For the base 64 variable\n// length quantities we use in the source map spec, the first bit is the sign,\n// the next four bits are the actual value, and the 6th bit is the\n// continuation bit. The continuation bit tells us whether there are more\n// digits in this value following this digit.\n//\n//   Continuation\n//   |    Sign\n//   |    |\n//   V    V\n//   101011\n\nconst VLQ_BASE_SHIFT = 5;\n\n// binary: 100000\nconst VLQ_BASE = 1 << VLQ_BASE_SHIFT;\n\n// binary: 011111\nconst VLQ_BASE_MASK = VLQ_BASE - 1;\n\n// binary: 100000\nconst VLQ_CONTINUATION_BIT = VLQ_BASE;\n\n/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */\nfunction toVLQSigned(aValue) {\n  return aValue < 0\n    ? ((-aValue) << 1) + 1\n    : (aValue << 1) + 0;\n}\n\n/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */\n// eslint-disable-next-line no-unused-vars\nfunction fromVLQSigned(aValue) {\n  const isNegative = (aValue & 1) === 1;\n  const shifted = aValue >> 1;\n  return isNegative\n    ? -shifted\n    : shifted;\n}\n\n/**\n * Returns the base 64 VLQ encoded value.\n */\nexports.encode = function base64VLQ_encode(aValue) {\n  let encoded = \"\";\n  let digit;\n\n  let vlq = toVLQSigned(aValue);\n\n  do {\n    digit = vlq & VLQ_BASE_MASK;\n    vlq >>>= VLQ_BASE_SHIFT;\n    if (vlq > 0) {\n      // There are still more digits in this value, so we must make sure the\n      // continuation bit is marked.\n      digit |= VLQ_CONTINUATION_BIT;\n    }\n    encoded += base64.encode(digit);\n  } while (vlq > 0);\n\n  return encoded;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * This is a helper function for getting values from parameter/options\n * objects.\n *\n * @param args The object we are extracting values from\n * @param name The name of the property we are getting.\n * @param defaultValue An optional value to return if the property is missing\n * from the object. If this is not specified and the property is missing, an\n * error will be thrown.\n */\nfunction getArg(aArgs, aName, aDefaultValue) {\n  if (aName in aArgs) {\n    return aArgs[aName];\n  } else if (arguments.length === 3) {\n    return aDefaultValue;\n  }\n    throw new Error('\"' + aName + '\" is a required argument.');\n\n}\nexports.getArg = getArg;\n\nconst urlRegexp = /^(?:([\\w+\\-.]+):)?\\/\\/(?:(\\w+:\\w+)@)?([\\w.-]*)(?::(\\d+))?(.*)$/;\nconst dataUrlRegexp = /^data:.+\\,.+$/;\n\nfunction urlParse(aUrl) {\n  const match = aUrl.match(urlRegexp);\n  if (!match) {\n    return null;\n  }\n  return {\n    scheme: match[1],\n    auth: match[2],\n    host: match[3],\n    port: match[4],\n    path: match[5]\n  };\n}\nexports.urlParse = urlParse;\n\nfunction urlGenerate(aParsedUrl) {\n  let url = \"\";\n  if (aParsedUrl.scheme) {\n    url += aParsedUrl.scheme + \":\";\n  }\n  url += \"//\";\n  if (aParsedUrl.auth) {\n    url += aParsedUrl.auth + \"@\";\n  }\n  if (aParsedUrl.host) {\n    url += aParsedUrl.host;\n  }\n  if (aParsedUrl.port) {\n    url += \":\" + aParsedUrl.port;\n  }\n  if (aParsedUrl.path) {\n    url += aParsedUrl.path;\n  }\n  return url;\n}\nexports.urlGenerate = urlGenerate;\n\nconst MAX_CACHED_INPUTS = 32;\n\n/**\n * Takes some function `f(input) -> result` and returns a memoized version of\n * `f`.\n *\n * We keep at most `MAX_CACHED_INPUTS` memoized results of `f` alive. The\n * memoization is a dumb-simple, linear least-recently-used cache.\n */\nfunction lruMemoize(f) {\n  const cache = [];\n\n  return function(input) {\n    for (let i = 0; i < cache.length; i++) {\n      if (cache[i].input === input) {\n        const temp = cache[0];\n        cache[0] = cache[i];\n        cache[i] = temp;\n        return cache[0].result;\n      }\n    }\n\n    const result = f(input);\n\n    cache.unshift({\n      input,\n      result,\n    });\n\n    if (cache.length > MAX_CACHED_INPUTS) {\n      cache.pop();\n    }\n\n    return result;\n  };\n}\n\n/**\n * Normalizes a path, or the path portion of a URL:\n *\n * - Replaces consecutive slashes with one slash.\n * - Removes unnecessary '.' parts.\n * - Removes unnecessary '<dir>/..' parts.\n *\n * Based on code in the Node.js 'path' core module.\n *\n * @param aPath The path or url to normalize.\n */\nconst normalize = lruMemoize(function normalize(aPath) {\n  let path = aPath;\n  const url = urlParse(aPath);\n  if (url) {\n    if (!url.path) {\n      return aPath;\n    }\n    path = url.path;\n  }\n  const isAbsolute = exports.isAbsolute(path);\n\n  // Split the path into parts between `/` characters. This is much faster than\n  // using `.split(/\\/+/g)`.\n  const parts = [];\n  let start = 0;\n  let i = 0;\n  while (true) {\n    start = i;\n    i = path.indexOf(\"/\", start);\n    if (i === -1) {\n      parts.push(path.slice(start));\n      break;\n    } else {\n      parts.push(path.slice(start, i));\n      while (i < path.length && path[i] === \"/\") {\n        i++;\n      }\n    }\n  }\n\n  let up = 0;\n  for (i = parts.length - 1; i >= 0; i--) {\n    const part = parts[i];\n    if (part === \".\") {\n      parts.splice(i, 1);\n    } else if (part === \"..\") {\n      up++;\n    } else if (up > 0) {\n      if (part === \"\") {\n        // The first part is blank if the path is absolute. Trying to go\n        // above the root is a no-op. Therefore we can remove all '..' parts\n        // directly after the root.\n        parts.splice(i + 1, up);\n        up = 0;\n      } else {\n        parts.splice(i, 2);\n        up--;\n      }\n    }\n  }\n  path = parts.join(\"/\");\n\n  if (path === \"\") {\n    path = isAbsolute ? \"/\" : \".\";\n  }\n\n  if (url) {\n    url.path = path;\n    return urlGenerate(url);\n  }\n  return path;\n});\nexports.normalize = normalize;\n\n/**\n * Joins two paths/URLs.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be joined with the root.\n *\n * - If aPath is a URL or a data URI, aPath is returned, unless aPath is a\n *   scheme-relative URL: Then the scheme of aRoot, if any, is prepended\n *   first.\n * - Otherwise aPath is a path. If aRoot is a URL, then its path portion\n *   is updated with the result and aRoot is returned. Otherwise the result\n *   is returned.\n *   - If aPath is absolute, the result is aPath.\n *   - Otherwise the two paths are joined with a slash.\n * - Joining for example 'http://' and 'www.example.com' is also supported.\n */\nfunction join(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n  if (aPath === \"\") {\n    aPath = \".\";\n  }\n  const aPathUrl = urlParse(aPath);\n  const aRootUrl = urlParse(aRoot);\n  if (aRootUrl) {\n    aRoot = aRootUrl.path || \"/\";\n  }\n\n  // `join(foo, '//www.example.org')`\n  if (aPathUrl && !aPathUrl.scheme) {\n    if (aRootUrl) {\n      aPathUrl.scheme = aRootUrl.scheme;\n    }\n    return urlGenerate(aPathUrl);\n  }\n\n  if (aPathUrl || aPath.match(dataUrlRegexp)) {\n    return aPath;\n  }\n\n  // `join('http://', 'www.example.com')`\n  if (aRootUrl && !aRootUrl.host && !aRootUrl.path) {\n    aRootUrl.host = aPath;\n    return urlGenerate(aRootUrl);\n  }\n\n  const joined = aPath.charAt(0) === \"/\"\n    ? aPath\n    : normalize(aRoot.replace(/\\/+$/, \"\") + \"/\" + aPath);\n\n  if (aRootUrl) {\n    aRootUrl.path = joined;\n    return urlGenerate(aRootUrl);\n  }\n  return joined;\n}\nexports.join = join;\n\nexports.isAbsolute = function(aPath) {\n  return aPath.charAt(0) === \"/\" || urlRegexp.test(aPath);\n};\n\n/**\n * Make a path relative to a URL or another path.\n *\n * @param aRoot The root path or URL.\n * @param aPath The path or URL to be made relative to aRoot.\n */\nfunction relative(aRoot, aPath) {\n  if (aRoot === \"\") {\n    aRoot = \".\";\n  }\n\n  aRoot = aRoot.replace(/\\/$/, \"\");\n\n  // It is possible for the path to be above the root. In this case, simply\n  // checking whether the root is a prefix of the path won't work. Instead, we\n  // need to remove components from the root one by one, until either we find\n  // a prefix that fits, or we run out of components to remove.\n  let level = 0;\n  while (aPath.indexOf(aRoot + \"/\") !== 0) {\n    const index = aRoot.lastIndexOf(\"/\");\n    if (index < 0) {\n      return aPath;\n    }\n\n    // If the only part of the root that is left is the scheme (i.e. http://,\n    // file:///, etc.), one or more slashes (/), or simply nothing at all, we\n    // have exhausted all components, so the path is not relative to the root.\n    aRoot = aRoot.slice(0, index);\n    if (aRoot.match(/^([^\\/]+:\\/)?\\/*$/)) {\n      return aPath;\n    }\n\n    ++level;\n  }\n\n  // Make sure we add a \"../\" for each component we removed from the root.\n  return Array(level + 1).join(\"../\") + aPath.substr(aRoot.length + 1);\n}\nexports.relative = relative;\n\nconst supportsNullProto = (function() {\n  const obj = Object.create(null);\n  return !(\"__proto__\" in obj);\n}());\n\nfunction identity(s) {\n  return s;\n}\n\n/**\n * Because behavior goes wacky when you set `__proto__` on objects, we\n * have to prefix all the strings in our set with an arbitrary character.\n *\n * See https://github.com/mozilla/source-map/pull/31 and\n * https://github.com/mozilla/source-map/issues/30\n *\n * @param String aStr\n */\nfunction toSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return \"$\" + aStr;\n  }\n\n  return aStr;\n}\nexports.toSetString = supportsNullProto ? identity : toSetString;\n\nfunction fromSetString(aStr) {\n  if (isProtoString(aStr)) {\n    return aStr.slice(1);\n  }\n\n  return aStr;\n}\nexports.fromSetString = supportsNullProto ? identity : fromSetString;\n\nfunction isProtoString(s) {\n  if (!s) {\n    return false;\n  }\n\n  const length = s.length;\n\n  if (length < 9 /* \"__proto__\".length */) {\n    return false;\n  }\n\n  /* eslint-disable no-multi-spaces */\n  if (s.charCodeAt(length - 1) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 2) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 3) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 4) !== 116 /* 't' */ ||\n      s.charCodeAt(length - 5) !== 111 /* 'o' */ ||\n      s.charCodeAt(length - 6) !== 114 /* 'r' */ ||\n      s.charCodeAt(length - 7) !== 112 /* 'p' */ ||\n      s.charCodeAt(length - 8) !== 95  /* '_' */ ||\n      s.charCodeAt(length - 9) !== 95  /* '_' */) {\n    return false;\n  }\n  /* eslint-enable no-multi-spaces */\n\n  for (let i = length - 10; i >= 0; i--) {\n    if (s.charCodeAt(i) !== 36 /* '$' */) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n/**\n * Comparator between two mappings where the original positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same original source/line/column, but different generated\n * line and column the same. Useful when searching for a mapping with a\n * stubbed out mapping.\n */\nfunction compareByOriginalPositions(mappingA, mappingB, onlyCompareOriginal) {\n  let cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0 || onlyCompareOriginal) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByOriginalPositions = compareByOriginalPositions;\n\n/**\n * Comparator between two mappings with deflated source and name indices where\n * the generated positions are compared.\n *\n * Optionally pass in `true` as `onlyCompareGenerated` to consider two\n * mappings with the same generated line and column, but different\n * source/name/original line and column the same. Useful when searching for a\n * mapping with a stubbed out mapping.\n */\nfunction compareByGeneratedPositionsDeflated(mappingA, mappingB, onlyCompareGenerated) {\n  let cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0 || onlyCompareGenerated) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsDeflated = compareByGeneratedPositionsDeflated;\n\nfunction strcmp(aStr1, aStr2) {\n  if (aStr1 === aStr2) {\n    return 0;\n  }\n\n  if (aStr1 === null) {\n    return 1; // aStr2 !== null\n  }\n\n  if (aStr2 === null) {\n    return -1; // aStr1 !== null\n  }\n\n  if (aStr1 > aStr2) {\n    return 1;\n  }\n\n  return -1;\n}\n\n/**\n * Comparator between two mappings with inflated source and name strings where\n * the generated positions are compared.\n */\nfunction compareByGeneratedPositionsInflated(mappingA, mappingB) {\n  let cmp = mappingA.generatedLine - mappingB.generatedLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.generatedColumn - mappingB.generatedColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = strcmp(mappingA.source, mappingB.source);\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalLine - mappingB.originalLine;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  cmp = mappingA.originalColumn - mappingB.originalColumn;\n  if (cmp !== 0) {\n    return cmp;\n  }\n\n  return strcmp(mappingA.name, mappingB.name);\n}\nexports.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;\n\n/**\n * Strip any JSON XSSI avoidance prefix from the string (as documented\n * in the source maps specification), and then parse the string as\n * JSON.\n */\nfunction parseSourceMapInput(str) {\n  return JSON.parse(str.replace(/^\\)]}'[^\\n]*\\n/, \"\"));\n}\nexports.parseSourceMapInput = parseSourceMapInput;\n\n/**\n * Compute the URL of a source given the the source root, the source's\n * URL, and the source map's URL.\n */\nfunction computeSourceURL(sourceRoot, sourceURL, sourceMapURL) {\n  sourceURL = sourceURL || \"\";\n\n  if (sourceRoot) {\n    // This follows what Chrome does.\n    if (sourceRoot[sourceRoot.length - 1] !== \"/\" && sourceURL[0] !== \"/\") {\n      sourceRoot += \"/\";\n    }\n    // The spec says:\n    //   Line 4: An optional source root, useful for relocating source\n    //   files on a server or removing repeated values in the\n    //   \u201Csources\u201D entry.  This value is prepended to the individual\n    //   entries in the \u201Csource\u201D field.\n    sourceURL = sourceRoot + sourceURL;\n  }\n\n  // Historically, SourceMapConsumer did not take the sourceMapURL as\n  // a parameter.  This mode is still somewhat supported, which is why\n  // this code block is conditional.  However, it's preferable to pass\n  // the source map URL to SourceMapConsumer, so that this function\n  // can implement the source URL resolution algorithm as outlined in\n  // the spec.  This block is basically the equivalent of:\n  //    new URL(sourceURL, sourceMapURL).toString()\n  // ... except it avoids using URL, which wasn't available in the\n  // older releases of node still supported by this library.\n  //\n  // The spec says:\n  //   If the sources are not absolute URLs after prepending of the\n  //   \u201CsourceRoot\u201D, the sources are resolved relative to the\n  //   SourceMap (like resolving script src in a html document).\n  if (sourceMapURL) {\n    const parsed = urlParse(sourceMapURL);\n    if (!parsed) {\n      throw new Error(\"sourceMapURL could not be parsed\");\n    }\n    if (parsed.path) {\n      // Strip the last path component, but keep the \"/\".\n      const index = parsed.path.lastIndexOf(\"/\");\n      if (index >= 0) {\n        parsed.path = parsed.path.substring(0, index + 1);\n      }\n    }\n    sourceURL = join(urlGenerate(parsed), sourceURL);\n  }\n\n  return normalize(sourceURL);\n}\nexports.computeSourceURL = computeSourceURL;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\n/**\n * A data structure which is a combination of an array and a set. Adding a new\n * member is O(1), testing for membership is O(1), and finding the index of an\n * element is O(1). Removing elements from the set is not supported. Only\n * strings are supported for membership.\n */\nclass ArraySet {\n  constructor() {\n    this._array = [];\n    this._set = new Map();\n  }\n\n  /**\n   * Static method for creating ArraySet instances from an existing array.\n   */\n  static fromArray(aArray, aAllowDuplicates) {\n    const set = new ArraySet();\n    for (let i = 0, len = aArray.length; i < len; i++) {\n      set.add(aArray[i], aAllowDuplicates);\n    }\n    return set;\n  }\n\n  /**\n   * Return how many unique items are in this ArraySet. If duplicates have been\n   * added, than those do not count towards the size.\n   *\n   * @returns Number\n   */\n  size() {\n    return this._set.size;\n  }\n\n  /**\n   * Add the given string to this set.\n   *\n   * @param String aStr\n   */\n  add(aStr, aAllowDuplicates) {\n    const isDuplicate = this.has(aStr);\n    const idx = this._array.length;\n    if (!isDuplicate || aAllowDuplicates) {\n      this._array.push(aStr);\n    }\n    if (!isDuplicate) {\n      this._set.set(aStr, idx);\n    }\n  }\n\n  /**\n   * Is the given string a member of this set?\n   *\n   * @param String aStr\n   */\n  has(aStr) {\n      return this._set.has(aStr);\n  }\n\n  /**\n   * What is the index of the given string in the array?\n   *\n   * @param String aStr\n   */\n  indexOf(aStr) {\n    const idx = this._set.get(aStr);\n    if (idx >= 0) {\n        return idx;\n    }\n    throw new Error('\"' + aStr + '\" is not in the set.');\n  }\n\n  /**\n   * What is the element at the given index?\n   *\n   * @param Number aIdx\n   */\n  at(aIdx) {\n    if (aIdx >= 0 && aIdx < this._array.length) {\n      return this._array[aIdx];\n    }\n    throw new Error(\"No element indexed by \" + aIdx);\n  }\n\n  /**\n   * Returns the array representation of this set (which has the proper indices\n   * indicated by indexOf). Note that this is a copy of the internal array used\n   * for storing the members so that no one can mess with internal state.\n   */\n  toArray() {\n    return this._array.slice();\n  }\n}\nexports.ArraySet = ArraySet;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2014 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\n\n/**\n * Determine whether mappingB is after mappingA with respect to generated\n * position.\n */\nfunction generatedPositionAfter(mappingA, mappingB) {\n  // Optimized for most common case\n  const lineA = mappingA.generatedLine;\n  const lineB = mappingB.generatedLine;\n  const columnA = mappingA.generatedColumn;\n  const columnB = mappingB.generatedColumn;\n  return lineB > lineA || lineB == lineA && columnB >= columnA ||\n         util.compareByGeneratedPositionsInflated(mappingA, mappingB) <= 0;\n}\n\n/**\n * A data structure to provide a sorted view of accumulated mappings in a\n * performance conscious manner. It trades a negligible overhead in general\n * case for a large speedup in case of mappings being added in order.\n */\nclass MappingList {\n  constructor() {\n    this._array = [];\n    this._sorted = true;\n    // Serves as infimum\n    this._last = {generatedLine: -1, generatedColumn: 0};\n  }\n\n  /**\n   * Iterate through internal items. This method takes the same arguments that\n   * `Array.prototype.forEach` takes.\n   *\n   * NOTE: The order of the mappings is NOT guaranteed.\n   */\n  unsortedForEach(aCallback, aThisArg) {\n    this._array.forEach(aCallback, aThisArg);\n  }\n\n  /**\n   * Add the given source mapping.\n   *\n   * @param Object aMapping\n   */\n  add(aMapping) {\n    if (generatedPositionAfter(this._last, aMapping)) {\n      this._last = aMapping;\n      this._array.push(aMapping);\n    } else {\n      this._sorted = false;\n      this._array.push(aMapping);\n    }\n  }\n\n  /**\n   * Returns the flat, sorted array of mappings. The mappings are sorted by\n   * generated position.\n   *\n   * WARNING: This method returns internal data without copying, for\n   * performance. The return value must NOT be mutated, and should be treated as\n   * an immutable borrow. If you want to take ownership, you must make your own\n   * copy.\n   */\n  toArray() {\n    if (!this._sorted) {\n      this._array.sort(util.compareByGeneratedPositionsInflated);\n      this._sorted = true;\n    }\n    return this._array;\n  }\n}\n\nexports.MappingList = MappingList;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst base64VLQ = require(\"./base64-vlq\");\nconst util = require(\"./util\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst MappingList = require(\"./mapping-list\").MappingList;\n\n/**\n * An instance of the SourceMapGenerator represents a source map which is\n * being built incrementally. You may pass an object with the following\n * properties:\n *\n *   - file: The filename of the generated source.\n *   - sourceRoot: A root for all relative URLs in this source map.\n */\nclass SourceMapGenerator {\n  constructor(aArgs) {\n    if (!aArgs) {\n      aArgs = {};\n    }\n    this._file = util.getArg(aArgs, \"file\", null);\n    this._sourceRoot = util.getArg(aArgs, \"sourceRoot\", null);\n    this._skipValidation = util.getArg(aArgs, \"skipValidation\", false);\n    this._sources = new ArraySet();\n    this._names = new ArraySet();\n    this._mappings = new MappingList();\n    this._sourcesContents = null;\n  }\n\n  /**\n   * Creates a new SourceMapGenerator based on a SourceMapConsumer\n   *\n   * @param aSourceMapConsumer The SourceMap.\n   */\n  static fromSourceMap(aSourceMapConsumer) {\n    const sourceRoot = aSourceMapConsumer.sourceRoot;\n    const generator = new SourceMapGenerator({\n      file: aSourceMapConsumer.file,\n      sourceRoot\n    });\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      const newMapping = {\n        generated: {\n          line: mapping.generatedLine,\n          column: mapping.generatedColumn\n        }\n      };\n\n      if (mapping.source != null) {\n        newMapping.source = mapping.source;\n        if (sourceRoot != null) {\n          newMapping.source = util.relative(sourceRoot, newMapping.source);\n        }\n\n        newMapping.original = {\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        };\n\n        if (mapping.name != null) {\n          newMapping.name = mapping.name;\n        }\n      }\n\n      generator.addMapping(newMapping);\n    });\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      let sourceRelative = sourceFile;\n      if (sourceRoot !== null) {\n        sourceRelative = util.relative(sourceRoot, sourceFile);\n      }\n\n      if (!generator._sources.has(sourceRelative)) {\n        generator._sources.add(sourceRelative);\n      }\n\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        generator.setSourceContent(sourceFile, content);\n      }\n    });\n    return generator;\n  }\n\n  /**\n   * Add a single mapping from original source line and column to the generated\n   * source's line and column for this source map being created. The mapping\n   * object should have the following properties:\n   *\n   *   - generated: An object with the generated line and column positions.\n   *   - original: An object with the original line and column positions.\n   *   - source: The original source file (relative to the sourceRoot).\n   *   - name: An optional original token name for this mapping.\n   */\n  addMapping(aArgs) {\n    const generated = util.getArg(aArgs, \"generated\");\n    const original = util.getArg(aArgs, \"original\", null);\n    let source = util.getArg(aArgs, \"source\", null);\n    let name = util.getArg(aArgs, \"name\", null);\n\n    if (!this._skipValidation) {\n      this._validateMapping(generated, original, source, name);\n    }\n\n    if (source != null) {\n      source = String(source);\n      if (!this._sources.has(source)) {\n        this._sources.add(source);\n      }\n    }\n\n    if (name != null) {\n      name = String(name);\n      if (!this._names.has(name)) {\n        this._names.add(name);\n      }\n    }\n\n    this._mappings.add({\n      generatedLine: generated.line,\n      generatedColumn: generated.column,\n      originalLine: original != null && original.line,\n      originalColumn: original != null && original.column,\n      source,\n      name\n    });\n  }\n\n  /**\n   * Set the source content for a source file.\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    let source = aSourceFile;\n    if (this._sourceRoot != null) {\n      source = util.relative(this._sourceRoot, source);\n    }\n\n    if (aSourceContent != null) {\n      // Add the source content to the _sourcesContents map.\n      // Create a new _sourcesContents map if the property is null.\n      if (!this._sourcesContents) {\n        this._sourcesContents = Object.create(null);\n      }\n      this._sourcesContents[util.toSetString(source)] = aSourceContent;\n    } else if (this._sourcesContents) {\n      // Remove the source file from the _sourcesContents map.\n      // If the _sourcesContents map is empty, set the property to null.\n      delete this._sourcesContents[util.toSetString(source)];\n      if (Object.keys(this._sourcesContents).length === 0) {\n        this._sourcesContents = null;\n      }\n    }\n  }\n\n  /**\n   * Applies the mappings of a sub-source-map for a specific source file to the\n   * source map being generated. Each mapping to the supplied source file is\n   * rewritten using the supplied source map. Note: The resolution for the\n   * resulting mappings is the minimium of this map and the supplied map.\n   *\n   * @param aSourceMapConsumer The source map to be applied.\n   * @param aSourceFile Optional. The filename of the source file.\n   *        If omitted, SourceMapConsumer's file property will be used.\n   * @param aSourceMapPath Optional. The dirname of the path to the source map\n   *        to be applied. If relative, it is relative to the SourceMapConsumer.\n   *        This parameter is needed when the two source maps aren't in the same\n   *        directory, and the source map to be applied contains relative source\n   *        paths. If so, those relative source paths need to be rewritten\n   *        relative to the SourceMapGenerator.\n   */\n  applySourceMap(aSourceMapConsumer, aSourceFile, aSourceMapPath) {\n    let sourceFile = aSourceFile;\n    // If aSourceFile is omitted, we will use the file property of the SourceMap\n    if (aSourceFile == null) {\n      if (aSourceMapConsumer.file == null) {\n        throw new Error(\n          \"SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, \" +\n          'or the source map\\'s \"file\" property. Both were omitted.'\n        );\n      }\n      sourceFile = aSourceMapConsumer.file;\n    }\n    const sourceRoot = this._sourceRoot;\n    // Make \"sourceFile\" relative if an absolute Url is passed.\n    if (sourceRoot != null) {\n      sourceFile = util.relative(sourceRoot, sourceFile);\n    }\n    // Applying the SourceMap can add and remove items from the sources and\n    // the names array.\n    const newSources = this._mappings.toArray().length > 0\n      ? new ArraySet()\n      : this._sources;\n    const newNames = new ArraySet();\n\n    // Find mappings for the \"sourceFile\"\n    this._mappings.unsortedForEach(function(mapping) {\n      if (mapping.source === sourceFile && mapping.originalLine != null) {\n        // Check if it can be mapped by the source map, then update the mapping.\n        const original = aSourceMapConsumer.originalPositionFor({\n          line: mapping.originalLine,\n          column: mapping.originalColumn\n        });\n        if (original.source != null) {\n          // Copy mapping\n          mapping.source = original.source;\n          if (aSourceMapPath != null) {\n            mapping.source = util.join(aSourceMapPath, mapping.source);\n          }\n          if (sourceRoot != null) {\n            mapping.source = util.relative(sourceRoot, mapping.source);\n          }\n          mapping.originalLine = original.line;\n          mapping.originalColumn = original.column;\n          if (original.name != null) {\n            mapping.name = original.name;\n          }\n        }\n      }\n\n      const source = mapping.source;\n      if (source != null && !newSources.has(source)) {\n        newSources.add(source);\n      }\n\n      const name = mapping.name;\n      if (name != null && !newNames.has(name)) {\n        newNames.add(name);\n      }\n\n    }, this);\n    this._sources = newSources;\n    this._names = newNames;\n\n    // Copy sourcesContents of applied map.\n    aSourceMapConsumer.sources.forEach(function(srcFile) {\n      const content = aSourceMapConsumer.sourceContentFor(srcFile);\n      if (content != null) {\n        if (aSourceMapPath != null) {\n          srcFile = util.join(aSourceMapPath, srcFile);\n        }\n        if (sourceRoot != null) {\n          srcFile = util.relative(sourceRoot, srcFile);\n        }\n        this.setSourceContent(srcFile, content);\n      }\n    }, this);\n  }\n\n  /**\n   * A mapping can have one of the three levels of data:\n   *\n   *   1. Just the generated position.\n   *   2. The Generated position, original position, and original source.\n   *   3. Generated and original position, original source, as well as a name\n   *      token.\n   *\n   * To maintain consistency, we validate that any new mapping being added falls\n   * in to one of these categories.\n   */\n  _validateMapping(aGenerated, aOriginal, aSource, aName) {\n    // When aOriginal is truthy but has empty values for .line and .column,\n    // it is most likely a programmer error. In this case we throw a very\n    // specific error message to try to guide them the right way.\n    // For example: https://github.com/Polymer/polymer-bundler/pull/519\n    if (aOriginal && typeof aOriginal.line !== \"number\" && typeof aOriginal.column !== \"number\") {\n        throw new Error(\n            \"original.line and original.column are not numbers -- you probably meant to omit \" +\n            \"the original mapping entirely and only map the generated position. If so, pass \" +\n            \"null for the original mapping instead of an object with empty or null values.\"\n        );\n    }\n\n    if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n        && aGenerated.line > 0 && aGenerated.column >= 0\n        && !aOriginal && !aSource && !aName) {\n      // Case 1.\n\n    } else if (aGenerated && \"line\" in aGenerated && \"column\" in aGenerated\n             && aOriginal && \"line\" in aOriginal && \"column\" in aOriginal\n             && aGenerated.line > 0 && aGenerated.column >= 0\n             && aOriginal.line > 0 && aOriginal.column >= 0\n             && aSource) {\n      // Cases 2 and 3.\n\n    } else {\n      throw new Error(\"Invalid mapping: \" + JSON.stringify({\n        generated: aGenerated,\n        source: aSource,\n        original: aOriginal,\n        name: aName\n      }));\n    }\n  }\n\n  /**\n   * Serialize the accumulated mappings in to the stream of base 64 VLQs\n   * specified by the source map format.\n   */\n  _serializeMappings() {\n    let previousGeneratedColumn = 0;\n    let previousGeneratedLine = 1;\n    let previousOriginalColumn = 0;\n    let previousOriginalLine = 0;\n    let previousName = 0;\n    let previousSource = 0;\n    let result = \"\";\n    let next;\n    let mapping;\n    let nameIdx;\n    let sourceIdx;\n\n    const mappings = this._mappings.toArray();\n    for (let i = 0, len = mappings.length; i < len; i++) {\n      mapping = mappings[i];\n      next = \"\";\n\n      if (mapping.generatedLine !== previousGeneratedLine) {\n        previousGeneratedColumn = 0;\n        while (mapping.generatedLine !== previousGeneratedLine) {\n          next += \";\";\n          previousGeneratedLine++;\n        }\n      } else if (i > 0) {\n        if (!util.compareByGeneratedPositionsInflated(mapping, mappings[i - 1])) {\n          continue;\n        }\n        next += \",\";\n      }\n\n      next += base64VLQ.encode(mapping.generatedColumn\n                                 - previousGeneratedColumn);\n      previousGeneratedColumn = mapping.generatedColumn;\n\n      if (mapping.source != null) {\n        sourceIdx = this._sources.indexOf(mapping.source);\n        next += base64VLQ.encode(sourceIdx - previousSource);\n        previousSource = sourceIdx;\n\n        // lines are stored 0-based in SourceMap spec version 3\n        next += base64VLQ.encode(mapping.originalLine - 1\n                                   - previousOriginalLine);\n        previousOriginalLine = mapping.originalLine - 1;\n\n        next += base64VLQ.encode(mapping.originalColumn\n                                   - previousOriginalColumn);\n        previousOriginalColumn = mapping.originalColumn;\n\n        if (mapping.name != null) {\n          nameIdx = this._names.indexOf(mapping.name);\n          next += base64VLQ.encode(nameIdx - previousName);\n          previousName = nameIdx;\n        }\n      }\n\n      result += next;\n    }\n\n    return result;\n  }\n\n  _generateSourcesContent(aSources, aSourceRoot) {\n    return aSources.map(function(source) {\n      if (!this._sourcesContents) {\n        return null;\n      }\n      if (aSourceRoot != null) {\n        source = util.relative(aSourceRoot, source);\n      }\n      const key = util.toSetString(source);\n      return Object.prototype.hasOwnProperty.call(this._sourcesContents, key)\n        ? this._sourcesContents[key]\n        : null;\n    }, this);\n  }\n\n  /**\n   * Externalize the source map.\n   */\n  toJSON() {\n    const map = {\n      version: this._version,\n      sources: this._sources.toArray(),\n      names: this._names.toArray(),\n      mappings: this._serializeMappings()\n    };\n    if (this._file != null) {\n      map.file = this._file;\n    }\n    if (this._sourceRoot != null) {\n      map.sourceRoot = this._sourceRoot;\n    }\n    if (this._sourcesContents) {\n      map.sourcesContent = this._generateSourcesContent(map.sources, map.sourceRoot);\n    }\n\n    return map;\n  }\n\n  /**\n   * Render the source map being generated to a string.\n   */\n  toString() {\n    return JSON.stringify(this.toJSON());\n  }\n}\n\nSourceMapGenerator.prototype._version = 3;\nexports.SourceMapGenerator = SourceMapGenerator;\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nexports.GREATEST_LOWER_BOUND = 1;\nexports.LEAST_UPPER_BOUND = 2;\n\n/**\n * Recursive implementation of binary search.\n *\n * @param aLow Indices here and lower do not contain the needle.\n * @param aHigh Indices here and higher do not contain the needle.\n * @param aNeedle The element being searched for.\n * @param aHaystack The non-empty array being searched.\n * @param aCompare Function which takes two elements and returns -1, 0, or 1.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n */\nfunction recursiveSearch(aLow, aHigh, aNeedle, aHaystack, aCompare, aBias) {\n  // This function terminates when one of the following is true:\n  //\n  //   1. We find the exact element we are looking for.\n  //\n  //   2. We did not find the exact element, but we can return the index of\n  //      the next-closest element.\n  //\n  //   3. We did not find the exact element, and there is no next-closest\n  //      element than the one we are searching for, so we return -1.\n  const mid = Math.floor((aHigh - aLow) / 2) + aLow;\n  const cmp = aCompare(aNeedle, aHaystack[mid], true);\n  if (cmp === 0) {\n    // Found the element we are looking for.\n    return mid;\n  } else if (cmp > 0) {\n    // Our needle is greater than aHaystack[mid].\n    if (aHigh - mid > 1) {\n      // The element is in the upper half.\n      return recursiveSearch(mid, aHigh, aNeedle, aHaystack, aCompare, aBias);\n    }\n\n    // The exact needle element was not found in this haystack. Determine if\n    // we are in termination case (3) or (2) and return the appropriate thing.\n    if (aBias == exports.LEAST_UPPER_BOUND) {\n      return aHigh < aHaystack.length ? aHigh : -1;\n    }\n    return mid;\n  }\n\n  // Our needle is less than aHaystack[mid].\n  if (mid - aLow > 1) {\n    // The element is in the lower half.\n    return recursiveSearch(aLow, mid, aNeedle, aHaystack, aCompare, aBias);\n  }\n\n  // we are in termination case (3) or (2) and return the appropriate thing.\n  if (aBias == exports.LEAST_UPPER_BOUND) {\n    return mid;\n  }\n  return aLow < 0 ? -1 : aLow;\n}\n\n/**\n * This is an implementation of binary search which will always try and return\n * the index of the closest element if there is no exact hit. This is because\n * mappings between original and generated line/col pairs are single points,\n * and there is an implicit region between each of them, so a miss just means\n * that you aren't on the very start of a region.\n *\n * @param aNeedle The element you are looking for.\n * @param aHaystack The array that is being searched.\n * @param aCompare A function which takes the needle and an element in the\n *     array and returns -1, 0, or 1 depending on whether the needle is less\n *     than, equal to, or greater than the element, respectively.\n * @param aBias Either 'binarySearch.GREATEST_LOWER_BOUND' or\n *     'binarySearch.LEAST_UPPER_BOUND'. Specifies whether to return the\n *     closest element that is smaller than or greater than the one we are\n *     searching for, respectively, if the exact element cannot be found.\n *     Defaults to 'binarySearch.GREATEST_LOWER_BOUND'.\n */\nexports.search = function search(aNeedle, aHaystack, aCompare, aBias) {\n  if (aHaystack.length === 0) {\n    return -1;\n  }\n\n  let index = recursiveSearch(-1, aHaystack.length, aNeedle, aHaystack,\n                              aCompare, aBias || exports.GREATEST_LOWER_BOUND);\n  if (index < 0) {\n    return -1;\n  }\n\n  // We have found either the exact element, or the next-closest element than\n  // the one we are searching for. However, there may be more than one such\n  // element. Make sure we always return the smallest of these.\n  while (index - 1 >= 0) {\n    if (aCompare(aHaystack[index], aHaystack[index - 1], true) !== 0) {\n      break;\n    }\n    --index;\n  }\n\n  return index;\n};\n", "/* Determine browser vs node environment by testing the default top level context. Solution courtesy of: https://stackoverflow.com/questions/17575790/environment-detection-node-js-or-browser */\nconst isBrowserEnvironment = (function() {\n    // eslint-disable-next-line no-undef\n    return (typeof window !== \"undefined\") && (this === window);\n}).call();\n\nif (isBrowserEnvironment) {\n  // Web version of reading a wasm file into an array buffer.\n\n  let mappingsWasm = null;\n\n  module.exports = function readWasm() {\n    if (typeof mappingsWasm === \"string\") {\n      return fetch(mappingsWasm)\n        .then(response => response.arrayBuffer());\n    }\n    if (mappingsWasm instanceof ArrayBuffer) {\n      return Promise.resolve(mappingsWasm);\n    }\n    throw new Error(\"You must provide the string URL or ArrayBuffer contents \" +\n                    \"of lib/mappings.wasm by calling \" +\n                    \"SourceMapConsumer.initialize({ 'lib/mappings.wasm': ... }) \" +\n                    \"before using SourceMapConsumer\");\n  };\n\n  module.exports.initialize = input => mappingsWasm = input;\n} else {\n  // Node version of reading a wasm file into an array buffer.\n  const fs = require(\"fs\");\n  const path = require(\"path\");\n\n  module.exports = function readWasm() {\n    return new Promise((resolve, reject) => {\n      const wasmPath = path.join(__dirname, \"mappings.wasm\");\n      fs.readFile(wasmPath, null, (error, data) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n\n        resolve(data.buffer);\n      });\n    });\n  };\n\n  module.exports.initialize = _ => {\n    console.debug(\"SourceMapConsumer.initialize is a no-op when running in node.js\");\n  };\n}\n", "const readWasm = require(\"../lib/read-wasm\");\n\n/**\n * Provide the JIT with a nice shape / hidden class.\n */\nfunction Mapping() {\n  this.generatedLine = 0;\n  this.generatedColumn = 0;\n  this.lastGeneratedColumn = null;\n  this.source = null;\n  this.originalLine = null;\n  this.originalColumn = null;\n  this.name = null;\n}\n\nlet cachedWasm = null;\n\nmodule.exports = function wasm() {\n  if (cachedWasm) {\n    return cachedWasm;\n  }\n\n  const callbackStack = [];\n\n  cachedWasm = readWasm().then(buffer => {\n      return WebAssembly.instantiate(buffer, {\n        env: {\n          mapping_callback(\n            generatedLine,\n            generatedColumn,\n\n            hasLastGeneratedColumn,\n            lastGeneratedColumn,\n\n            hasOriginal,\n            source,\n            originalLine,\n            originalColumn,\n\n            hasName,\n            name\n          ) {\n            const mapping = new Mapping();\n            // JS uses 1-based line numbers, wasm uses 0-based.\n            mapping.generatedLine = generatedLine + 1;\n            mapping.generatedColumn = generatedColumn;\n\n            if (hasLastGeneratedColumn) {\n              // JS uses inclusive last generated column, wasm uses exclusive.\n              mapping.lastGeneratedColumn = lastGeneratedColumn - 1;\n            }\n\n            if (hasOriginal) {\n              mapping.source = source;\n              // JS uses 1-based line numbers, wasm uses 0-based.\n              mapping.originalLine = originalLine + 1;\n              mapping.originalColumn = originalColumn;\n\n              if (hasName) {\n                mapping.name = name;\n              }\n            }\n\n            callbackStack[callbackStack.length - 1](mapping);\n          },\n\n          start_all_generated_locations_for() { console.time(\"all_generated_locations_for\"); },\n          end_all_generated_locations_for() { console.timeEnd(\"all_generated_locations_for\"); },\n\n          start_compute_column_spans() { console.time(\"compute_column_spans\"); },\n          end_compute_column_spans() { console.timeEnd(\"compute_column_spans\"); },\n\n          start_generated_location_for() { console.time(\"generated_location_for\"); },\n          end_generated_location_for() { console.timeEnd(\"generated_location_for\"); },\n\n          start_original_location_for() { console.time(\"original_location_for\"); },\n          end_original_location_for() { console.timeEnd(\"original_location_for\"); },\n\n          start_parse_mappings() { console.time(\"parse_mappings\"); },\n          end_parse_mappings() { console.timeEnd(\"parse_mappings\"); },\n\n          start_sort_by_generated_location() { console.time(\"sort_by_generated_location\"); },\n          end_sort_by_generated_location() { console.timeEnd(\"sort_by_generated_location\"); },\n\n          start_sort_by_original_location() { console.time(\"sort_by_original_location\"); },\n          end_sort_by_original_location() { console.timeEnd(\"sort_by_original_location\"); },\n        }\n      });\n  }).then(Wasm => {\n    return {\n      exports: Wasm.instance.exports,\n      withMappingCallback: (mappingCallback, f) => {\n        callbackStack.push(mappingCallback);\n        try {\n          f();\n        } finally {\n          callbackStack.pop();\n        }\n      }\n    };\n  }).then(null, e => {\n    cachedWasm = null;\n    throw e;\n  });\n\n  return cachedWasm;\n};\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst util = require(\"./util\");\nconst binarySearch = require(\"./binary-search\");\nconst ArraySet = require(\"./array-set\").ArraySet;\nconst base64VLQ = require(\"./base64-vlq\"); // eslint-disable-line no-unused-vars\nconst readWasm = require(\"../lib/read-wasm\");\nconst wasm = require(\"./wasm\");\n\nconst INTERNAL = Symbol(\"smcInternal\");\n\nclass SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    // If the constructor was called by super(), just return Promise<this>.\n    // Yes, this is a hack to retain the pre-existing API of the base-class\n    // constructor also being an async factory function.\n    if (aSourceMap == INTERNAL) {\n      return Promise.resolve(this);\n    }\n\n    return _factory(aSourceMap, aSourceMapURL);\n  }\n\n  static initialize(opts) {\n    readWasm.initialize(opts[\"lib/mappings.wasm\"]);\n  }\n\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return _factoryBSM(aSourceMap, aSourceMapURL);\n  }\n\n  /**\n   * Construct a new `SourceMapConsumer` from `rawSourceMap` and `sourceMapUrl`\n   * (see the `SourceMapConsumer` constructor for details. Then, invoke the `async\n   * function f(SourceMapConsumer) -> T` with the newly constructed consumer, wait\n   * for `f` to complete, call `destroy` on the consumer, and return `f`'s return\n   * value.\n   *\n   * You must not use the consumer after `f` completes!\n   *\n   * By using `with`, you do not have to remember to manually call `destroy` on\n   * the consumer, since it will be called automatically once `f` completes.\n   *\n   * ```js\n   * const xSquared = await SourceMapConsumer.with(\n   *   myRawSourceMap,\n   *   null,\n   *   async function (consumer) {\n   *     // Use `consumer` inside here and don't worry about remembering\n   *     // to call `destroy`.\n   *\n   *     const x = await whatever(consumer);\n   *     return x * x;\n   *   }\n   * );\n   *\n   * // You may not use that `consumer` anymore out here; it has\n   * // been destroyed. But you can use `xSquared`.\n   * console.log(xSquared);\n   * ```\n   */\n  static async with(rawSourceMap, sourceMapUrl, f) {\n    const consumer = await new SourceMapConsumer(rawSourceMap, sourceMapUrl);\n    try {\n      return await f(consumer);\n    } finally {\n      consumer.destroy();\n    }\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    throw new Error(\"Subclasses must implement _parseMappings\");\n  }\n\n  /**\n   * Iterate over each mapping between an original source/line/column and a\n   * generated line/column in this source map.\n   *\n   * @param Function aCallback\n   *        The function that is called with each mapping.\n   * @param Object aContext\n   *        Optional. If specified, this object will be the value of `this` every\n   *        time that `aCallback` is called.\n   * @param aOrder\n   *        Either `SourceMapConsumer.GENERATED_ORDER` or\n   *        `SourceMapConsumer.ORIGINAL_ORDER`. Specifies whether you want to\n   *        iterate over the mappings sorted by the generated file's line/column\n   *        order or the original's source/line/column order, respectively. Defaults to\n   *        `SourceMapConsumer.GENERATED_ORDER`.\n   */\n  eachMapping(aCallback, aContext, aOrder) {\n    throw new Error(\"Subclasses must implement eachMapping\");\n  }\n\n  /**\n   * Returns all generated line and column information for the original source,\n   * line, and column provided. If no column is provided, returns all mappings\n   * corresponding to a either the line we are searching for or the next\n   * closest line that has any mappings. Otherwise, returns all mappings\n   * corresponding to the given line and either the column we are searching for\n   * or the next closest column that has any offsets.\n   *\n   * The only argument is an object with the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number is 1-based.\n   *   - column: Optional. the column number in the original source.\n   *    The column number is 0-based.\n   *\n   * and an array of objects is returned, each with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *    line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *    The column number is 0-based.\n   */\n  allGeneratedPositionsFor(aArgs) {\n    throw new Error(\"Subclasses must implement allGeneratedPositionsFor\");\n  }\n\n  destroy() {\n    throw new Error(\"Subclasses must implement destroy\");\n  }\n}\n\n/**\n * The version of the source mapping spec that we are consuming.\n */\nSourceMapConsumer.prototype._version = 3;\nSourceMapConsumer.GENERATED_ORDER = 1;\nSourceMapConsumer.ORIGINAL_ORDER = 2;\n\nSourceMapConsumer.GREATEST_LOWER_BOUND = 1;\nSourceMapConsumer.LEAST_UPPER_BOUND = 2;\n\nexports.SourceMapConsumer = SourceMapConsumer;\n\n/**\n * A BasicSourceMapConsumer instance represents a parsed source map which we can\n * query for information about the original file positions by giving it a file\n * position in the generated source.\n *\n * The first parameter is the raw source map (either as a JSON string, or\n * already parsed to an object). According to the spec, source maps have the\n * following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - sources: An array of URLs to the original source files.\n *   - names: An array of identifiers which can be referenced by individual mappings.\n *   - sourceRoot: Optional. The URL root from which all sources are relative.\n *   - sourcesContent: Optional. An array of contents of the original source files.\n *   - mappings: A string of base64 VLQs which contain the actual mappings.\n *   - file: Optional. The generated file this source map is associated with.\n *\n * Here is an example source map, taken from the source map spec[0]:\n *\n *     {\n *       version : 3,\n *       file: \"out.js\",\n *       sourceRoot : \"\",\n *       sources: [\"foo.js\", \"bar.js\"],\n *       names: [\"src\", \"maps\", \"are\", \"fun\"],\n *       mappings: \"AA,AB;;ABCDE;\"\n *     }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit?pli=1#\n */\nclass BasicSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      let sources = util.getArg(sourceMap, \"sources\");\n      // Sass 3.3 leaves out the 'names' array, so we deviate from the spec (which\n      // requires the array) to play nice here.\n      const names = util.getArg(sourceMap, \"names\", []);\n      let sourceRoot = util.getArg(sourceMap, \"sourceRoot\", null);\n      const sourcesContent = util.getArg(sourceMap, \"sourcesContent\", null);\n      const mappings = util.getArg(sourceMap, \"mappings\");\n      const file = util.getArg(sourceMap, \"file\", null);\n\n      // Once again, Sass deviates from the spec and supplies the version as a\n      // string rather than a number, so we use loose equality checking here.\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      if (sourceRoot) {\n        sourceRoot = util.normalize(sourceRoot);\n      }\n\n      sources = sources\n        .map(String)\n        // Some source maps produce relative source paths like \"./foo.js\" instead of\n        // \"foo.js\".  Normalize these first so that future comparisons will succeed.\n        // See bugzil.la/1090768.\n        .map(util.normalize)\n        // Always ensure that absolute sources are internally stored relative to\n        // the source root, if the source root is absolute. Not doing this would\n        // be particularly problematic when the source root is a prefix of the\n        // source (valid, but why??). See github issue #199 and bugzil.la/1188982.\n        .map(function(source) {\n          return sourceRoot && util.isAbsolute(sourceRoot) && util.isAbsolute(source)\n            ? util.relative(sourceRoot, source)\n            : source;\n        });\n\n      // Pass `true` below to allow duplicate names and sources. While source maps\n      // are intended to be compressed and deduplicated, the TypeScript compiler\n      // sometimes generates source maps with duplicates in them. See Github issue\n      // #72 and bugzil.la/889492.\n      that._names = ArraySet.fromArray(names.map(String), true);\n      that._sources = ArraySet.fromArray(sources, true);\n\n      that._absoluteSources = that._sources.toArray().map(function(s) {\n        return util.computeSourceURL(sourceRoot, s, aSourceMapURL);\n      });\n\n      that.sourceRoot = sourceRoot;\n      that.sourcesContent = sourcesContent;\n      that._mappings = mappings;\n      that._sourceMapURL = aSourceMapURL;\n      that.file = file;\n\n      that._computedColumnSpans = false;\n      that._mappingsPtr = 0;\n      that._wasm = null;\n\n      return wasm().then(w => {\n        that._wasm = w;\n        return that;\n      });\n    });\n  }\n\n  /**\n   * Utility function to find the index of a source.  Returns -1 if not\n   * found.\n   */\n  _findSourceIndex(aSource) {\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    if (this._sources.has(relativeSource)) {\n      return this._sources.indexOf(relativeSource);\n    }\n\n    // Maybe aSource is an absolute URL as returned by |sources|.  In\n    // this case we can't simply undo the transform.\n    for (let i = 0; i < this._absoluteSources.length; ++i) {\n      if (this._absoluteSources[i] == aSource) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Create a BasicSourceMapConsumer from a SourceMapGenerator.\n   *\n   * @param SourceMapGenerator aSourceMap\n   *        The source map that will be consumed.\n   * @param String aSourceMapURL\n   *        The URL at which the source map can be found (optional)\n   * @returns BasicSourceMapConsumer\n   */\n  static fromSourceMap(aSourceMap, aSourceMapURL) {\n    return new BasicSourceMapConsumer(aSourceMap.toString());\n  }\n\n  get sources() {\n    return this._absoluteSources.slice();\n  }\n\n  _getMappingsPtr() {\n    if (this._mappingsPtr === 0) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this._mappingsPtr;\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const size = aStr.length;\n\n    const mappingsBufPtr = this._wasm.exports.allocate_mappings(size);\n    const mappingsBuf = new Uint8Array(this._wasm.exports.memory.buffer, mappingsBufPtr, size);\n    for (let i = 0; i < size; i++) {\n      mappingsBuf[i] = aStr.charCodeAt(i);\n    }\n\n    const mappingsPtr = this._wasm.exports.parse_mappings(mappingsBufPtr);\n\n    if (!mappingsPtr) {\n      const error = this._wasm.exports.get_last_error();\n      let msg = `Error parsing mappings (code ${error}): `;\n\n      // XXX: keep these error codes in sync with `fitzgen/source-map-mappings`.\n      switch (error) {\n        case 1:\n          msg += \"the mappings contained a negative line, column, source index, or name index\";\n          break;\n        case 2:\n          msg += \"the mappings contained a number larger than 2**32\";\n          break;\n        case 3:\n          msg += \"reached EOF while in the middle of parsing a VLQ\";\n          break;\n        case 4:\n          msg += \"invalid base 64 character while parsing a VLQ\";\n          break;\n        default:\n          msg += \"unknown error code\";\n          break;\n      }\n\n      throw new Error(msg);\n    }\n\n    this._mappingsPtr = mappingsPtr;\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n    const sourceRoot = this.sourceRoot;\n\n    this._wasm.withMappingCallback(\n      mapping => {\n        if (mapping.source !== null) {\n          mapping.source = this._sources.at(mapping.source);\n          mapping.source = util.computeSourceURL(sourceRoot, mapping.source, this._sourceMapURL);\n\n          if (mapping.name !== null) {\n            mapping.name = this._names.at(mapping.name);\n          }\n        }\n\n        aCallback.call(context, mapping);\n      },\n      () => {\n        switch (order) {\n        case SourceMapConsumer.GENERATED_ORDER:\n          this._wasm.exports.by_generated_location(this._getMappingsPtr());\n          break;\n        case SourceMapConsumer.ORIGINAL_ORDER:\n          this._wasm.exports.by_original_location(this._getMappingsPtr());\n          break;\n        default:\n          throw new Error(\"Unknown order of iteration.\");\n        }\n      }\n    );\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    const originalLine = util.getArg(aArgs, \"line\");\n    const originalColumn = aArgs.column || 0;\n\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return [];\n    }\n\n    if (originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    this._wasm.withMappingCallback(\n      m => {\n        let lastColumn = m.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        mappings.push({\n          line: m.generatedLine,\n          column: m.generatedColumn,\n          lastColumn,\n        });\n      }, () => {\n        this._wasm.exports.all_generated_locations_for(\n          this._getMappingsPtr(),\n          source,\n          originalLine - 1,\n          \"column\" in aArgs,\n          originalColumn\n        );\n      }\n    );\n\n    return mappings;\n  }\n\n  destroy() {\n    if (this._mappingsPtr !== 0) {\n      this._wasm.exports.free_mappings(this._mappingsPtr);\n      this._mappingsPtr = 0;\n    }\n  }\n\n  /**\n   * Compute the last column for each generated mapping. The last column is\n   * inclusive.\n   */\n  computeColumnSpans() {\n    if (this._computedColumnSpans) {\n      return;\n    }\n\n    this._wasm.exports.compute_column_spans(this._getMappingsPtr());\n    this._computedColumnSpans = true;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.generatedLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.generatedColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.original_location_for(\n        this._getMappingsPtr(),\n        needle.generatedLine - 1,\n        needle.generatedColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.generatedLine === needle.generatedLine) {\n        let source = util.getArg(mapping, \"source\", null);\n        if (source !== null) {\n          source = this._sources.at(source);\n          source = util.computeSourceURL(this.sourceRoot, source, this._sourceMapURL);\n        }\n\n        let name = util.getArg(mapping, \"name\", null);\n        if (name !== null) {\n          name = this._names.at(name);\n        }\n\n        return {\n          source,\n          line: util.getArg(mapping, \"originalLine\", null),\n          column: util.getArg(mapping, \"originalColumn\", null),\n          name\n        };\n      }\n    }\n\n    return {\n      source: null,\n      line: null,\n      column: null,\n      name: null\n    };\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    if (!this.sourcesContent) {\n      return false;\n    }\n    return this.sourcesContent.length >= this._sources.size() &&\n      !this.sourcesContent.some(function(sc) { return sc == null; });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    if (!this.sourcesContent) {\n      return null;\n    }\n\n    const index = this._findSourceIndex(aSource);\n    if (index >= 0) {\n      return this.sourcesContent[index];\n    }\n\n    let relativeSource = aSource;\n    if (this.sourceRoot != null) {\n      relativeSource = util.relative(this.sourceRoot, relativeSource);\n    }\n\n    let url;\n    if (this.sourceRoot != null\n        && (url = util.urlParse(this.sourceRoot))) {\n      // XXX: file:// URIs and absolute paths lead to unexpected behavior for\n      // many users. We can help them out when they expect file:// URIs to\n      // behave like it would if they were running a local HTTP server. See\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=885597.\n      const fileUriAbsPath = relativeSource.replace(/^file:\\/\\//, \"\");\n      if (url.scheme == \"file\"\n          && this._sources.has(fileUriAbsPath)) {\n        return this.sourcesContent[this._sources.indexOf(fileUriAbsPath)];\n      }\n\n      if ((!url.path || url.path == \"/\")\n          && this._sources.has(\"/\" + relativeSource)) {\n        return this.sourcesContent[this._sources.indexOf(\"/\" + relativeSource)];\n      }\n    }\n\n    // This function is used recursively from\n    // IndexedSourceMapConsumer.prototype.sourceContentFor. In that case, we\n    // don't want to throw if we can't find the source - we just want to\n    // return null, so we provide a flag to exit gracefully.\n    if (nullOnMissing) {\n      return null;\n    }\n\n    throw new Error('\"' + relativeSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *   - bias: Either 'SourceMapConsumer.GREATEST_LOWER_BOUND' or\n   *     'SourceMapConsumer.LEAST_UPPER_BOUND'. Specifies whether to return the\n   *     closest element that is smaller than or greater than the one we are\n   *     searching for, respectively, if the exact element cannot be found.\n   *     Defaults to 'SourceMapConsumer.GREATEST_LOWER_BOUND'.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    let source = util.getArg(aArgs, \"source\");\n    source = this._findSourceIndex(source);\n    if (source < 0) {\n      return {\n        line: null,\n        column: null,\n        lastColumn: null\n      };\n    }\n\n    const needle = {\n      source,\n      originalLine: util.getArg(aArgs, \"line\"),\n      originalColumn: util.getArg(aArgs, \"column\")\n    };\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    let bias = util.getArg(aArgs, \"bias\", SourceMapConsumer.GREATEST_LOWER_BOUND);\n    if (bias == null) {\n      bias = SourceMapConsumer.GREATEST_LOWER_BOUND;\n    }\n\n    let mapping;\n    this._wasm.withMappingCallback(m => mapping = m, () => {\n      this._wasm.exports.generated_location_for(\n        this._getMappingsPtr(),\n        needle.source,\n        needle.originalLine - 1,\n        needle.originalColumn,\n        bias\n      );\n    });\n\n    if (mapping) {\n      if (mapping.source === needle.source) {\n        let lastColumn = mapping.lastGeneratedColumn;\n        if (this._computedColumnSpans && lastColumn === null) {\n          lastColumn = Infinity;\n        }\n        return {\n          line: util.getArg(mapping, \"generatedLine\", null),\n          column: util.getArg(mapping, \"generatedColumn\", null),\n          lastColumn,\n        };\n      }\n    }\n\n    return {\n      line: null,\n      column: null,\n      lastColumn: null\n    };\n  }\n}\n\nBasicSourceMapConsumer.prototype.consumer = SourceMapConsumer;\nexports.BasicSourceMapConsumer = BasicSourceMapConsumer;\n\n/**\n * An IndexedSourceMapConsumer instance represents a parsed source map which\n * we can query for information. It differs from BasicSourceMapConsumer in\n * that it takes \"indexed\" source maps (i.e. ones with a \"sections\" field) as\n * input.\n *\n * The first parameter is a raw source map (either as a JSON string, or already\n * parsed to an object). According to the spec for indexed source maps, they\n * have the following attributes:\n *\n *   - version: Which version of the source map spec this map is following.\n *   - file: Optional. The generated file this source map is associated with.\n *   - sections: A list of section definitions.\n *\n * Each value under the \"sections\" field has two fields:\n *   - offset: The offset into the original specified at which this section\n *       begins to apply, defined as an object with a \"line\" and \"column\"\n *       field.\n *   - map: A source map definition. This source map could also be indexed,\n *       but doesn't have to be.\n *\n * Instead of the \"map\" field, it's also possible to have a \"url\" field\n * specifying a URL to retrieve a source map from, but that's currently\n * unsupported.\n *\n * Here's an example source map, taken from the source map spec[0], but\n * modified to omit a section which uses the \"url\" field.\n *\n *  {\n *    version : 3,\n *    file: \"app.js\",\n *    sections: [{\n *      offset: {line:100, column:10},\n *      map: {\n *        version : 3,\n *        file: \"section.js\",\n *        sources: [\"foo.js\", \"bar.js\"],\n *        names: [\"src\", \"maps\", \"are\", \"fun\"],\n *        mappings: \"AAAA,E;;ABCDE;\"\n *      }\n *    }],\n *  }\n *\n * The second parameter, if given, is a string whose value is the URL\n * at which the source map was found.  This URL is used to compute the\n * sources array.\n *\n * [0]: https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k/edit#heading=h.535es3xeprgt\n */\nclass IndexedSourceMapConsumer extends SourceMapConsumer {\n  constructor(aSourceMap, aSourceMapURL) {\n    return super(INTERNAL).then(that => {\n      let sourceMap = aSourceMap;\n      if (typeof aSourceMap === \"string\") {\n        sourceMap = util.parseSourceMapInput(aSourceMap);\n      }\n\n      const version = util.getArg(sourceMap, \"version\");\n      const sections = util.getArg(sourceMap, \"sections\");\n\n      if (version != that._version) {\n        throw new Error(\"Unsupported version: \" + version);\n      }\n\n      that._sources = new ArraySet();\n      that._names = new ArraySet();\n      that.__generatedMappings = null;\n      that.__originalMappings = null;\n      that.__generatedMappingsUnsorted = null;\n      that.__originalMappingsUnsorted = null;\n\n      let lastOffset = {\n        line: -1,\n        column: 0\n      };\n      return Promise.all(sections.map(s => {\n        if (s.url) {\n          // The url field will require support for asynchronicity.\n          // See https://github.com/mozilla/source-map/issues/16\n          throw new Error(\"Support for url field in sections not implemented.\");\n        }\n        const offset = util.getArg(s, \"offset\");\n        const offsetLine = util.getArg(offset, \"line\");\n        const offsetColumn = util.getArg(offset, \"column\");\n\n        if (offsetLine < lastOffset.line ||\n            (offsetLine === lastOffset.line && offsetColumn < lastOffset.column)) {\n          throw new Error(\"Section offsets must be ordered and non-overlapping.\");\n        }\n        lastOffset = offset;\n\n        const cons = new SourceMapConsumer(util.getArg(s, \"map\"), aSourceMapURL);\n        return cons.then(consumer => {\n          return {\n            generatedOffset: {\n              // The offset fields are 0-based, but we use 1-based indices when\n              // encoding/decoding from VLQ.\n              generatedLine: offsetLine + 1,\n              generatedColumn: offsetColumn + 1\n            },\n            consumer\n          };\n        });\n      })).then(s => {\n        that._sections = s;\n        return that;\n      });\n    });\n  }\n\n  // `__generatedMappings` and `__originalMappings` are arrays that hold the\n  // parsed mapping coordinates from the source map's \"mappings\" attribute. They\n  // are lazily instantiated, accessed via the `_generatedMappings` and\n  // `_originalMappings` getters respectively, and we only parse the mappings\n  // and create these arrays once queried for a source location. We jump through\n  // these hoops because there can be many thousands of mappings, and parsing\n  // them is expensive, so we only want to do it if we must.\n  //\n  // Each object in the arrays is of the form:\n  //\n  //     {\n  //       generatedLine: The line number in the generated code,\n  //       generatedColumn: The column number in the generated code,\n  //       source: The path to the original source file that generated this\n  //               chunk of code,\n  //       originalLine: The line number in the original source that\n  //                     corresponds to this chunk of generated code,\n  //       originalColumn: The column number in the original source that\n  //                       corresponds to this chunk of generated code,\n  //       name: The name of the original symbol which generated this chunk of\n  //             code.\n  //     }\n  //\n  // All properties except for `generatedLine` and `generatedColumn` can be\n  // `null`.\n  //\n  // `_generatedMappings` is ordered by the generated positions.\n  //\n  // `_originalMappings` is ordered by the original positions.\n  get _generatedMappings() {\n    if (!this.__generatedMappings) {\n      this._sortGeneratedMappings();\n    }\n\n    return this.__generatedMappings;\n  }\n\n  get _originalMappings() {\n    if (!this.__originalMappings) {\n      this._sortOriginalMappings();\n    }\n\n    return this.__originalMappings;\n  }\n\n  get _generatedMappingsUnsorted() {\n    if (!this.__generatedMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__generatedMappingsUnsorted;\n  }\n\n  get _originalMappingsUnsorted() {\n    if (!this.__originalMappingsUnsorted) {\n      this._parseMappings(this._mappings, this.sourceRoot);\n    }\n\n    return this.__originalMappingsUnsorted;\n  }\n\n  _sortGeneratedMappings() {\n    const mappings = this._generatedMappingsUnsorted;\n    mappings.sort(util.compareByGeneratedPositionsDeflated);\n    this.__generatedMappings = mappings;\n  }\n\n  _sortOriginalMappings() {\n    const mappings = this._originalMappingsUnsorted;\n    mappings.sort(util.compareByOriginalPositions);\n    this.__originalMappings = mappings;\n  }\n\n  /**\n   * The list of original sources.\n   */\n  get sources() {\n    const sources = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      for (let j = 0; j < this._sections[i].consumer.sources.length; j++) {\n        sources.push(this._sections[i].consumer.sources[j]);\n      }\n    }\n    return sources;\n  }\n\n  /**\n   * Returns the original source, line, and column information for the generated\n   * source's line and column positions provided. The only argument is an object\n   * with the following properties:\n   *\n   *   - line: The line number in the generated source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the generated source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - source: The original source file, or null.\n   *   - line: The line number in the original source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the original source, or null.  The\n   *     column number is 0-based.\n   *   - name: The original identifier, or null.\n   */\n  originalPositionFor(aArgs) {\n    const needle = {\n      generatedLine: util.getArg(aArgs, \"line\"),\n      generatedColumn: util.getArg(aArgs, \"column\")\n    };\n\n    // Find the section containing the generated position we're trying to map\n    // to an original position.\n    const sectionIndex = binarySearch.search(needle, this._sections,\n      function(aNeedle, section) {\n        const cmp = aNeedle.generatedLine - section.generatedOffset.generatedLine;\n        if (cmp) {\n          return cmp;\n        }\n\n        return (aNeedle.generatedColumn -\n                section.generatedOffset.generatedColumn);\n      });\n    const section = this._sections[sectionIndex];\n\n    if (!section) {\n      return {\n        source: null,\n        line: null,\n        column: null,\n        name: null\n      };\n    }\n\n    return section.consumer.originalPositionFor({\n      line: needle.generatedLine -\n        (section.generatedOffset.generatedLine - 1),\n      column: needle.generatedColumn -\n        (section.generatedOffset.generatedLine === needle.generatedLine\n         ? section.generatedOffset.generatedColumn - 1\n         : 0),\n      bias: aArgs.bias\n    });\n  }\n\n  /**\n   * Return true if we have the source content for every source in the source\n   * map, false otherwise.\n   */\n  hasContentsOfAllSources() {\n    return this._sections.every(function(s) {\n      return s.consumer.hasContentsOfAllSources();\n    });\n  }\n\n  /**\n   * Returns the original source content. The only argument is the url of the\n   * original source file. Returns null if no original source content is\n   * available.\n   */\n  sourceContentFor(aSource, nullOnMissing) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const content = section.consumer.sourceContentFor(aSource, true);\n      if (content) {\n        return content;\n      }\n    }\n    if (nullOnMissing) {\n      return null;\n    }\n    throw new Error('\"' + aSource + '\" is not in the SourceMap.');\n  }\n\n  /**\n   * Returns the generated line and column information for the original source,\n   * line, and column positions provided. The only argument is an object with\n   * the following properties:\n   *\n   *   - source: The filename of the original source.\n   *   - line: The line number in the original source.  The line number\n   *     is 1-based.\n   *   - column: The column number in the original source.  The column\n   *     number is 0-based.\n   *\n   * and an object is returned with the following properties:\n   *\n   *   - line: The line number in the generated source, or null.  The\n   *     line number is 1-based.\n   *   - column: The column number in the generated source, or null.\n   *     The column number is 0-based.\n   */\n  generatedPositionFor(aArgs) {\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      // Only consider this section if the requested source is in the list of\n      // sources of the consumer.\n      if (section.consumer._findSourceIndex(util.getArg(aArgs, \"source\")) === -1) {\n        continue;\n      }\n      const generatedPosition = section.consumer.generatedPositionFor(aArgs);\n      if (generatedPosition) {\n        const ret = {\n          line: generatedPosition.line +\n            (section.generatedOffset.generatedLine - 1),\n          column: generatedPosition.column +\n            (section.generatedOffset.generatedLine === generatedPosition.line\n             ? section.generatedOffset.generatedColumn - 1\n             : 0)\n        };\n        return ret;\n      }\n    }\n\n    return {\n      line: null,\n      column: null\n    };\n  }\n\n  /**\n   * Parse the mappings in a string in to a data structure which we can easily\n   * query (the ordered arrays in the `this.__generatedMappings` and\n   * `this.__originalMappings` properties).\n   */\n  _parseMappings(aStr, aSourceRoot) {\n    const generatedMappings = this.__generatedMappingsUnsorted = [];\n    const originalMappings = this.__originalMappingsUnsorted = [];\n    for (let i = 0; i < this._sections.length; i++) {\n      const section = this._sections[i];\n\n      const sectionMappings = [];\n      section.consumer.eachMapping(m => sectionMappings.push(m));\n\n      for (let j = 0; j < sectionMappings.length; j++) {\n        const mapping = sectionMappings[j];\n\n        // TODO: test if null is correct here.  The original code used\n        // `source`, which would actually have gotten used as null because\n        // var's get hoisted.\n        // See: https://github.com/mozilla/source-map/issues/333\n        let source = util.computeSourceURL(section.consumer.sourceRoot, null, this._sourceMapURL);\n        this._sources.add(source);\n        source = this._sources.indexOf(source);\n\n        let name = null;\n        if (mapping.name) {\n          this._names.add(mapping.name);\n          name = this._names.indexOf(mapping.name);\n        }\n\n        // The mappings coming from the consumer for the section have\n        // generated positions relative to the start of the section, so we\n        // need to offset them to be relative to the start of the concatenated\n        // generated file.\n        const adjustedMapping = {\n          source,\n          generatedLine: mapping.generatedLine +\n            (section.generatedOffset.generatedLine - 1),\n          generatedColumn: mapping.generatedColumn +\n            (section.generatedOffset.generatedLine === mapping.generatedLine\n            ? section.generatedOffset.generatedColumn - 1\n            : 0),\n          originalLine: mapping.originalLine,\n          originalColumn: mapping.originalColumn,\n          name\n        };\n\n        generatedMappings.push(adjustedMapping);\n        if (typeof adjustedMapping.originalLine === \"number\") {\n          originalMappings.push(adjustedMapping);\n        }\n      }\n    }\n  }\n\n  eachMapping(aCallback, aContext, aOrder) {\n    const context = aContext || null;\n    const order = aOrder || SourceMapConsumer.GENERATED_ORDER;\n\n    let mappings;\n    switch (order) {\n    case SourceMapConsumer.GENERATED_ORDER:\n      mappings = this._generatedMappings;\n      break;\n    case SourceMapConsumer.ORIGINAL_ORDER:\n      mappings = this._originalMappings;\n      break;\n    default:\n      throw new Error(\"Unknown order of iteration.\");\n    }\n\n    const sourceRoot = this.sourceRoot;\n    mappings.map(function(mapping) {\n      let source = null;\n      if (mapping.source !== null) {\n        source = this._sources.at(mapping.source);\n        source = util.computeSourceURL(sourceRoot, source, this._sourceMapURL);\n      }\n      return {\n        source,\n        generatedLine: mapping.generatedLine,\n        generatedColumn: mapping.generatedColumn,\n        originalLine: mapping.originalLine,\n        originalColumn: mapping.originalColumn,\n        name: mapping.name === null ? null : this._names.at(mapping.name)\n      };\n    }, this).forEach(aCallback, context);\n  }\n\n  /**\n   * Find the mapping that best matches the hypothetical \"needle\" mapping that\n   * we are searching for in the given \"haystack\" of mappings.\n   */\n  _findMapping(aNeedle, aMappings, aLineName,\n              aColumnName, aComparator, aBias) {\n    // To return the position we are searching for, we must first find the\n    // mapping for the given position and then return the opposite position it\n    // points to. Because the mappings are sorted, we can use binary search to\n    // find the best mapping.\n\n    if (aNeedle[aLineName] <= 0) {\n      throw new TypeError(\"Line must be greater than or equal to 1, got \"\n                          + aNeedle[aLineName]);\n    }\n    if (aNeedle[aColumnName] < 0) {\n      throw new TypeError(\"Column must be greater than or equal to 0, got \"\n                          + aNeedle[aColumnName]);\n    }\n\n    return binarySearch.search(aNeedle, aMappings, aComparator, aBias);\n  }\n\n  allGeneratedPositionsFor(aArgs) {\n    const line = util.getArg(aArgs, \"line\");\n\n    // When there is no exact match, BasicSourceMapConsumer.prototype._findMapping\n    // returns the index of the closest mapping less than the needle. By\n    // setting needle.originalColumn to 0, we thus find the last mapping for\n    // the given line, provided such a mapping exists.\n    const needle = {\n      source: util.getArg(aArgs, \"source\"),\n      originalLine: line,\n      originalColumn: util.getArg(aArgs, \"column\", 0)\n    };\n\n    needle.source = this._findSourceIndex(needle.source);\n    if (needle.source < 0) {\n      return [];\n    }\n\n    if (needle.originalLine < 1) {\n      throw new Error(\"Line numbers must be >= 1\");\n    }\n\n    if (needle.originalColumn < 0) {\n      throw new Error(\"Column numbers must be >= 0\");\n    }\n\n    const mappings = [];\n\n    let index = this._findMapping(needle,\n                                  this._originalMappings,\n                                  \"originalLine\",\n                                  \"originalColumn\",\n                                  util.compareByOriginalPositions,\n                                  binarySearch.LEAST_UPPER_BOUND);\n    if (index >= 0) {\n      let mapping = this._originalMappings[index];\n\n      if (aArgs.column === undefined) {\n        const originalLine = mapping.originalLine;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we found. Since\n        // mappings are sorted, this is guaranteed to find all mappings for\n        // the line we found.\n        while (mapping && mapping.originalLine === originalLine) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      } else {\n        const originalColumn = mapping.originalColumn;\n\n        // Iterate until either we run out of mappings, or we run into\n        // a mapping for a different line than the one we were searching for.\n        // Since mappings are sorted, this is guaranteed to find all mappings for\n        // the line we are searching for.\n        while (mapping &&\n               mapping.originalLine === line &&\n               mapping.originalColumn == originalColumn) {\n          let lastColumn = mapping.lastGeneratedColumn;\n          if (this._computedColumnSpans && lastColumn === null) {\n            lastColumn = Infinity;\n          }\n          mappings.push({\n            line: util.getArg(mapping, \"generatedLine\", null),\n            column: util.getArg(mapping, \"generatedColumn\", null),\n            lastColumn,\n          });\n\n          mapping = this._originalMappings[++index];\n        }\n      }\n    }\n\n    return mappings;\n  }\n\n  destroy() {\n    for (let i = 0; i < this._sections.length; i++) {\n      this._sections[i].consumer.destroy();\n    }\n  }\n}\nexports.IndexedSourceMapConsumer = IndexedSourceMapConsumer;\n\n/*\n * Cheat to get around inter-twingled classes.  `factory()` can be at the end\n * where it has access to non-hoisted classes, but it gets hoisted itself.\n */\nfunction _factory(aSourceMap, aSourceMapURL) {\n  let sourceMap = aSourceMap;\n  if (typeof aSourceMap === \"string\") {\n    sourceMap = util.parseSourceMapInput(aSourceMap);\n  }\n\n  const consumer = sourceMap.sections != null\n      ? new IndexedSourceMapConsumer(sourceMap, aSourceMapURL)\n      : new BasicSourceMapConsumer(sourceMap, aSourceMapURL);\n  return Promise.resolve(consumer);\n}\n\nfunction _factoryBSM(aSourceMap, aSourceMapURL) {\n  return BasicSourceMapConsumer.fromSourceMap(aSourceMap, aSourceMapURL);\n}\n", "/* -*- Mode: js; js-indent-level: 2; -*- */\n/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\n\nconst SourceMapGenerator = require(\"./source-map-generator\").SourceMapGenerator;\nconst util = require(\"./util\");\n\n// Matches a Windows-style `\\r\\n` newline or a `\\n` newline used by all other\n// operating systems these days (capturing the result).\nconst REGEX_NEWLINE = /(\\r?\\n)/;\n\n// Newline character code for charCodeAt() comparisons\nconst NEWLINE_CODE = 10;\n\n// Private symbol for identifying `SourceNode`s when multiple versions of\n// the source-map library are loaded. This MUST NOT CHANGE across\n// versions!\nconst isSourceNode = \"$$$isSourceNode$$$\";\n\n/**\n * SourceNodes provide a way to abstract over interpolating/concatenating\n * snippets of generated JavaScript source code while maintaining the line and\n * column information associated with the original source code.\n *\n * @param aLine The original line number.\n * @param aColumn The original column number.\n * @param aSource The original source's filename.\n * @param aChunks Optional. An array of strings which are snippets of\n *        generated JS, or other SourceNodes.\n * @param aName The original identifier.\n */\nclass SourceNode {\n  constructor(aLine, aColumn, aSource, aChunks, aName) {\n    this.children = [];\n    this.sourceContents = {};\n    this.line = aLine == null ? null : aLine;\n    this.column = aColumn == null ? null : aColumn;\n    this.source = aSource == null ? null : aSource;\n    this.name = aName == null ? null : aName;\n    this[isSourceNode] = true;\n    if (aChunks != null) this.add(aChunks);\n  }\n\n  /**\n   * Creates a SourceNode from generated code and a SourceMapConsumer.\n   *\n   * @param aGeneratedCode The generated code\n   * @param aSourceMapConsumer The SourceMap for the generated code\n   * @param aRelativePath Optional. The path that relative sources in the\n   *        SourceMapConsumer should be relative to.\n   */\n  static fromStringWithSourceMap(aGeneratedCode, aSourceMapConsumer, aRelativePath) {\n    // The SourceNode we want to fill with the generated code\n    // and the SourceMap\n    const node = new SourceNode();\n\n    // All even indices of this array are one line of the generated code,\n    // while all odd indices are the newlines between two adjacent lines\n    // (since `REGEX_NEWLINE` captures its match).\n    // Processed fragments are accessed by calling `shiftNextLine`.\n    const remainingLines = aGeneratedCode.split(REGEX_NEWLINE);\n    let remainingLinesIndex = 0;\n    const shiftNextLine = function() {\n      const lineContents = getNextLine();\n      // The last line of a file might not have a newline.\n      const newLine = getNextLine() || \"\";\n      return lineContents + newLine;\n\n      function getNextLine() {\n        return remainingLinesIndex < remainingLines.length ?\n            remainingLines[remainingLinesIndex++] : undefined;\n      }\n    };\n\n    // We need to remember the position of \"remainingLines\"\n    let lastGeneratedLine = 1, lastGeneratedColumn = 0;\n\n    // The generate SourceNodes we need a code range.\n    // To extract it current and last mapping is used.\n    // Here we store the last mapping.\n    let lastMapping = null;\n    let nextLine;\n\n    aSourceMapConsumer.eachMapping(function(mapping) {\n      if (lastMapping !== null) {\n        // We add the code from \"lastMapping\" to \"mapping\":\n        // First check if there is a new line in between.\n        if (lastGeneratedLine < mapping.generatedLine) {\n          // Associate first line with \"lastMapping\"\n          addMappingWithCode(lastMapping, shiftNextLine());\n          lastGeneratedLine++;\n          lastGeneratedColumn = 0;\n          // The remaining code is added without mapping\n        } else {\n          // There is no new line in between.\n          // Associate the code between \"lastGeneratedColumn\" and\n          // \"mapping.generatedColumn\" with \"lastMapping\"\n          nextLine = remainingLines[remainingLinesIndex] || \"\";\n          const code = nextLine.substr(0, mapping.generatedColumn -\n                                        lastGeneratedColumn);\n          remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn -\n                                              lastGeneratedColumn);\n          lastGeneratedColumn = mapping.generatedColumn;\n          addMappingWithCode(lastMapping, code);\n          // No more remaining code, continue\n          lastMapping = mapping;\n          return;\n        }\n      }\n      // We add the generated code until the first mapping\n      // to the SourceNode without any mapping.\n      // Each line is added as separate string.\n      while (lastGeneratedLine < mapping.generatedLine) {\n        node.add(shiftNextLine());\n        lastGeneratedLine++;\n      }\n      if (lastGeneratedColumn < mapping.generatedColumn) {\n        nextLine = remainingLines[remainingLinesIndex] || \"\";\n        node.add(nextLine.substr(0, mapping.generatedColumn));\n        remainingLines[remainingLinesIndex] = nextLine.substr(mapping.generatedColumn);\n        lastGeneratedColumn = mapping.generatedColumn;\n      }\n      lastMapping = mapping;\n    }, this);\n    // We have processed all mappings.\n    if (remainingLinesIndex < remainingLines.length) {\n      if (lastMapping) {\n        // Associate the remaining code in the current line with \"lastMapping\"\n        addMappingWithCode(lastMapping, shiftNextLine());\n      }\n      // and add the remaining lines without any mapping\n      node.add(remainingLines.splice(remainingLinesIndex).join(\"\"));\n    }\n\n    // Copy sourcesContent into SourceNode\n    aSourceMapConsumer.sources.forEach(function(sourceFile) {\n      const content = aSourceMapConsumer.sourceContentFor(sourceFile);\n      if (content != null) {\n        if (aRelativePath != null) {\n          sourceFile = util.join(aRelativePath, sourceFile);\n        }\n        node.setSourceContent(sourceFile, content);\n      }\n    });\n\n    return node;\n\n    function addMappingWithCode(mapping, code) {\n      if (mapping === null || mapping.source === undefined) {\n        node.add(code);\n      } else {\n        const source = aRelativePath\n          ? util.join(aRelativePath, mapping.source)\n          : mapping.source;\n        node.add(new SourceNode(mapping.originalLine,\n                                mapping.originalColumn,\n                                source,\n                                code,\n                                mapping.name));\n      }\n    }\n  }\n\n  /**\n   * Add a chunk of generated JS to this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  add(aChunk) {\n    if (Array.isArray(aChunk)) {\n      aChunk.forEach(function(chunk) {\n        this.add(chunk);\n      }, this);\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      if (aChunk) {\n        this.children.push(aChunk);\n      }\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Add a chunk of generated JS to the beginning of this source node.\n   *\n   * @param aChunk A string snippet of generated JS code, another instance of\n   *        SourceNode, or an array where each member is one of those things.\n   */\n  prepend(aChunk) {\n    if (Array.isArray(aChunk)) {\n      for (let i = aChunk.length - 1; i >= 0; i--) {\n        this.prepend(aChunk[i]);\n      }\n    } else if (aChunk[isSourceNode] || typeof aChunk === \"string\") {\n      this.children.unshift(aChunk);\n    } else {\n      throw new TypeError(\n        \"Expected a SourceNode, string, or an array of SourceNodes and strings. Got \" + aChunk\n      );\n    }\n    return this;\n  }\n\n  /**\n   * Walk over the tree of JS snippets in this node and its children. The\n   * walking function is called once for each snippet of JS and is passed that\n   * snippet and the its original associated source's line/column location.\n   *\n   * @param aFn The traversal function.\n   */\n  walk(aFn) {\n    let chunk;\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      chunk = this.children[i];\n      if (chunk[isSourceNode]) {\n        chunk.walk(aFn);\n      } else if (chunk !== \"\") {\n        aFn(chunk, { source: this.source,\n                      line: this.line,\n                      column: this.column,\n                      name: this.name });\n      }\n    }\n  }\n\n  /**\n   * Like `String.prototype.join` except for SourceNodes. Inserts `aStr` between\n   * each of `this.children`.\n   *\n   * @param aSep The separator.\n   */\n  join(aSep) {\n    let newChildren;\n    let i;\n    const len = this.children.length;\n    if (len > 0) {\n      newChildren = [];\n      for (i = 0; i < len - 1; i++) {\n        newChildren.push(this.children[i]);\n        newChildren.push(aSep);\n      }\n      newChildren.push(this.children[i]);\n      this.children = newChildren;\n    }\n    return this;\n  }\n\n  /**\n   * Call String.prototype.replace on the very right-most source snippet. Useful\n   * for trimming whitespace from the end of a source node, etc.\n   *\n   * @param aPattern The pattern to replace.\n   * @param aReplacement The thing to replace the pattern with.\n   */\n  replaceRight(aPattern, aReplacement) {\n    const lastChild = this.children[this.children.length - 1];\n    if (lastChild[isSourceNode]) {\n      lastChild.replaceRight(aPattern, aReplacement);\n    } else if (typeof lastChild === \"string\") {\n      this.children[this.children.length - 1] = lastChild.replace(aPattern, aReplacement);\n    } else {\n      this.children.push(\"\".replace(aPattern, aReplacement));\n    }\n    return this;\n  }\n\n  /**\n   * Set the source content for a source file. This will be added to the SourceMapGenerator\n   * in the sourcesContent field.\n   *\n   * @param aSourceFile The filename of the source file\n   * @param aSourceContent The content of the source file\n   */\n  setSourceContent(aSourceFile, aSourceContent) {\n    this.sourceContents[util.toSetString(aSourceFile)] = aSourceContent;\n  }\n\n  /**\n   * Walk over the tree of SourceNodes. The walking function is called for each\n   * source file content and is passed the filename and source content.\n   *\n   * @param aFn The traversal function.\n   */\n  walkSourceContents(aFn) {\n    for (let i = 0, len = this.children.length; i < len; i++) {\n      if (this.children[i][isSourceNode]) {\n        this.children[i].walkSourceContents(aFn);\n      }\n    }\n\n    const sources = Object.keys(this.sourceContents);\n    for (let i = 0, len = sources.length; i < len; i++) {\n      aFn(util.fromSetString(sources[i]), this.sourceContents[sources[i]]);\n    }\n  }\n\n  /**\n   * Return the string representation of this source node. Walks over the tree\n   * and concatenates all the various snippets together to one string.\n   */\n  toString() {\n    let str = \"\";\n    this.walk(function(chunk) {\n      str += chunk;\n    });\n    return str;\n  }\n\n  /**\n   * Returns the string representation of this source node along with a source\n   * map.\n   */\n  toStringWithSourceMap(aArgs) {\n    const generated = {\n      code: \"\",\n      line: 1,\n      column: 0\n    };\n    const map = new SourceMapGenerator(aArgs);\n    let sourceMappingActive = false;\n    let lastOriginalSource = null;\n    let lastOriginalLine = null;\n    let lastOriginalColumn = null;\n    let lastOriginalName = null;\n    this.walk(function(chunk, original) {\n      generated.code += chunk;\n      if (original.source !== null\n          && original.line !== null\n          && original.column !== null) {\n        if (lastOriginalSource !== original.source\n          || lastOriginalLine !== original.line\n          || lastOriginalColumn !== original.column\n          || lastOriginalName !== original.name) {\n          map.addMapping({\n            source: original.source,\n            original: {\n              line: original.line,\n              column: original.column\n            },\n            generated: {\n              line: generated.line,\n              column: generated.column\n            },\n            name: original.name\n          });\n        }\n        lastOriginalSource = original.source;\n        lastOriginalLine = original.line;\n        lastOriginalColumn = original.column;\n        lastOriginalName = original.name;\n        sourceMappingActive = true;\n      } else if (sourceMappingActive) {\n        map.addMapping({\n          generated: {\n            line: generated.line,\n            column: generated.column\n          }\n        });\n        lastOriginalSource = null;\n        sourceMappingActive = false;\n      }\n      for (let idx = 0, length = chunk.length; idx < length; idx++) {\n        if (chunk.charCodeAt(idx) === NEWLINE_CODE) {\n          generated.line++;\n          generated.column = 0;\n          // Mappings end at eol\n          if (idx + 1 === length) {\n            lastOriginalSource = null;\n            sourceMappingActive = false;\n          } else if (sourceMappingActive) {\n            map.addMapping({\n              source: original.source,\n              original: {\n                line: original.line,\n                column: original.column\n              },\n              generated: {\n                line: generated.line,\n                column: generated.column\n              },\n              name: original.name\n            });\n          }\n        } else {\n          generated.column++;\n        }\n      }\n    });\n    this.walkSourceContents(function(sourceFile, sourceContent) {\n      map.setSourceContent(sourceFile, sourceContent);\n    });\n\n    return { code: generated.code, map };\n  }\n}\n\nexports.SourceNode = SourceNode;\n", "/*\n * Copyright 2009-2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE.txt or:\n * http://opensource.org/licenses/BSD-3-Clause\n */\nexports.SourceMapGenerator = require(\"./lib/source-map-generator\").SourceMapGenerator;\nexports.SourceMapConsumer = require(\"./lib/source-map-consumer\").SourceMapConsumer;\nexports.SourceNode = require(\"./lib/source-node\").SourceNode;\n"],
  "mappings": ";;;;;;;AAAA;AAAA;AAAA;AAOA,QAAM,eAAe,mEAAmE,MAAM,EAAE;AAKhG,YAAQ,SAAS,SAAS,QAAQ;AAChC,UAAI,KAAK,UAAU,SAAS,aAAa;AACvC,eAAO,aAAa,MAAM;AAE5B,YAAM,IAAI,UAAU,+BAA+B,MAAM;AAAA,IAC3D;AAAA;AAAA;;;ACjBA;AAAA;AAAA;AAqCA,QAAM,SAAS,kBAcT,iBAAiB,GAGjB,WAAW,KAAK,gBAGhB,gBAAgB,WAAW,GAG3B,uBAAuB;AAQ7B,aAAS,YAAY,QAAQ;AAC3B,aAAO,SAAS,KACV,CAAC,UAAW,KAAK,KAClB,UAAU,KAAK;AAAA,IACtB;AAoBA,YAAQ,SAAS,SAA0B,QAAQ;AACjD,UAAI,UAAU,IACV,OAEA,MAAM,YAAY,MAAM;AAE5B;AACE,gBAAQ,MAAM,eACd,SAAS,gBACL,MAAM,MAGR,SAAS,uBAEX,WAAW,OAAO,OAAO,KAAK;AAAA,aACvB,MAAM;AAEf,aAAO;AAAA,IACT;AAAA;AAAA;;;AC9GA;AAAA;AAAA;AAiBA,aAAS,OAAO,OAAO,OAAO,eAAe;AAC3C,UAAI,SAAS;AACX,eAAO,MAAM,KAAK;AACb,UAAI,UAAU,WAAW;AAC9B,eAAO;AAEP,YAAM,IAAI,MAAM,MAAM,QAAQ,2BAA2B;AAAA,IAE7D;AACA,YAAQ,SAAS;AAEjB,QAAM,YAAY,kEACZ,gBAAgB;AAEtB,aAAS,SAAS,MAAM;AACtB,UAAM,QAAQ,KAAK,MAAM,SAAS;AAClC,aAAK,QAGE;AAAA,QACL,QAAQ,MAAM,CAAC;AAAA,QACf,MAAM,MAAM,CAAC;AAAA,QACb,MAAM,MAAM,CAAC;AAAA,QACb,MAAM,MAAM,CAAC;AAAA,QACb,MAAM,MAAM,CAAC;AAAA,MACf,IARS;AAAA,IASX;AACA,YAAQ,WAAW;AAEnB,aAAS,YAAY,YAAY;AAC/B,UAAI,MAAM;AACV,aAAI,WAAW,WACb,OAAO,WAAW,SAAS,MAE7B,OAAO,MACH,WAAW,SACb,OAAO,WAAW,OAAO,MAEvB,WAAW,SACb,OAAO,WAAW,OAEhB,WAAW,SACb,OAAO,MAAM,WAAW,OAEtB,WAAW,SACb,OAAO,WAAW,OAEb;AAAA,IACT;AACA,YAAQ,cAAc;AAEtB,QAAM,oBAAoB;AAS1B,aAAS,WAAW,GAAG;AACrB,UAAM,QAAQ,CAAC;AAEf,aAAO,SAAS,OAAO;AACrB,iBAAS,IAAI,GAAG,IAAI,MAAM,QAAQ;AAChC,cAAI,MAAM,CAAC,EAAE,UAAU,OAAO;AAC5B,gBAAM,OAAO,MAAM,CAAC;AACpB,yBAAM,CAAC,IAAI,MAAM,CAAC,GAClB,MAAM,CAAC,IAAI,MACJ,MAAM,CAAC,EAAE;AAAA,UAClB;AAGF,YAAM,SAAS,EAAE,KAAK;AAEtB,qBAAM,QAAQ;AAAA,UACZ;AAAA,UACA;AAAA,QACF,CAAC,GAEG,MAAM,SAAS,qBACjB,MAAM,IAAI,GAGL;AAAA,MACT;AAAA,IACF;AAaA,QAAM,YAAY,WAAW,SAAmB,OAAO;AACrD,UAAI,OAAO,OACL,MAAM,SAAS,KAAK;AAC1B,UAAI,KAAK;AACP,YAAI,CAAC,IAAI;AACP,iBAAO;AAET,eAAO,IAAI;AAAA,MACb;AACA,UAAM,aAAa,QAAQ,WAAW,IAAI,GAIpC,QAAQ,CAAC,GACX,QAAQ,GACR,IAAI;AACR;AAGE,YAFA,QAAQ,GACR,IAAI,KAAK,QAAQ,KAAK,KAAK,GACvB,MAAM,IAAI;AACZ,gBAAM,KAAK,KAAK,MAAM,KAAK,CAAC;AAC5B;AAAA,QACF;AAEE,eADA,MAAM,KAAK,KAAK,MAAM,OAAO,CAAC,CAAC,GACxB,IAAI,KAAK,UAAU,KAAK,CAAC,MAAM;AACpC;AAKN,UAAI,KAAK;AACT,WAAK,IAAI,MAAM,SAAS,GAAG,KAAK,GAAG,KAAK;AACtC,YAAM,OAAO,MAAM,CAAC;AACpB,QAAI,SAAS,MACX,MAAM,OAAO,GAAG,CAAC,IACR,SAAS,OAClB,OACS,KAAK,MACV,SAAS,MAIX,MAAM,OAAO,IAAI,GAAG,EAAE,GACtB,KAAK,MAEL,MAAM,OAAO,GAAG,CAAC,GACjB;AAAA,MAGN;AAOA,aANA,OAAO,MAAM,KAAK,GAAG,GAEjB,SAAS,OACX,OAAO,aAAa,MAAM,MAGxB,OACF,IAAI,OAAO,MACJ,YAAY,GAAG,KAEjB;AAAA,IACT,CAAC;AACD,YAAQ,YAAY;AAkBpB,aAAS,KAAK,OAAO,OAAO;AAC1B,MAAI,UAAU,OACZ,QAAQ,MAEN,UAAU,OACZ,QAAQ;AAEV,UAAM,WAAW,SAAS,KAAK,GACzB,WAAW,SAAS,KAAK;AAM/B,UALI,aACF,QAAQ,SAAS,QAAQ,MAIvB,YAAY,CAAC,SAAS;AACxB,eAAI,aACF,SAAS,SAAS,SAAS,SAEtB,YAAY,QAAQ;AAG7B,UAAI,YAAY,MAAM,MAAM,aAAa;AACvC,eAAO;AAIT,UAAI,YAAY,CAAC,SAAS,QAAQ,CAAC,SAAS;AAC1C,wBAAS,OAAO,OACT,YAAY,QAAQ;AAG7B,UAAM,SAAS,MAAM,OAAO,CAAC,MAAM,MAC/B,QACA,UAAU,MAAM,QAAQ,QAAQ,EAAE,IAAI,MAAM,KAAK;AAErD,aAAI,YACF,SAAS,OAAO,QACT,YAAY,QAAQ,KAEtB;AAAA,IACT;AACA,YAAQ,OAAO;AAEf,YAAQ,aAAa,SAAS,OAAO;AACnC,aAAO,MAAM,OAAO,CAAC,MAAM,OAAO,UAAU,KAAK,KAAK;AAAA,IACxD;AAQA,aAAS,SAAS,OAAO,OAAO;AAC9B,MAAI,UAAU,OACZ,QAAQ,MAGV,QAAQ,MAAM,QAAQ,OAAO,EAAE;AAM/B,UAAI,QAAQ;AACZ,aAAO,MAAM,QAAQ,QAAQ,GAAG,MAAM,KAAG;AACvC,YAAM,QAAQ,MAAM,YAAY,GAAG;AASnC,YARI,QAAQ,MAOZ,QAAQ,MAAM,MAAM,GAAG,KAAK,GACxB,MAAM,MAAM,mBAAmB;AACjC,iBAAO;AAGT,UAAE;AAAA,MACJ;AAGA,aAAO,MAAM,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,MAAM,OAAO,MAAM,SAAS,CAAC;AAAA,IACrE;AACA,YAAQ,WAAW;AAEnB,QAAM,oBAAqB,WAAW;AAEpC,aAAO,EAAE,eADG,uBAAO,OAAO,IAAI;AAAA,IAEhC,EAAE;AAEF,aAAS,SAAS,GAAG;AACnB,aAAO;AAAA,IACT;AAWA,aAAS,YAAY,MAAM;AACzB,aAAI,cAAc,IAAI,IACb,MAAM,OAGR;AAAA,IACT;AACA,YAAQ,cAAc,oBAAoB,WAAW;AAErD,aAAS,cAAc,MAAM;AAC3B,aAAI,cAAc,IAAI,IACb,KAAK,MAAM,CAAC,IAGd;AAAA,IACT;AACA,YAAQ,gBAAgB,oBAAoB,WAAW;AAEvD,aAAS,cAAc,GAAG;AACxB,UAAI,CAAC;AACH,eAAO;AAGT,UAAM,SAAS,EAAE;AAOjB,UALI,SAAS,KAKT,EAAE,WAAW,SAAS,CAAC,MAAM,MAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,MAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,OAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,OAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,OAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,OAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,OAC7B,EAAE,WAAW,SAAS,CAAC,MAAM,MAC7B,EAAE,WAAW,SAAS,CAAC,MAAM;AAC/B,eAAO;AAIT,eAAS,IAAI,SAAS,IAAI,KAAK,GAAG;AAChC,YAAI,EAAE,WAAW,CAAC,MAAM;AACtB,iBAAO;AAIX,aAAO;AAAA,IACT;AAUA,aAAS,2BAA2B,UAAU,UAAU,qBAAqB;AAC3E,UAAI,MAAM,OAAO,SAAS,QAAQ,SAAS,MAAM;AAqBjD,aApBI,QAAQ,MAIZ,MAAM,SAAS,eAAe,SAAS,cACnC,QAAQ,OAIZ,MAAM,SAAS,iBAAiB,SAAS,gBACrC,QAAQ,KAAK,yBAIjB,MAAM,SAAS,kBAAkB,SAAS,iBACtC,QAAQ,OAIZ,MAAM,SAAS,gBAAgB,SAAS,eACpC,QAAQ,KACH,MAGF,OAAO,SAAS,MAAM,SAAS,IAAI;AAAA,IAC5C;AACA,YAAQ,6BAA6B;AAWrC,aAAS,oCAAoC,UAAU,UAAU,sBAAsB;AACrF,UAAI,MAAM,SAAS,gBAAgB,SAAS;AAqB5C,aApBI,QAAQ,MAIZ,MAAM,SAAS,kBAAkB,SAAS,iBACtC,QAAQ,KAAK,0BAIjB,MAAM,OAAO,SAAS,QAAQ,SAAS,MAAM,GACzC,QAAQ,OAIZ,MAAM,SAAS,eAAe,SAAS,cACnC,QAAQ,OAIZ,MAAM,SAAS,iBAAiB,SAAS,gBACrC,QAAQ,KACH,MAGF,OAAO,SAAS,MAAM,SAAS,IAAI;AAAA,IAC5C;AACA,YAAQ,sCAAsC;AAE9C,aAAS,OAAO,OAAO,OAAO;AAC5B,aAAI,UAAU,QACL,IAGL,UAAU,OACL,IAGL,UAAU,OACL,KAGL,QAAQ,QACH,IAGF;AAAA,IACT;AAMA,aAAS,oCAAoC,UAAU,UAAU;AAC/D,UAAI,MAAM,SAAS,gBAAgB,SAAS;AAqB5C,aApBI,QAAQ,MAIZ,MAAM,SAAS,kBAAkB,SAAS,iBACtC,QAAQ,OAIZ,MAAM,OAAO,SAAS,QAAQ,SAAS,MAAM,GACzC,QAAQ,OAIZ,MAAM,SAAS,eAAe,SAAS,cACnC,QAAQ,OAIZ,MAAM,SAAS,iBAAiB,SAAS,gBACrC,QAAQ,KACH,MAGF,OAAO,SAAS,MAAM,SAAS,IAAI;AAAA,IAC5C;AACA,YAAQ,sCAAsC;AAO9C,aAAS,oBAAoB,KAAK;AAChC,aAAO,KAAK,MAAM,IAAI,QAAQ,kBAAkB,EAAE,CAAC;AAAA,IACrD;AACA,YAAQ,sBAAsB;AAM9B,aAAS,iBAAiB,YAAY,WAAW,cAAc;AA8B7D,UA7BA,YAAY,aAAa,IAErB,eAEE,WAAW,WAAW,SAAS,CAAC,MAAM,OAAO,UAAU,CAAC,MAAM,QAChE,cAAc,MAOhB,YAAY,aAAa,YAiBvB,cAAc;AAChB,YAAM,SAAS,SAAS,YAAY;AACpC,YAAI,CAAC;AACH,gBAAM,IAAI,MAAM,kCAAkC;AAEpD,YAAI,OAAO,MAAM;AAEf,cAAM,QAAQ,OAAO,KAAK,YAAY,GAAG;AACzC,UAAI,SAAS,MACX,OAAO,OAAO,OAAO,KAAK,UAAU,GAAG,QAAQ,CAAC;AAAA,QAEpD;AACA,oBAAY,KAAK,YAAY,MAAM,GAAG,SAAS;AAAA,MACjD;AAEA,aAAO,UAAU,SAAS;AAAA,IAC5B;AACA,YAAQ,mBAAmB;AAAA;AAAA;;;ACjiB3B;AAAA;AAAA;AAaA,QAAM,WAAN,MAAM,UAAS;AAAA,MACb,cAAc;AACZ,aAAK,SAAS,CAAC,GACf,KAAK,OAAO,oBAAI,IAAI;AAAA,MACtB;AAAA;AAAA;AAAA;AAAA,MAKA,OAAO,UAAU,QAAQ,kBAAkB;AACzC,YAAM,MAAM,IAAI,UAAS;AACzB,iBAAS,IAAI,GAAG,MAAM,OAAO,QAAQ,IAAI,KAAK;AAC5C,cAAI,IAAI,OAAO,CAAC,GAAG,gBAAgB;AAErC,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,OAAO;AACL,eAAO,KAAK,KAAK;AAAA,MACnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,IAAI,MAAM,kBAAkB;AAC1B,YAAM,cAAc,KAAK,IAAI,IAAI,GAC3B,MAAM,KAAK,OAAO;AACxB,SAAI,CAAC,eAAe,qBAClB,KAAK,OAAO,KAAK,IAAI,GAElB,eACH,KAAK,KAAK,IAAI,MAAM,GAAG;AAAA,MAE3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,IAAI,MAAM;AACN,eAAO,KAAK,KAAK,IAAI,IAAI;AAAA,MAC7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,QAAQ,MAAM;AACZ,YAAM,MAAM,KAAK,KAAK,IAAI,IAAI;AAC9B,YAAI,OAAO;AACP,iBAAO;AAEX,cAAM,IAAI,MAAM,MAAM,OAAO,sBAAsB;AAAA,MACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,GAAG,MAAM;AACP,YAAI,QAAQ,KAAK,OAAO,KAAK,OAAO;AAClC,iBAAO,KAAK,OAAO,IAAI;AAEzB,cAAM,IAAI,MAAM,2BAA2B,IAAI;AAAA,MACjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,UAAU;AACR,eAAO,KAAK,OAAO,MAAM;AAAA,MAC3B;AAAA,IACF;AACA,YAAQ,WAAW;AAAA;AAAA;;;ACnGnB;AAAA;AAAA;AAOA,QAAM,OAAO;AAMb,aAAS,uBAAuB,UAAU,UAAU;AAElD,UAAM,QAAQ,SAAS,eACjB,QAAQ,SAAS,eACjB,UAAU,SAAS,iBACnB,UAAU,SAAS;AACzB,aAAO,QAAQ,SAAS,SAAS,SAAS,WAAW,WAC9C,KAAK,oCAAoC,UAAU,QAAQ,KAAK;AAAA,IACzE;AAOA,QAAM,cAAN,MAAkB;AAAA,MAChB,cAAc;AACZ,aAAK,SAAS,CAAC,GACf,KAAK,UAAU,IAEf,KAAK,QAAQ,EAAC,eAAe,IAAI,iBAAiB,EAAC;AAAA,MACrD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,gBAAgB,WAAW,UAAU;AACnC,aAAK,OAAO,QAAQ,WAAW,QAAQ;AAAA,MACzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,IAAI,UAAU;AACZ,QAAI,uBAAuB,KAAK,OAAO,QAAQ,KAC7C,KAAK,QAAQ,UACb,KAAK,OAAO,KAAK,QAAQ,MAEzB,KAAK,UAAU,IACf,KAAK,OAAO,KAAK,QAAQ;AAAA,MAE7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,UAAU;AACR,eAAK,KAAK,YACR,KAAK,OAAO,KAAK,KAAK,mCAAmC,GACzD,KAAK,UAAU,KAEV,KAAK;AAAA,MACd;AAAA,IACF;AAEA,YAAQ,cAAc;AAAA;AAAA;;;AC/EtB;AAAA;AAAA;AAOA,QAAM,YAAY,sBACZ,OAAO,gBACP,WAAW,oBAAuB,UAClC,cAAc,uBAA0B,aAUxC,qBAAN,MAAM,oBAAmB;AAAA,MACvB,YAAY,OAAO;AACjB,QAAK,UACH,QAAQ,CAAC,IAEX,KAAK,QAAQ,KAAK,OAAO,OAAO,QAAQ,IAAI,GAC5C,KAAK,cAAc,KAAK,OAAO,OAAO,cAAc,IAAI,GACxD,KAAK,kBAAkB,KAAK,OAAO,OAAO,kBAAkB,EAAK,GACjE,KAAK,WAAW,IAAI,SAAS,GAC7B,KAAK,SAAS,IAAI,SAAS,GAC3B,KAAK,YAAY,IAAI,YAAY,GACjC,KAAK,mBAAmB;AAAA,MAC1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,OAAO,cAAc,oBAAoB;AACvC,YAAM,aAAa,mBAAmB,YAChC,YAAY,IAAI,oBAAmB;AAAA,UACvC,MAAM,mBAAmB;AAAA,UACzB;AAAA,QACF,CAAC;AACD,kCAAmB,YAAY,SAAS,SAAS;AAC/C,cAAM,aAAa;AAAA,YACjB,WAAW;AAAA,cACT,MAAM,QAAQ;AAAA,cACd,QAAQ,QAAQ;AAAA,YAClB;AAAA,UACF;AAEA,UAAI,QAAQ,UAAU,SACpB,WAAW,SAAS,QAAQ,QACxB,cAAc,SAChB,WAAW,SAAS,KAAK,SAAS,YAAY,WAAW,MAAM,IAGjE,WAAW,WAAW;AAAA,YACpB,MAAM,QAAQ;AAAA,YACd,QAAQ,QAAQ;AAAA,UAClB,GAEI,QAAQ,QAAQ,SAClB,WAAW,OAAO,QAAQ,QAI9B,UAAU,WAAW,UAAU;AAAA,QACjC,CAAC,GACD,mBAAmB,QAAQ,QAAQ,SAAS,YAAY;AACtD,cAAI,iBAAiB;AACrB,UAAI,eAAe,SACjB,iBAAiB,KAAK,SAAS,YAAY,UAAU,IAGlD,UAAU,SAAS,IAAI,cAAc,KACxC,UAAU,SAAS,IAAI,cAAc;AAGvC,cAAM,UAAU,mBAAmB,iBAAiB,UAAU;AAC9D,UAAI,WAAW,QACb,UAAU,iBAAiB,YAAY,OAAO;AAAA,QAElD,CAAC,GACM;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAYA,WAAW,OAAO;AAChB,YAAM,YAAY,KAAK,OAAO,OAAO,WAAW,GAC1C,WAAW,KAAK,OAAO,OAAO,YAAY,IAAI,GAChD,SAAS,KAAK,OAAO,OAAO,UAAU,IAAI,GAC1C,OAAO,KAAK,OAAO,OAAO,QAAQ,IAAI;AAE1C,QAAK,KAAK,mBACR,KAAK,iBAAiB,WAAW,UAAU,QAAQ,IAAI,GAGrD,UAAU,SACZ,SAAS,OAAO,MAAM,GACjB,KAAK,SAAS,IAAI,MAAM,KAC3B,KAAK,SAAS,IAAI,MAAM,IAIxB,QAAQ,SACV,OAAO,OAAO,IAAI,GACb,KAAK,OAAO,IAAI,IAAI,KACvB,KAAK,OAAO,IAAI,IAAI,IAIxB,KAAK,UAAU,IAAI;AAAA,UACjB,eAAe,UAAU;AAAA,UACzB,iBAAiB,UAAU;AAAA,UAC3B,cAAc,YAAY,QAAQ,SAAS;AAAA,UAC3C,gBAAgB,YAAY,QAAQ,SAAS;AAAA,UAC7C;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA,MAKA,iBAAiB,aAAa,gBAAgB;AAC5C,YAAI,SAAS;AACb,QAAI,KAAK,eAAe,SACtB,SAAS,KAAK,SAAS,KAAK,aAAa,MAAM,IAG7C,kBAAkB,QAGf,KAAK,qBACR,KAAK,mBAAmB,uBAAO,OAAO,IAAI,IAE5C,KAAK,iBAAiB,KAAK,YAAY,MAAM,CAAC,IAAI,kBACzC,KAAK,qBAGd,OAAO,KAAK,iBAAiB,KAAK,YAAY,MAAM,CAAC,GACjD,OAAO,KAAK,KAAK,gBAAgB,EAAE,WAAW,MAChD,KAAK,mBAAmB;AAAA,MAG9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBA,eAAe,oBAAoB,aAAa,gBAAgB;AAC9D,YAAI,aAAa;AAEjB,YAAI,eAAe,MAAM;AACvB,cAAI,mBAAmB,QAAQ;AAC7B,kBAAM,IAAI;AAAA,cACR;AAAA,YAEF;AAEF,uBAAa,mBAAmB;AAAA,QAClC;AACA,YAAM,aAAa,KAAK;AAExB,QAAI,cAAc,SAChB,aAAa,KAAK,SAAS,YAAY,UAAU;AAInD,YAAM,aAAa,KAAK,UAAU,QAAQ,EAAE,SAAS,IACjD,IAAI,SAAS,IACb,KAAK,UACH,WAAW,IAAI,SAAS;AAG9B,aAAK,UAAU,gBAAgB,SAAS,SAAS;AAC/C,cAAI,QAAQ,WAAW,cAAc,QAAQ,gBAAgB,MAAM;AAEjE,gBAAM,WAAW,mBAAmB,oBAAoB;AAAA,cACtD,MAAM,QAAQ;AAAA,cACd,QAAQ,QAAQ;AAAA,YAClB,CAAC;AACD,YAAI,SAAS,UAAU,SAErB,QAAQ,SAAS,SAAS,QACtB,kBAAkB,SACpB,QAAQ,SAAS,KAAK,KAAK,gBAAgB,QAAQ,MAAM,IAEvD,cAAc,SAChB,QAAQ,SAAS,KAAK,SAAS,YAAY,QAAQ,MAAM,IAE3D,QAAQ,eAAe,SAAS,MAChC,QAAQ,iBAAiB,SAAS,QAC9B,SAAS,QAAQ,SACnB,QAAQ,OAAO,SAAS;AAAA,UAG9B;AAEA,cAAM,SAAS,QAAQ;AACvB,UAAI,UAAU,QAAQ,CAAC,WAAW,IAAI,MAAM,KAC1C,WAAW,IAAI,MAAM;AAGvB,cAAM,OAAO,QAAQ;AACrB,UAAI,QAAQ,QAAQ,CAAC,SAAS,IAAI,IAAI,KACpC,SAAS,IAAI,IAAI;AAAA,QAGrB,GAAG,IAAI,GACP,KAAK,WAAW,YAChB,KAAK,SAAS,UAGd,mBAAmB,QAAQ,QAAQ,SAAS,SAAS;AACnD,cAAM,UAAU,mBAAmB,iBAAiB,OAAO;AAC3D,UAAI,WAAW,SACT,kBAAkB,SACpB,UAAU,KAAK,KAAK,gBAAgB,OAAO,IAEzC,cAAc,SAChB,UAAU,KAAK,SAAS,YAAY,OAAO,IAE7C,KAAK,iBAAiB,SAAS,OAAO;AAAA,QAE1C,GAAG,IAAI;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAaA,iBAAiB,YAAY,WAAW,SAAS,OAAO;AAKtD,YAAI,aAAa,OAAO,UAAU,QAAS,YAAY,OAAO,UAAU,UAAW;AAC/E,gBAAM,IAAI;AAAA,YACN;AAAA,UAGJ;AAGJ,YAAI,gBAAc,UAAU,cAAc,YAAY,cAC/C,WAAW,OAAO,KAAK,WAAW,UAAU,KAC5C,CAAC,aAAa,CAAC,WAAW,CAAC;AAG3B,cAAI,gBAAc,UAAU,cAAc,YAAY,cACjD,aAAa,UAAU,aAAa,YAAY,aAChD,WAAW,OAAO,KAAK,WAAW,UAAU,KAC5C,UAAU,OAAO,KAAK,UAAU,UAAU,KAC1C;AAIV,kBAAM,IAAI,MAAM,sBAAsB,KAAK,UAAU;AAAA,cACnD,WAAW;AAAA,cACX,QAAQ;AAAA,cACR,UAAU;AAAA,cACV,MAAM;AAAA,YACR,CAAC,CAAC;AAAA;AAAA,MAEN;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,qBAAqB;AACnB,YAAI,0BAA0B,GAC1B,wBAAwB,GACxB,yBAAyB,GACzB,uBAAuB,GACvB,eAAe,GACf,iBAAiB,GACjB,SAAS,IACT,MACA,SACA,SACA,WAEE,WAAW,KAAK,UAAU,QAAQ;AACxC,iBAAS,IAAI,GAAG,MAAM,SAAS,QAAQ,IAAI,KAAK,KAAK;AAInD,cAHA,UAAU,SAAS,CAAC,GACpB,OAAO,IAEH,QAAQ,kBAAkB;AAE5B,iBADA,0BAA0B,GACnB,QAAQ,kBAAkB;AAC/B,sBAAQ,KACR;AAAA,mBAEO,IAAI,GAAG;AAChB,gBAAI,CAAC,KAAK,oCAAoC,SAAS,SAAS,IAAI,CAAC,CAAC;AACpE;AAEF,oBAAQ;AAAA,UACV;AAEA,kBAAQ,UAAU,OAAO,QAAQ,kBACJ,uBAAuB,GACpD,0BAA0B,QAAQ,iBAE9B,QAAQ,UAAU,SACpB,YAAY,KAAK,SAAS,QAAQ,QAAQ,MAAM,GAChD,QAAQ,UAAU,OAAO,YAAY,cAAc,GACnD,iBAAiB,WAGjB,QAAQ,UAAU,OAAO,QAAQ,eAAe,IACnB,oBAAoB,GACjD,uBAAuB,QAAQ,eAAe,GAE9C,QAAQ,UAAU,OAAO,QAAQ,iBACJ,sBAAsB,GACnD,yBAAyB,QAAQ,gBAE7B,QAAQ,QAAQ,SAClB,UAAU,KAAK,OAAO,QAAQ,QAAQ,IAAI,GAC1C,QAAQ,UAAU,OAAO,UAAU,YAAY,GAC/C,eAAe,WAInB,UAAU;AAAA,QACZ;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,wBAAwB,UAAU,aAAa;AAC7C,eAAO,SAAS,IAAI,SAAS,QAAQ;AACnC,cAAI,CAAC,KAAK;AACR,mBAAO;AAET,UAAI,eAAe,SACjB,SAAS,KAAK,SAAS,aAAa,MAAM;AAE5C,cAAM,MAAM,KAAK,YAAY,MAAM;AACnC,iBAAO,OAAO,UAAU,eAAe,KAAK,KAAK,kBAAkB,GAAG,IAClE,KAAK,iBAAiB,GAAG,IACzB;AAAA,QACN,GAAG,IAAI;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAKA,SAAS;AACP,YAAM,MAAM;AAAA,UACV,SAAS,KAAK;AAAA,UACd,SAAS,KAAK,SAAS,QAAQ;AAAA,UAC/B,OAAO,KAAK,OAAO,QAAQ;AAAA,UAC3B,UAAU,KAAK,mBAAmB;AAAA,QACpC;AACA,eAAI,KAAK,SAAS,SAChB,IAAI,OAAO,KAAK,QAEd,KAAK,eAAe,SACtB,IAAI,aAAa,KAAK,cAEpB,KAAK,qBACP,IAAI,iBAAiB,KAAK,wBAAwB,IAAI,SAAS,IAAI,UAAU,IAGxE;AAAA,MACT;AAAA;AAAA;AAAA;AAAA,MAKA,WAAW;AACT,eAAO,KAAK,UAAU,KAAK,OAAO,CAAC;AAAA,MACrC;AAAA,IACF;AAEA,uBAAmB,UAAU,WAAW;AACxC,YAAQ,qBAAqB;AAAA;AAAA;;;AC5Z7B;AAAA;AAAA;AAOA,YAAQ,uBAAuB;AAC/B,YAAQ,oBAAoB;AAe5B,aAAS,gBAAgB,MAAM,OAAO,SAAS,WAAW,UAAU,OAAO;AAUzE,UAAM,MAAM,KAAK,OAAO,QAAQ,QAAQ,CAAC,IAAI,MACvC,MAAM,SAAS,SAAS,UAAU,GAAG,GAAG,EAAI;AAClD,aAAI,QAAQ,IAEH,MACE,MAAM,IAEX,QAAQ,MAAM,IAET,gBAAgB,KAAK,OAAO,SAAS,WAAW,UAAU,KAAK,IAKpE,SAAS,QAAQ,oBACZ,QAAQ,UAAU,SAAS,QAAQ,KAErC,MAIL,MAAM,OAAO,IAER,gBAAgB,MAAM,KAAK,SAAS,WAAW,UAAU,KAAK,IAInE,SAAS,QAAQ,oBACZ,MAEF,OAAO,IAAI,KAAK;AAAA,IACzB;AAoBA,YAAQ,SAAS,SAAgB,SAAS,WAAW,UAAU,OAAO;AACpE,UAAI,UAAU,WAAW;AACvB,eAAO;AAGT,UAAI,QAAQ;AAAA,QAAgB;AAAA,QAAI,UAAU;AAAA,QAAQ;AAAA,QAAS;AAAA,QAC/B;AAAA,QAAU,SAAS,QAAQ;AAAA,MAAoB;AAC3E,UAAI,QAAQ;AACV,eAAO;AAMT,aAAO,QAAQ,KAAK,KACd,SAAS,UAAU,KAAK,GAAG,UAAU,QAAQ,CAAC,GAAG,EAAI,MAAM;AAG/D,UAAE;AAGJ,aAAO;AAAA,IACT;AAAA;AAAA;;;AC1GA;AAAA;AAAA;AACA,QAAM,uBAAwB,WAAW;AAErC,aAAQ,OAAO,SAAW,OAAiB,SAAS;AAAA,IACxD,EAAG,KAAK;AAER,QAAI,sBAAsB;AAGxB,UAAI,eAAe;AAEnB,aAAO,UAAU,WAAoB;AACnC,YAAI,OAAO,gBAAiB;AAC1B,iBAAO,MAAM,YAAY,EACtB,KAAK,cAAY,SAAS,YAAY,CAAC;AAE5C,YAAI,wBAAwB;AAC1B,iBAAO,QAAQ,QAAQ,YAAY;AAErC,cAAM,IAAI,MAAM,mLAGgC;AAAA,MAClD,GAEA,OAAO,QAAQ,aAAa,WAAS,eAAe;AAAA,IACtD,OAAO;AAEL,UAAM,KAAK,UAAQ,IAAI,GACjB,OAAO,UAAQ,MAAM;AAE3B,aAAO,UAAU,WAAoB;AACnC,eAAO,IAAI,QAAQ,CAAC,SAAS,WAAW;AACtC,cAAM,WAAW,KAAK,KAAK,WAAW,eAAe;AACrD,aAAG,SAAS,UAAU,MAAM,CAAC,OAAO,SAAS;AAC3C,gBAAI,OAAO;AACT,qBAAO,KAAK;AACZ;AAAA,YACF;AAEA,oBAAQ,KAAK,MAAM;AAAA,UACrB,CAAC;AAAA,QACH,CAAC;AAAA,MACH,GAEA,OAAO,QAAQ,aAAa,OAAK;AAC/B,gBAAQ,MAAM,iEAAiE;AAAA,MACjF;AAAA,IACF;AAAA;AAAA;;;AChDA;AAAA;AAAA;AAAA,QAAM,WAAW;AAKjB,aAAS,UAAU;AACjB,WAAK,gBAAgB,GACrB,KAAK,kBAAkB,GACvB,KAAK,sBAAsB,MAC3B,KAAK,SAAS,MACd,KAAK,eAAe,MACpB,KAAK,iBAAiB,MACtB,KAAK,OAAO;AAAA,IACd;AAEA,QAAI,aAAa;AAEjB,WAAO,UAAU,WAAgB;AAC/B,UAAI;AACF,eAAO;AAGT,UAAM,gBAAgB,CAAC;AAEvB,0BAAa,SAAS,EAAE,KAAK,YAClB,YAAY,YAAY,QAAQ;AAAA,QACrC,KAAK;AAAA,UACH,iBACE,eACA,iBAEA,wBACA,qBAEA,aACA,QACA,cACA,gBAEA,SACA,MACA;AACA,gBAAM,UAAU,IAAI,QAAQ;AAE5B,oBAAQ,gBAAgB,gBAAgB,GACxC,QAAQ,kBAAkB,iBAEtB,2BAEF,QAAQ,sBAAsB,sBAAsB,IAGlD,gBACF,QAAQ,SAAS,QAEjB,QAAQ,eAAe,eAAe,GACtC,QAAQ,iBAAiB,gBAErB,YACF,QAAQ,OAAO,QAInB,cAAc,cAAc,SAAS,CAAC,EAAE,OAAO;AAAA,UACjD;AAAA,UAEA,oCAAoC;AAAE,oBAAQ,KAAK,6BAA6B;AAAA,UAAG;AAAA,UACnF,kCAAkC;AAAE,oBAAQ,QAAQ,6BAA6B;AAAA,UAAG;AAAA,UAEpF,6BAA6B;AAAE,oBAAQ,KAAK,sBAAsB;AAAA,UAAG;AAAA,UACrE,2BAA2B;AAAE,oBAAQ,QAAQ,sBAAsB;AAAA,UAAG;AAAA,UAEtE,+BAA+B;AAAE,oBAAQ,KAAK,wBAAwB;AAAA,UAAG;AAAA,UACzE,6BAA6B;AAAE,oBAAQ,QAAQ,wBAAwB;AAAA,UAAG;AAAA,UAE1E,8BAA8B;AAAE,oBAAQ,KAAK,uBAAuB;AAAA,UAAG;AAAA,UACvE,4BAA4B;AAAE,oBAAQ,QAAQ,uBAAuB;AAAA,UAAG;AAAA,UAExE,uBAAuB;AAAE,oBAAQ,KAAK,gBAAgB;AAAA,UAAG;AAAA,UACzD,qBAAqB;AAAE,oBAAQ,QAAQ,gBAAgB;AAAA,UAAG;AAAA,UAE1D,mCAAmC;AAAE,oBAAQ,KAAK,4BAA4B;AAAA,UAAG;AAAA,UACjF,iCAAiC;AAAE,oBAAQ,QAAQ,4BAA4B;AAAA,UAAG;AAAA,UAElF,kCAAkC;AAAE,oBAAQ,KAAK,2BAA2B;AAAA,UAAG;AAAA,UAC/E,gCAAgC;AAAE,oBAAQ,QAAQ,2BAA2B;AAAA,UAAG;AAAA,QAClF;AAAA,MACF,CAAC,CACJ,EAAE,KAAK,WACC;AAAA,QACL,SAAS,KAAK,SAAS;AAAA,QACvB,qBAAqB,CAAC,iBAAiB,MAAM;AAC3C,wBAAc,KAAK,eAAe;AAClC,cAAI;AACF,cAAE;AAAA,UACJ,UAAE;AACA,0BAAc,IAAI;AAAA,UACpB;AAAA,QACF;AAAA,MACF,EACD,EAAE,KAAK,MAAM,OAAK;AACjB,2BAAa,MACP;AAAA,MACR,CAAC,GAEM;AAAA,IACT;AAAA;AAAA;;;AC1GA;AAAA;AAAA;AAOA,QAAM,OAAO,gBACP,eAAe,yBACf,WAAW,oBAAuB,UAClC,YAAY,sBACZ,WAAW,qBACX,OAAO,gBAEP,WAAW,OAAO,aAAa,GAE/B,oBAAN,MAAM,mBAAkB;AAAA,MACtB,YAAY,YAAY,eAAe;AAIrC,eAAI,cAAc,WACT,QAAQ,QAAQ,IAAI,IAGtB,SAAS,YAAY,aAAa;AAAA,MAC3C;AAAA,MAEA,OAAO,WAAW,MAAM;AACtB,iBAAS,WAAW,KAAK,mBAAmB,CAAC;AAAA,MAC/C;AAAA,MAEA,OAAO,cAAc,YAAY,eAAe;AAC9C,eAAO,YAAY,YAAY,aAAa;AAAA,MAC9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAgCA,aAAa,KAAK,cAAc,cAAc,GAAG;AAC/C,YAAM,WAAW,MAAM,IAAI,mBAAkB,cAAc,YAAY;AACvE,YAAI;AACF,iBAAO,MAAM,EAAE,QAAQ;AAAA,QACzB,UAAE;AACA,mBAAS,QAAQ;AAAA,QACnB;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,eAAe,MAAM,aAAa;AAChC,cAAM,IAAI,MAAM,0CAA0C;AAAA,MAC5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAkBA,YAAY,WAAW,UAAU,QAAQ;AACvC,cAAM,IAAI,MAAM,uCAAuC;AAAA,MACzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAwBA,yBAAyB,OAAO;AAC9B,cAAM,IAAI,MAAM,oDAAoD;AAAA,MACtE;AAAA,MAEA,UAAU;AACR,cAAM,IAAI,MAAM,mCAAmC;AAAA,MACrD;AAAA,IACF;AAKA,sBAAkB,UAAU,WAAW;AACvC,sBAAkB,kBAAkB;AACpC,sBAAkB,iBAAiB;AAEnC,sBAAkB,uBAAuB;AACzC,sBAAkB,oBAAoB;AAEtC,YAAQ,oBAAoB;AAoC5B,QAAM,yBAAN,MAAM,gCAA+B,kBAAkB;AAAA,MACrD,YAAY,YAAY,eAAe;AACrC,eAAO,MAAM,QAAQ,EAAE,KAAK,UAAQ;AAClC,cAAI,YAAY;AAChB,UAAI,OAAO,cAAe,aACxB,YAAY,KAAK,oBAAoB,UAAU;AAGjD,cAAM,UAAU,KAAK,OAAO,WAAW,SAAS,GAC5C,UAAU,KAAK,OAAO,WAAW,SAAS,GAGxC,QAAQ,KAAK,OAAO,WAAW,SAAS,CAAC,CAAC,GAC5C,aAAa,KAAK,OAAO,WAAW,cAAc,IAAI,GACpD,iBAAiB,KAAK,OAAO,WAAW,kBAAkB,IAAI,GAC9D,WAAW,KAAK,OAAO,WAAW,UAAU,GAC5C,OAAO,KAAK,OAAO,WAAW,QAAQ,IAAI;AAIhD,cAAI,WAAW,KAAK;AAClB,kBAAM,IAAI,MAAM,0BAA0B,OAAO;AAGnD,iBAAI,eACF,aAAa,KAAK,UAAU,UAAU,IAGxC,UAAU,QACP,IAAI,MAAM,EAIV,IAAI,KAAK,SAAS,EAKlB,IAAI,SAAS,QAAQ;AACpB,mBAAO,cAAc,KAAK,WAAW,UAAU,KAAK,KAAK,WAAW,MAAM,IACtE,KAAK,SAAS,YAAY,MAAM,IAChC;AAAA,UACN,CAAC,GAMH,KAAK,SAAS,SAAS,UAAU,MAAM,IAAI,MAAM,GAAG,EAAI,GACxD,KAAK,WAAW,SAAS,UAAU,SAAS,EAAI,GAEhD,KAAK,mBAAmB,KAAK,SAAS,QAAQ,EAAE,IAAI,SAAS,GAAG;AAC9D,mBAAO,KAAK,iBAAiB,YAAY,GAAG,aAAa;AAAA,UAC3D,CAAC,GAED,KAAK,aAAa,YAClB,KAAK,iBAAiB,gBACtB,KAAK,YAAY,UACjB,KAAK,gBAAgB,eACrB,KAAK,OAAO,MAEZ,KAAK,uBAAuB,IAC5B,KAAK,eAAe,GACpB,KAAK,QAAQ,MAEN,KAAK,EAAE,KAAK,QACjB,KAAK,QAAQ,GACN,KACR;AAAA,QACH,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,iBAAiB,SAAS;AACxB,YAAI,iBAAiB;AAKrB,YAJI,KAAK,cAAc,SACrB,iBAAiB,KAAK,SAAS,KAAK,YAAY,cAAc,IAG5D,KAAK,SAAS,IAAI,cAAc;AAClC,iBAAO,KAAK,SAAS,QAAQ,cAAc;AAK7C,iBAAS,IAAI,GAAG,IAAI,KAAK,iBAAiB,QAAQ,EAAE;AAClD,cAAI,KAAK,iBAAiB,CAAC,KAAK;AAC9B,mBAAO;AAIX,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAWA,OAAO,cAAc,YAAY,eAAe;AAC9C,eAAO,IAAI,wBAAuB,WAAW,SAAS,CAAC;AAAA,MACzD;AAAA,MAEA,IAAI,UAAU;AACZ,eAAO,KAAK,iBAAiB,MAAM;AAAA,MACrC;AAAA,MAEA,kBAAkB;AAChB,eAAI,KAAK,iBAAiB,KACxB,KAAK,eAAe,KAAK,WAAW,KAAK,UAAU,GAG9C,KAAK;AAAA,MACd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,eAAe,MAAM,aAAa;AAChC,YAAM,OAAO,KAAK,QAEZ,iBAAiB,KAAK,MAAM,QAAQ,kBAAkB,IAAI,GAC1D,cAAc,IAAI,WAAW,KAAK,MAAM,QAAQ,OAAO,QAAQ,gBAAgB,IAAI;AACzF,iBAAS,IAAI,GAAG,IAAI,MAAM;AACxB,sBAAY,CAAC,IAAI,KAAK,WAAW,CAAC;AAGpC,YAAM,cAAc,KAAK,MAAM,QAAQ,eAAe,cAAc;AAEpE,YAAI,CAAC,aAAa;AAChB,cAAM,QAAQ,KAAK,MAAM,QAAQ,eAAe,GAC5C,MAAM,gCAAgC,KAAK;AAG/C,kBAAQ,OAAO;AAAA,YACb,KAAK;AACH,qBAAO;AACP;AAAA,YACF,KAAK;AACH,qBAAO;AACP;AAAA,YACF,KAAK;AACH,qBAAO;AACP;AAAA,YACF,KAAK;AACH,qBAAO;AACP;AAAA,YACF;AACE,qBAAO;AACP;AAAA,UACJ;AAEA,gBAAM,IAAI,MAAM,GAAG;AAAA,QACrB;AAEA,aAAK,eAAe;AAAA,MACtB;AAAA,MAEA,YAAY,WAAW,UAAU,QAAQ;AACvC,YAAM,UAAU,YAAY,MACtB,QAAQ,UAAU,kBAAkB,iBACpC,aAAa,KAAK;AAExB,aAAK,MAAM;AAAA,UACT,aAAW;AACT,YAAI,QAAQ,WAAW,SACrB,QAAQ,SAAS,KAAK,SAAS,GAAG,QAAQ,MAAM,GAChD,QAAQ,SAAS,KAAK,iBAAiB,YAAY,QAAQ,QAAQ,KAAK,aAAa,GAEjF,QAAQ,SAAS,SACnB,QAAQ,OAAO,KAAK,OAAO,GAAG,QAAQ,IAAI,KAI9C,UAAU,KAAK,SAAS,OAAO;AAAA,UACjC;AAAA,UACA,MAAM;AACJ,oBAAQ,OAAO;AAAA,cACf,KAAK,kBAAkB;AACrB,qBAAK,MAAM,QAAQ,sBAAsB,KAAK,gBAAgB,CAAC;AAC/D;AAAA,cACF,KAAK,kBAAkB;AACrB,qBAAK,MAAM,QAAQ,qBAAqB,KAAK,gBAAgB,CAAC;AAC9D;AAAA,cACF;AACE,sBAAM,IAAI,MAAM,6BAA6B;AAAA,YAC/C;AAAA,UACF;AAAA,QACF;AAAA,MACF;AAAA,MAEA,yBAAyB,OAAO;AAC9B,YAAI,SAAS,KAAK,OAAO,OAAO,QAAQ,GAClC,eAAe,KAAK,OAAO,OAAO,MAAM,GACxC,iBAAiB,MAAM,UAAU;AAGvC,YADA,SAAS,KAAK,iBAAiB,MAAM,GACjC,SAAS;AACX,iBAAO,CAAC;AAGV,YAAI,eAAe;AACjB,gBAAM,IAAI,MAAM,2BAA2B;AAG7C,YAAI,iBAAiB;AACnB,gBAAM,IAAI,MAAM,6BAA6B;AAG/C,YAAM,WAAW,CAAC;AAElB,oBAAK,MAAM;AAAA,UACT,OAAK;AACH,gBAAI,aAAa,EAAE;AACnB,YAAI,KAAK,wBAAwB,eAAe,SAC9C,aAAa,QAEf,SAAS,KAAK;AAAA,cACZ,MAAM,EAAE;AAAA,cACR,QAAQ,EAAE;AAAA,cACV;AAAA,YACF,CAAC;AAAA,UACH;AAAA,UAAG,MAAM;AACP,iBAAK,MAAM,QAAQ;AAAA,cACjB,KAAK,gBAAgB;AAAA,cACrB;AAAA,cACA,eAAe;AAAA,cACf,YAAY;AAAA,cACZ;AAAA,YACF;AAAA,UACF;AAAA,QACF,GAEO;AAAA,MACT;AAAA,MAEA,UAAU;AACR,QAAI,KAAK,iBAAiB,MACxB,KAAK,MAAM,QAAQ,cAAc,KAAK,YAAY,GAClD,KAAK,eAAe;AAAA,MAExB;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,qBAAqB;AACnB,QAAI,KAAK,yBAIT,KAAK,MAAM,QAAQ,qBAAqB,KAAK,gBAAgB,CAAC,GAC9D,KAAK,uBAAuB;AAAA,MAC9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA0BA,oBAAoB,OAAO;AACzB,YAAM,SAAS;AAAA,UACb,eAAe,KAAK,OAAO,OAAO,MAAM;AAAA,UACxC,iBAAiB,KAAK,OAAO,OAAO,QAAQ;AAAA,QAC9C;AAEA,YAAI,OAAO,gBAAgB;AACzB,gBAAM,IAAI,MAAM,2BAA2B;AAG7C,YAAI,OAAO,kBAAkB;AAC3B,gBAAM,IAAI,MAAM,6BAA6B;AAG/C,YAAI,OAAO,KAAK,OAAO,OAAO,QAAQ,kBAAkB,oBAAoB;AAC5E,QAAI,QAAQ,SACV,OAAO,kBAAkB;AAG3B,YAAI;AAUJ,YATA,KAAK,MAAM,oBAAoB,OAAK,UAAU,GAAG,MAAM;AACrD,eAAK,MAAM,QAAQ;AAAA,YACjB,KAAK,gBAAgB;AAAA,YACrB,OAAO,gBAAgB;AAAA,YACvB,OAAO;AAAA,YACP;AAAA,UACF;AAAA,QACF,CAAC,GAEG,WACE,QAAQ,kBAAkB,OAAO,eAAe;AAClD,cAAI,SAAS,KAAK,OAAO,SAAS,UAAU,IAAI;AAChD,UAAI,WAAW,SACb,SAAS,KAAK,SAAS,GAAG,MAAM,GAChC,SAAS,KAAK,iBAAiB,KAAK,YAAY,QAAQ,KAAK,aAAa;AAG5E,cAAI,OAAO,KAAK,OAAO,SAAS,QAAQ,IAAI;AAC5C,iBAAI,SAAS,SACX,OAAO,KAAK,OAAO,GAAG,IAAI,IAGrB;AAAA,YACL;AAAA,YACA,MAAM,KAAK,OAAO,SAAS,gBAAgB,IAAI;AAAA,YAC/C,QAAQ,KAAK,OAAO,SAAS,kBAAkB,IAAI;AAAA,YACnD;AAAA,UACF;AAAA,QACF;AAGF,eAAO;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,0BAA0B;AACxB,eAAK,KAAK,iBAGH,KAAK,eAAe,UAAU,KAAK,SAAS,KAAK,KACtD,CAAC,KAAK,eAAe,KAAK,SAAS,IAAI;AAAE,iBAAO,MAAM;AAAA,QAAM,CAAC,IAHtD;AAAA,MAIX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,iBAAiB,SAAS,eAAe;AACvC,YAAI,CAAC,KAAK;AACR,iBAAO;AAGT,YAAM,QAAQ,KAAK,iBAAiB,OAAO;AAC3C,YAAI,SAAS;AACX,iBAAO,KAAK,eAAe,KAAK;AAGlC,YAAI,iBAAiB;AACrB,QAAI,KAAK,cAAc,SACrB,iBAAiB,KAAK,SAAS,KAAK,YAAY,cAAc;AAGhE,YAAI;AACJ,YAAI,KAAK,cAAc,SACf,MAAM,KAAK,SAAS,KAAK,UAAU,IAAI;AAK7C,cAAM,iBAAiB,eAAe,QAAQ,cAAc,EAAE;AAC9D,cAAI,IAAI,UAAU,UACX,KAAK,SAAS,IAAI,cAAc;AACrC,mBAAO,KAAK,eAAe,KAAK,SAAS,QAAQ,cAAc,CAAC;AAGlE,eAAK,CAAC,IAAI,QAAQ,IAAI,QAAQ,QACvB,KAAK,SAAS,IAAI,MAAM,cAAc;AAC3C,mBAAO,KAAK,eAAe,KAAK,SAAS,QAAQ,MAAM,cAAc,CAAC;AAAA,QAE1E;AAMA,YAAI;AACF,iBAAO;AAGT,cAAM,IAAI,MAAM,MAAM,iBAAiB,4BAA4B;AAAA,MACrE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAyBA,qBAAqB,OAAO;AAC1B,YAAI,SAAS,KAAK,OAAO,OAAO,QAAQ;AAExC,YADA,SAAS,KAAK,iBAAiB,MAAM,GACjC,SAAS;AACX,iBAAO;AAAA,YACL,MAAM;AAAA,YACN,QAAQ;AAAA,YACR,YAAY;AAAA,UACd;AAGF,YAAM,SAAS;AAAA,UACb;AAAA,UACA,cAAc,KAAK,OAAO,OAAO,MAAM;AAAA,UACvC,gBAAgB,KAAK,OAAO,OAAO,QAAQ;AAAA,QAC7C;AAEA,YAAI,OAAO,eAAe;AACxB,gBAAM,IAAI,MAAM,2BAA2B;AAG7C,YAAI,OAAO,iBAAiB;AAC1B,gBAAM,IAAI,MAAM,6BAA6B;AAG/C,YAAI,OAAO,KAAK,OAAO,OAAO,QAAQ,kBAAkB,oBAAoB;AAC5E,QAAI,QAAQ,SACV,OAAO,kBAAkB;AAG3B,YAAI;AAWJ,YAVA,KAAK,MAAM,oBAAoB,OAAK,UAAU,GAAG,MAAM;AACrD,eAAK,MAAM,QAAQ;AAAA,YACjB,KAAK,gBAAgB;AAAA,YACrB,OAAO;AAAA,YACP,OAAO,eAAe;AAAA,YACtB,OAAO;AAAA,YACP;AAAA,UACF;AAAA,QACF,CAAC,GAEG,WACE,QAAQ,WAAW,OAAO,QAAQ;AACpC,cAAI,aAAa,QAAQ;AACzB,iBAAI,KAAK,wBAAwB,eAAe,SAC9C,aAAa,QAER;AAAA,YACL,MAAM,KAAK,OAAO,SAAS,iBAAiB,IAAI;AAAA,YAChD,QAAQ,KAAK,OAAO,SAAS,mBAAmB,IAAI;AAAA,YACpD;AAAA,UACF;AAAA,QACF;AAGF,eAAO;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,YAAY;AAAA,QACd;AAAA,MACF;AAAA,IACF;AAEA,2BAAuB,UAAU,WAAW;AAC5C,YAAQ,yBAAyB;AAmDjC,QAAM,2BAAN,cAAuC,kBAAkB;AAAA,MACvD,YAAY,YAAY,eAAe;AACrC,eAAO,MAAM,QAAQ,EAAE,KAAK,UAAQ;AAClC,cAAI,YAAY;AAChB,UAAI,OAAO,cAAe,aACxB,YAAY,KAAK,oBAAoB,UAAU;AAGjD,cAAM,UAAU,KAAK,OAAO,WAAW,SAAS,GAC1C,WAAW,KAAK,OAAO,WAAW,UAAU;AAElD,cAAI,WAAW,KAAK;AAClB,kBAAM,IAAI,MAAM,0BAA0B,OAAO;AAGnD,eAAK,WAAW,IAAI,SAAS,GAC7B,KAAK,SAAS,IAAI,SAAS,GAC3B,KAAK,sBAAsB,MAC3B,KAAK,qBAAqB,MAC1B,KAAK,8BAA8B,MACnC,KAAK,6BAA6B;AAElC,cAAI,aAAa;AAAA,YACf,MAAM;AAAA,YACN,QAAQ;AAAA,UACV;AACA,iBAAO,QAAQ,IAAI,SAAS,IAAI,OAAK;AACnC,gBAAI,EAAE;AAGJ,oBAAM,IAAI,MAAM,oDAAoD;AAEtE,gBAAM,SAAS,KAAK,OAAO,GAAG,QAAQ,GAChC,aAAa,KAAK,OAAO,QAAQ,MAAM,GACvC,eAAe,KAAK,OAAO,QAAQ,QAAQ;AAEjD,gBAAI,aAAa,WAAW,QACvB,eAAe,WAAW,QAAQ,eAAe,WAAW;AAC/D,oBAAM,IAAI,MAAM,sDAAsD;AAExE,gCAAa,QAEA,IAAI,kBAAkB,KAAK,OAAO,GAAG,KAAK,GAAG,aAAa,EAC3D,KAAK,eACR;AAAA,cACL,iBAAiB;AAAA;AAAA;AAAA,gBAGf,eAAe,aAAa;AAAA,gBAC5B,iBAAiB,eAAe;AAAA,cAClC;AAAA,cACA;AAAA,YACF,EACD;AAAA,UACH,CAAC,CAAC,EAAE,KAAK,QACP,KAAK,YAAY,GACV,KACR;AAAA,QACH,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MA+BA,IAAI,qBAAqB;AACvB,eAAK,KAAK,uBACR,KAAK,uBAAuB,GAGvB,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,oBAAoB;AACtB,eAAK,KAAK,sBACR,KAAK,sBAAsB,GAGtB,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,6BAA6B;AAC/B,eAAK,KAAK,+BACR,KAAK,eAAe,KAAK,WAAW,KAAK,UAAU,GAG9C,KAAK;AAAA,MACd;AAAA,MAEA,IAAI,4BAA4B;AAC9B,eAAK,KAAK,8BACR,KAAK,eAAe,KAAK,WAAW,KAAK,UAAU,GAG9C,KAAK;AAAA,MACd;AAAA,MAEA,yBAAyB;AACvB,YAAM,WAAW,KAAK;AACtB,iBAAS,KAAK,KAAK,mCAAmC,GACtD,KAAK,sBAAsB;AAAA,MAC7B;AAAA,MAEA,wBAAwB;AACtB,YAAM,WAAW,KAAK;AACtB,iBAAS,KAAK,KAAK,0BAA0B,GAC7C,KAAK,qBAAqB;AAAA,MAC5B;AAAA;AAAA;AAAA;AAAA,MAKA,IAAI,UAAU;AACZ,YAAM,UAAU,CAAC;AACjB,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ;AACzC,mBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,CAAC,EAAE,SAAS,QAAQ,QAAQ;AAC7D,oBAAQ,KAAK,KAAK,UAAU,CAAC,EAAE,SAAS,QAAQ,CAAC,CAAC;AAGtD,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAqBA,oBAAoB,OAAO;AACzB,YAAM,SAAS;AAAA,UACb,eAAe,KAAK,OAAO,OAAO,MAAM;AAAA,UACxC,iBAAiB,KAAK,OAAO,OAAO,QAAQ;AAAA,QAC9C,GAIM,eAAe,aAAa;AAAA,UAAO;AAAA,UAAQ,KAAK;AAAA,UACpD,SAAS,SAASA,UAAS;AACzB,gBAAM,MAAM,QAAQ,gBAAgBA,SAAQ,gBAAgB;AAC5D,mBAAI,OAII,QAAQ,kBACRA,SAAQ,gBAAgB;AAAA,UAClC;AAAA,QAAC,GACG,UAAU,KAAK,UAAU,YAAY;AAE3C,eAAK,UASE,QAAQ,SAAS,oBAAoB;AAAA,UAC1C,MAAM,OAAO,iBACV,QAAQ,gBAAgB,gBAAgB;AAAA,UAC3C,QAAQ,OAAO,mBACZ,QAAQ,gBAAgB,kBAAkB,OAAO,gBAC/C,QAAQ,gBAAgB,kBAAkB,IAC1C;AAAA,UACL,MAAM,MAAM;AAAA,QACd,CAAC,IAhBQ;AAAA,UACL,QAAQ;AAAA,UACR,MAAM;AAAA,UACN,QAAQ;AAAA,UACR,MAAM;AAAA,QACR;AAAA,MAYJ;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,0BAA0B;AACxB,eAAO,KAAK,UAAU,MAAM,SAAS,GAAG;AACtC,iBAAO,EAAE,SAAS,wBAAwB;AAAA,QAC5C,CAAC;AAAA,MACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,iBAAiB,SAAS,eAAe;AACvC,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAG9C,cAAM,UAFU,KAAK,UAAU,CAAC,EAER,SAAS,iBAAiB,SAAS,EAAI;AAC/D,cAAI;AACF,mBAAO;AAAA,QAEX;AACA,YAAI;AACF,iBAAO;AAET,cAAM,IAAI,MAAM,MAAM,UAAU,4BAA4B;AAAA,MAC9D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAoBA,qBAAqB,OAAO;AAC1B,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,cAAM,UAAU,KAAK,UAAU,CAAC;AAIhC,cAAI,QAAQ,SAAS,iBAAiB,KAAK,OAAO,OAAO,QAAQ,CAAC,MAAM;AACtE;AAEF,cAAM,oBAAoB,QAAQ,SAAS,qBAAqB,KAAK;AACrE,cAAI;AASF,mBARY;AAAA,cACV,MAAM,kBAAkB,QACrB,QAAQ,gBAAgB,gBAAgB;AAAA,cAC3C,QAAQ,kBAAkB,UACvB,QAAQ,gBAAgB,kBAAkB,kBAAkB,OAC1D,QAAQ,gBAAgB,kBAAkB,IAC1C;AAAA,YACP;AAAA,QAGJ;AAEA,eAAO;AAAA,UACL,MAAM;AAAA,UACN,QAAQ;AAAA,QACV;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAOA,eAAe,MAAM,aAAa;AAChC,YAAM,oBAAoB,KAAK,8BAA8B,CAAC,GACxD,mBAAmB,KAAK,6BAA6B,CAAC;AAC5D,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ,KAAK;AAC9C,cAAM,UAAU,KAAK,UAAU,CAAC,GAE1B,kBAAkB,CAAC;AACzB,kBAAQ,SAAS,YAAY,OAAK,gBAAgB,KAAK,CAAC,CAAC;AAEzD,mBAAS,IAAI,GAAG,IAAI,gBAAgB,QAAQ,KAAK;AAC/C,gBAAM,UAAU,gBAAgB,CAAC,GAM7B,SAAS,KAAK,iBAAiB,QAAQ,SAAS,YAAY,MAAM,KAAK,aAAa;AACxF,iBAAK,SAAS,IAAI,MAAM,GACxB,SAAS,KAAK,SAAS,QAAQ,MAAM;AAErC,gBAAI,OAAO;AACX,YAAI,QAAQ,SACV,KAAK,OAAO,IAAI,QAAQ,IAAI,GAC5B,OAAO,KAAK,OAAO,QAAQ,QAAQ,IAAI;AAOzC,gBAAM,kBAAkB;AAAA,cACtB;AAAA,cACA,eAAe,QAAQ,iBACpB,QAAQ,gBAAgB,gBAAgB;AAAA,cAC3C,iBAAiB,QAAQ,mBACtB,QAAQ,gBAAgB,kBAAkB,QAAQ,gBACjD,QAAQ,gBAAgB,kBAAkB,IAC1C;AAAA,cACJ,cAAc,QAAQ;AAAA,cACtB,gBAAgB,QAAQ;AAAA,cACxB;AAAA,YACF;AAEA,8BAAkB,KAAK,eAAe,GAClC,OAAO,gBAAgB,gBAAiB,YAC1C,iBAAiB,KAAK,eAAe;AAAA,UAEzC;AAAA,QACF;AAAA,MACF;AAAA,MAEA,YAAY,WAAW,UAAU,QAAQ;AACvC,YAAM,UAAU,YAAY,MACtB,QAAQ,UAAU,kBAAkB,iBAEtC;AACJ,gBAAQ,OAAO;AAAA,UACf,KAAK,kBAAkB;AACrB,uBAAW,KAAK;AAChB;AAAA,UACF,KAAK,kBAAkB;AACrB,uBAAW,KAAK;AAChB;AAAA,UACF;AACE,kBAAM,IAAI,MAAM,6BAA6B;AAAA,QAC/C;AAEA,YAAM,aAAa,KAAK;AACxB,iBAAS,IAAI,SAAS,SAAS;AAC7B,cAAI,SAAS;AACb,iBAAI,QAAQ,WAAW,SACrB,SAAS,KAAK,SAAS,GAAG,QAAQ,MAAM,GACxC,SAAS,KAAK,iBAAiB,YAAY,QAAQ,KAAK,aAAa,IAEhE;AAAA,YACL;AAAA,YACA,eAAe,QAAQ;AAAA,YACvB,iBAAiB,QAAQ;AAAA,YACzB,cAAc,QAAQ;AAAA,YACtB,gBAAgB,QAAQ;AAAA,YACxB,MAAM,QAAQ,SAAS,OAAO,OAAO,KAAK,OAAO,GAAG,QAAQ,IAAI;AAAA,UAClE;AAAA,QACF,GAAG,IAAI,EAAE,QAAQ,WAAW,OAAO;AAAA,MACrC;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,aAAa,SAAS,WAAW,WACrB,aAAa,aAAa,OAAO;AAM3C,YAAI,QAAQ,SAAS,KAAK;AACxB,gBAAM,IAAI,UAAU,kDACE,QAAQ,SAAS,CAAC;AAE1C,YAAI,QAAQ,WAAW,IAAI;AACzB,gBAAM,IAAI,UAAU,oDACE,QAAQ,WAAW,CAAC;AAG5C,eAAO,aAAa,OAAO,SAAS,WAAW,aAAa,KAAK;AAAA,MACnE;AAAA,MAEA,yBAAyB,OAAO;AAC9B,YAAM,OAAO,KAAK,OAAO,OAAO,MAAM,GAMhC,SAAS;AAAA,UACb,QAAQ,KAAK,OAAO,OAAO,QAAQ;AAAA,UACnC,cAAc;AAAA,UACd,gBAAgB,KAAK,OAAO,OAAO,UAAU,CAAC;AAAA,QAChD;AAGA,YADA,OAAO,SAAS,KAAK,iBAAiB,OAAO,MAAM,GAC/C,OAAO,SAAS;AAClB,iBAAO,CAAC;AAGV,YAAI,OAAO,eAAe;AACxB,gBAAM,IAAI,MAAM,2BAA2B;AAG7C,YAAI,OAAO,iBAAiB;AAC1B,gBAAM,IAAI,MAAM,6BAA6B;AAG/C,YAAM,WAAW,CAAC,GAEd,QAAQ,KAAK;AAAA,UAAa;AAAA,UACA,KAAK;AAAA,UACL;AAAA,UACA;AAAA,UACA,KAAK;AAAA,UACL,aAAa;AAAA,QAAiB;AAC5D,YAAI,SAAS,GAAG;AACd,cAAI,UAAU,KAAK,kBAAkB,KAAK;AAE1C,cAAI,MAAM,WAAW,QAAW;AAC9B,gBAAM,eAAe,QAAQ;AAM7B,mBAAO,WAAW,QAAQ,iBAAiB,gBAAc;AACvD,kBAAI,aAAa,QAAQ;AACzB,cAAI,KAAK,wBAAwB,eAAe,SAC9C,aAAa,QAEf,SAAS,KAAK;AAAA,gBACZ,MAAM,KAAK,OAAO,SAAS,iBAAiB,IAAI;AAAA,gBAChD,QAAQ,KAAK,OAAO,SAAS,mBAAmB,IAAI;AAAA,gBACpD;AAAA,cACF,CAAC,GAED,UAAU,KAAK,kBAAkB,EAAE,KAAK;AAAA,YAC1C;AAAA,UACF,OAAO;AACL,gBAAM,iBAAiB,QAAQ;AAM/B,mBAAO,WACA,QAAQ,iBAAiB,QACzB,QAAQ,kBAAkB,kBAAgB;AAC/C,kBAAI,aAAa,QAAQ;AACzB,cAAI,KAAK,wBAAwB,eAAe,SAC9C,aAAa,QAEf,SAAS,KAAK;AAAA,gBACZ,MAAM,KAAK,OAAO,SAAS,iBAAiB,IAAI;AAAA,gBAChD,QAAQ,KAAK,OAAO,SAAS,mBAAmB,IAAI;AAAA,gBACpD;AAAA,cACF,CAAC,GAED,UAAU,KAAK,kBAAkB,EAAE,KAAK;AAAA,YAC1C;AAAA,UACF;AAAA,QACF;AAEA,eAAO;AAAA,MACT;AAAA,MAEA,UAAU;AACR,iBAAS,IAAI,GAAG,IAAI,KAAK,UAAU,QAAQ;AACzC,eAAK,UAAU,CAAC,EAAE,SAAS,QAAQ;AAAA,MAEvC;AAAA,IACF;AACA,YAAQ,2BAA2B;AAMnC,aAAS,SAAS,YAAY,eAAe;AAC3C,UAAI,YAAY;AAChB,MAAI,OAAO,cAAe,aACxB,YAAY,KAAK,oBAAoB,UAAU;AAGjD,UAAM,WAAW,UAAU,YAAY,OACjC,IAAI,yBAAyB,WAAW,aAAa,IACrD,IAAI,uBAAuB,WAAW,aAAa;AACzD,aAAO,QAAQ,QAAQ,QAAQ;AAAA,IACjC;AAEA,aAAS,YAAY,YAAY,eAAe;AAC9C,aAAO,uBAAuB,cAAc,YAAY,aAAa;AAAA,IACvE;AAAA;AAAA;;;ACptCA;AAAA;AAAA;AAOA,QAAM,qBAAqB,+BAAkC,oBACvD,OAAO,gBAIP,gBAAgB,WAGhB,eAAe,IAKf,eAAe,sBAcf,aAAN,MAAM,YAAW;AAAA,MACf,YAAY,OAAO,SAAS,SAAS,SAAS,OAAO;AACnD,aAAK,WAAW,CAAC,GACjB,KAAK,iBAAiB,CAAC,GACvB,KAAK,OAAO,SAAgB,MAC5B,KAAK,SAAS,WAAkB,MAChC,KAAK,SAAS,WAAkB,MAChC,KAAK,OAAO,SAAgB,MAC5B,KAAK,YAAY,IAAI,IACjB,WAAW,QAAM,KAAK,IAAI,OAAO;AAAA,MACvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUA,OAAO,wBAAwB,gBAAgB,oBAAoB,eAAe;AAGhF,YAAM,OAAO,IAAI,YAAW,GAMtB,iBAAiB,eAAe,MAAM,aAAa,GACrD,sBAAsB,GACpB,gBAAgB,WAAW;AAC/B,cAAM,eAAe,YAAY,GAE3B,UAAU,YAAY,KAAK;AACjC,iBAAO,eAAe;AAEtB,mBAAS,cAAc;AACrB,mBAAO,sBAAsB,eAAe,SACxC,eAAe,qBAAqB,IAAI;AAAA,UAC9C;AAAA,QACF,GAGI,oBAAoB,GAAG,sBAAsB,GAK7C,cAAc,MACd;AAEJ,kCAAmB,YAAY,SAAS,SAAS;AAC/C,cAAI,gBAAgB;AAGlB,gBAAI,oBAAoB,QAAQ;AAE9B,iCAAmB,aAAa,cAAc,CAAC,GAC/C,qBACA,sBAAsB;AAAA,iBAEjB;AAIL,yBAAW,eAAe,mBAAmB,KAAK;AAClD,kBAAM,OAAO,SAAS,OAAO,GAAG,QAAQ,kBACV,mBAAmB;AACjD,6BAAe,mBAAmB,IAAI,SAAS,OAAO,QAAQ,kBAC1B,mBAAmB,GACvD,sBAAsB,QAAQ,iBAC9B,mBAAmB,aAAa,IAAI,GAEpC,cAAc;AACd;AAAA,YACF;AAKF,iBAAO,oBAAoB,QAAQ;AACjC,iBAAK,IAAI,cAAc,CAAC,GACxB;AAEF,UAAI,sBAAsB,QAAQ,oBAChC,WAAW,eAAe,mBAAmB,KAAK,IAClD,KAAK,IAAI,SAAS,OAAO,GAAG,QAAQ,eAAe,CAAC,GACpD,eAAe,mBAAmB,IAAI,SAAS,OAAO,QAAQ,eAAe,GAC7E,sBAAsB,QAAQ,kBAEhC,cAAc;AAAA,QAChB,GAAG,IAAI,GAEH,sBAAsB,eAAe,WACnC,eAEF,mBAAmB,aAAa,cAAc,CAAC,GAGjD,KAAK,IAAI,eAAe,OAAO,mBAAmB,EAAE,KAAK,EAAE,CAAC,IAI9D,mBAAmB,QAAQ,QAAQ,SAAS,YAAY;AACtD,cAAM,UAAU,mBAAmB,iBAAiB,UAAU;AAC9D,UAAI,WAAW,SACT,iBAAiB,SACnB,aAAa,KAAK,KAAK,eAAe,UAAU,IAElD,KAAK,iBAAiB,YAAY,OAAO;AAAA,QAE7C,CAAC,GAEM;AAEP,iBAAS,mBAAmB,SAAS,MAAM;AACzC,cAAI,YAAY,QAAQ,QAAQ,WAAW;AACzC,iBAAK,IAAI,IAAI;AAAA,eACR;AACL,gBAAM,SAAS,gBACX,KAAK,KAAK,eAAe,QAAQ,MAAM,IACvC,QAAQ;AACZ,iBAAK,IAAI,IAAI;AAAA,cAAW,QAAQ;AAAA,cACR,QAAQ;AAAA,cACR;AAAA,cACA;AAAA,cACA,QAAQ;AAAA,YAAI,CAAC;AAAA,UACvC;AAAA,QACF;AAAA,MACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,IAAI,QAAQ;AACV,YAAI,MAAM,QAAQ,MAAM;AACtB,iBAAO,QAAQ,SAAS,OAAO;AAC7B,iBAAK,IAAI,KAAK;AAAA,UAChB,GAAG,IAAI;AAAA,iBACE,OAAO,YAAY,KAAK,OAAO,UAAW;AACnD,UAAI,UACF,KAAK,SAAS,KAAK,MAAM;AAAA;AAG3B,gBAAM,IAAI;AAAA,YACR,gFAAgF;AAAA,UAClF;AAEF,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,QAAQ,QAAQ;AACd,YAAI,MAAM,QAAQ,MAAM;AACtB,mBAAS,IAAI,OAAO,SAAS,GAAG,KAAK,GAAG;AACtC,iBAAK,QAAQ,OAAO,CAAC,CAAC;AAAA,iBAEf,OAAO,YAAY,KAAK,OAAO,UAAW;AACnD,eAAK,SAAS,QAAQ,MAAM;AAAA;AAE5B,gBAAM,IAAI;AAAA,YACR,gFAAgF;AAAA,UAClF;AAEF,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,KAAK,KAAK;AACR,YAAI;AACJ,iBAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAK;AACnD,kBAAQ,KAAK,SAAS,CAAC,GACnB,MAAM,YAAY,IACpB,MAAM,KAAK,GAAG,IACL,UAAU,MACnB,IAAI,OAAO;AAAA,YAAE,QAAQ,KAAK;AAAA,YACZ,MAAM,KAAK;AAAA,YACX,QAAQ,KAAK;AAAA,YACb,MAAM,KAAK;AAAA,UAAK,CAAC;AAAA,MAGrC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,KAAK,MAAM;AACT,YAAI,aACA,GACE,MAAM,KAAK,SAAS;AAC1B,YAAI,MAAM,GAAG;AAEX,eADA,cAAc,CAAC,GACV,IAAI,GAAG,IAAI,MAAM,GAAG;AACvB,wBAAY,KAAK,KAAK,SAAS,CAAC,CAAC,GACjC,YAAY,KAAK,IAAI;AAEvB,sBAAY,KAAK,KAAK,SAAS,CAAC,CAAC,GACjC,KAAK,WAAW;AAAA,QAClB;AACA,eAAO;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,aAAa,UAAU,cAAc;AACnC,YAAM,YAAY,KAAK,SAAS,KAAK,SAAS,SAAS,CAAC;AACxD,eAAI,UAAU,YAAY,IACxB,UAAU,aAAa,UAAU,YAAY,IACpC,OAAO,aAAc,WAC9B,KAAK,SAAS,KAAK,SAAS,SAAS,CAAC,IAAI,UAAU,QAAQ,UAAU,YAAY,IAElF,KAAK,SAAS,KAAK,GAAG,QAAQ,UAAU,YAAY,CAAC,GAEhD;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASA,iBAAiB,aAAa,gBAAgB;AAC5C,aAAK,eAAe,KAAK,YAAY,WAAW,CAAC,IAAI;AAAA,MACvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAQA,mBAAmB,KAAK;AACtB,iBAAS,IAAI,GAAG,MAAM,KAAK,SAAS,QAAQ,IAAI,KAAK;AACnD,UAAI,KAAK,SAAS,CAAC,EAAE,YAAY,KAC/B,KAAK,SAAS,CAAC,EAAE,mBAAmB,GAAG;AAI3C,YAAM,UAAU,OAAO,KAAK,KAAK,cAAc;AAC/C,iBAAS,IAAI,GAAG,MAAM,QAAQ,QAAQ,IAAI,KAAK;AAC7C,cAAI,KAAK,cAAc,QAAQ,CAAC,CAAC,GAAG,KAAK,eAAe,QAAQ,CAAC,CAAC,CAAC;AAAA,MAEvE;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,WAAW;AACT,YAAI,MAAM;AACV,oBAAK,KAAK,SAAS,OAAO;AACxB,iBAAO;AAAA,QACT,CAAC,GACM;AAAA,MACT;AAAA;AAAA;AAAA;AAAA;AAAA,MAMA,sBAAsB,OAAO;AAC3B,YAAM,YAAY;AAAA,UAChB,MAAM;AAAA,UACN,MAAM;AAAA,UACN,QAAQ;AAAA,QACV,GACM,MAAM,IAAI,mBAAmB,KAAK,GACpC,sBAAsB,IACtB,qBAAqB,MACrB,mBAAmB,MACnB,qBAAqB,MACrB,mBAAmB;AACvB,oBAAK,KAAK,SAAS,OAAO,UAAU;AAClC,oBAAU,QAAQ,OACd,SAAS,WAAW,QACjB,SAAS,SAAS,QAClB,SAAS,WAAW,SACrB,uBAAuB,SAAS,UAC/B,qBAAqB,SAAS,QAC9B,uBAAuB,SAAS,UAChC,qBAAqB,SAAS,SACjC,IAAI,WAAW;AAAA,YACb,QAAQ,SAAS;AAAA,YACjB,UAAU;AAAA,cACR,MAAM,SAAS;AAAA,cACf,QAAQ,SAAS;AAAA,YACnB;AAAA,YACA,WAAW;AAAA,cACT,MAAM,UAAU;AAAA,cAChB,QAAQ,UAAU;AAAA,YACpB;AAAA,YACA,MAAM,SAAS;AAAA,UACjB,CAAC,GAEH,qBAAqB,SAAS,QAC9B,mBAAmB,SAAS,MAC5B,qBAAqB,SAAS,QAC9B,mBAAmB,SAAS,MAC5B,sBAAsB,MACb,wBACT,IAAI,WAAW;AAAA,YACb,WAAW;AAAA,cACT,MAAM,UAAU;AAAA,cAChB,QAAQ,UAAU;AAAA,YACpB;AAAA,UACF,CAAC,GACD,qBAAqB,MACrB,sBAAsB;AAExB,mBAAS,MAAM,GAAG,SAAS,MAAM,QAAQ,MAAM,QAAQ;AACrD,YAAI,MAAM,WAAW,GAAG,MAAM,gBAC5B,UAAU,QACV,UAAU,SAAS,GAEf,MAAM,MAAM,UACd,qBAAqB,MACrB,sBAAsB,MACb,uBACT,IAAI,WAAW;AAAA,cACb,QAAQ,SAAS;AAAA,cACjB,UAAU;AAAA,gBACR,MAAM,SAAS;AAAA,gBACf,QAAQ,SAAS;AAAA,cACnB;AAAA,cACA,WAAW;AAAA,gBACT,MAAM,UAAU;AAAA,gBAChB,QAAQ,UAAU;AAAA,cACpB;AAAA,cACA,MAAM,SAAS;AAAA,YACjB,CAAC,KAGH,UAAU;AAAA,QAGhB,CAAC,GACD,KAAK,mBAAmB,SAAS,YAAY,eAAe;AAC1D,cAAI,iBAAiB,YAAY,aAAa;AAAA,QAChD,CAAC,GAEM,EAAE,MAAM,UAAU,MAAM,IAAI;AAAA,MACrC;AAAA,IACF;AAEA,YAAQ,aAAa;AAAA;AAAA;;;ACnZrB;AAAA;AAAA;AAKA,YAAQ,qBAAqB,+BAAsC;AACnE,YAAQ,oBAAoB,8BAAqC;AACjE,YAAQ,aAAa,sBAA6B;AAAA;AAAA;",
  "names": ["section"]
}
