{
  "version": 3,
  "sources": ["../src/cli/services/upgrade.ts"],
  "sourcesContent": ["/* eslint-disable @typescript-eslint/no-invalid-void-type */\nimport {\n  addNPMDependencies,\n  findUpAndReadPackageJson,\n  checkForNewVersion,\n  DependencyType,\n  getPackageManager,\n  PackageJson,\n  usesWorkspaces,\n} from '@shopify/cli-kit/node/node-package-manager'\nimport {exec} from '@shopify/cli-kit/node/system'\nimport {dirname, joinPath, moduleDirectory} from '@shopify/cli-kit/node/path'\nimport {findPathUp, glob} from '@shopify/cli-kit/node/fs'\nimport {AbortError} from '@shopify/cli-kit/node/error'\nimport {outputContent, outputInfo, outputSuccess, outputToken, outputWarn} from '@shopify/cli-kit/node/output'\n\ntype HomebrewPackageName = 'shopify-cli' | 'shopify-cli@3'\n\n// Canonical list of oclif plugins that should be installed globally\nconst globalPlugins = ['@shopify/theme']\n\ninterface UpgradeOptions {\n  env: NodeJS.ProcessEnv\n}\n\nexport async function upgrade(\n  directory: string,\n  currentVersion: string,\n  {env}: UpgradeOptions = {env: process.env},\n): Promise<void> {\n  let newestVersion: string | void\n\n  const projectDir = await getProjectDir(directory)\n  if (projectDir) {\n    newestVersion = await upgradeLocalShopify(projectDir, currentVersion)\n  } else if (usingPackageManager({env})) {\n    throw new AbortError(\n      outputContent`Couldn't find an app toml file at ${outputToken.path(\n        directory,\n      )}, is this a Shopify project directory?`,\n    )\n  } else {\n    newestVersion = await upgradeGlobalShopify(currentVersion, {env})\n  }\n\n  if (newestVersion) {\n    outputSuccess(`Upgraded Shopify CLI to version ${newestVersion}`)\n  }\n}\n\nasync function getProjectDir(directory: string): Promise<string | undefined> {\n  const configFiles = ['shopify.app{,.*}.toml', 'hydrogen.config.js', 'hydrogen.config.ts']\n  const existsConfigFile = async (directory: string) => {\n    const configPaths = await glob(configFiles.map((file) => joinPath(directory, file)))\n    return configPaths.length > 0 ? configPaths[0] : undefined\n  }\n  const configFile = await findPathUp(existsConfigFile, {\n    cwd: directory,\n    type: 'file',\n  })\n  if (configFile) return dirname(configFile)\n}\n\nasync function upgradeLocalShopify(projectDir: string, currentVersion: string): Promise<string | void> {\n  const packageJson = (await findUpAndReadPackageJson(projectDir)).content\n  const packageJsonDependencies = packageJson.dependencies || {}\n  const packageJsonDevDependencies = packageJson.devDependencies || {}\n  const allDependencies = {...packageJsonDependencies, ...packageJsonDevDependencies}\n\n  // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  let resolvedCLIVersion = allDependencies[await cliDependency()]!\n  const resolvedAppVersion = allDependencies['@shopify/app']?.replace(/[\\^~]/, '')\n\n  if (resolvedCLIVersion.slice(0, 1).match(/[\\^~]/)) resolvedCLIVersion = currentVersion\n  const newestCLIVersion = await checkForNewVersion(await cliDependency(), resolvedCLIVersion)\n  const newestAppVersion = resolvedAppVersion ? await checkForNewVersion('@shopify/app', resolvedAppVersion) : undefined\n\n  if (newestCLIVersion) {\n    outputUpgradeMessage(resolvedCLIVersion, newestCLIVersion)\n  } else if (resolvedAppVersion && newestAppVersion) {\n    outputUpgradeMessage(resolvedAppVersion, newestAppVersion)\n  } else {\n    outputWontInstallMessage(resolvedCLIVersion)\n    return\n  }\n\n  await installJsonDependencies('prod', packageJsonDependencies, projectDir)\n  await installJsonDependencies('dev', packageJsonDevDependencies, projectDir)\n  return newestCLIVersion ?? newestAppVersion\n}\n\nasync function upgradeGlobalShopify(\n  currentVersion: string,\n  {env}: UpgradeOptions = {env: process.env},\n): Promise<string | void> {\n  const newestVersion = await checkForNewVersion(await cliDependency(), currentVersion)\n\n  if (!newestVersion) {\n    outputWontInstallMessage(currentVersion)\n    return\n  }\n\n  outputUpgradeMessage(currentVersion, newestVersion)\n\n  const homebrewPackage = env.SHOPIFY_HOMEBREW_FORMULA as HomebrewPackageName | undefined\n  try {\n    if (homebrewPackage) {\n      throw new AbortError(\n        outputContent`Upgrade only works for packages managed by a Node package manager (e.g. npm). Run ${outputToken.genericShellCommand(\n          'brew upgrade && brew update',\n        )} instead`,\n      )\n    } else {\n      await upgradeGlobalViaNpm()\n    }\n  } catch (err) {\n    outputWarn('Upgrade failed!')\n    throw err\n  }\n  return newestVersion\n}\n\nasync function upgradeGlobalViaNpm(): Promise<void> {\n  const command = 'npm'\n  const args = [\n    'install',\n    '-g',\n    `${await cliDependency()}@latest`,\n    ...globalPlugins.map((plugin) => `${plugin}@latest`),\n  ]\n  outputInfo(\n    outputContent`Attempting to upgrade via ${outputToken.genericShellCommand([command, ...args].join(' '))}...`,\n  )\n  await exec(command, args, {stdio: 'inherit'})\n}\n\nfunction outputWontInstallMessage(currentVersion: string): void {\n  outputInfo(outputContent`You're on the latest version, ${outputToken.yellow(currentVersion)}, no need to upgrade!`)\n}\n\nfunction outputUpgradeMessage(currentVersion: string, newestVersion: string): void {\n  outputInfo(\n    outputContent`Upgrading CLI from ${outputToken.yellow(currentVersion)} to ${outputToken.yellow(newestVersion)}...`,\n  )\n}\n\nasync function installJsonDependencies(\n  depsEnv: DependencyType,\n  deps: {[key: string]: string},\n  directory: string,\n): Promise<void> {\n  const packagesToUpdate = [await cliDependency(), ...(await oclifPlugins())]\n    .filter((pkg: string): boolean => {\n      const pkgRequirement: string | undefined = deps[pkg]\n      return Boolean(pkgRequirement)\n    })\n    .map((pkg) => {\n      return {name: pkg, version: 'latest'}\n    })\n\n  const appUsesWorkspaces = await usesWorkspaces(directory)\n\n  if (packagesToUpdate.length > 0) {\n    await addNPMDependencies(packagesToUpdate, {\n      packageManager: await getPackageManager(directory),\n      type: depsEnv,\n      directory,\n      stdout: process.stdout,\n      stderr: process.stderr,\n      addToRootDirectory: appUsesWorkspaces,\n    })\n  }\n}\n\nasync function cliDependency(): Promise<string> {\n  return (await packageJsonContents()).name\n}\n\nasync function oclifPlugins(): Promise<string[]> {\n  return (await packageJsonContents())?.oclif?.plugins || []\n}\n\ntype PackageJsonWithName = Omit<PackageJson, 'name'> & {name: string}\nlet _packageJsonContents: PackageJsonWithName | undefined\n\nasync function packageJsonContents(): Promise<PackageJsonWithName> {\n  if (!_packageJsonContents) {\n    const packageJson = await findUpAndReadPackageJson(moduleDirectory(import.meta.url))\n    _packageJsonContents = _packageJsonContents || (packageJson.content as PackageJsonWithName)\n  }\n  return _packageJsonContents\n}\n\nfunction usingPackageManager({env}: UpgradeOptions = {env: process.env}): boolean {\n  return Boolean(env.npm_config_user_agent)\n}\n"],
  "mappings": "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",
  "names": ["directory"]
}
