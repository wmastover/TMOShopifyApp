{
  "version": 3,
  "sources": ["../../cli-kit/src/public/node/os.ts"],
  "sourcesContent": ["import {outputDebug, outputContent} from '../../public/node/output.js'\nimport {execa} from 'execa'\nimport {userInfo as osUserInfo} from 'os'\n\n// This code has been vendored from https://github.com/sindresorhus/username\n// because adding it as a transtive dependency causes conflicts with other\n// packages that haven't been yet migrated to the latest version.\n/**\n * @param platform - The platform to get the username for. Defaults to the current platform.\n * @returns The username of the current user.\n */\nexport async function username(platform: typeof process.platform = process.platform): Promise<string | null> {\n  outputDebug(outputContent`Obtaining user name...`)\n  const environmentVariable = getEnvironmentVariable()\n  if (environmentVariable) {\n    return environmentVariable\n  }\n\n  const userInfoUsername = getUsernameFromOsUserInfo()\n  if (userInfoUsername) {\n    return userInfoUsername\n  }\n\n  /**\n    First we try to get the ID of the user and then the actual username. We do this because in `docker run --user <uid>:<gid>` context, we don't have \"username\" available. Therefore, we have a fallback to `makeUsernameFromId` for such scenario. Applies also to the `sync()` method below.\n    */\n  try {\n    if (platform === 'win32') {\n      const {stdout} = await execa('whoami')\n      return cleanWindowsCommand(stdout)\n    }\n\n    const {stdout: userId} = await execa('id', ['-u'])\n    try {\n      const {stdout} = await execa('id', ['-un', userId])\n      return stdout\n\n      // eslint-disable-next-line no-catch-all/no-catch-all,no-empty\n    } catch {}\n    return makeUsernameFromId(userId)\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return null\n  }\n}\n\ntype PlatformArch = Exclude<typeof process.arch, 'x64' | 'ia32'> | 'amd64' | '386'\ntype PlatformStrings = Exclude<typeof process.platform, 'win32'> | 'windows'\n/**\n * Returns the platform and architecture.\n * @returns Returns the current platform and architecture.\n */\nexport function platformAndArch(\n  platform: typeof process.platform = process.platform,\n  arch: typeof process.arch = process.arch,\n): {\n  platform: PlatformStrings\n  arch: PlatformArch\n} {\n  let archString: PlatformArch\n  if (arch === 'x64') {\n    archString = 'amd64'\n  } else if (arch === 'ia32') {\n    archString = '386'\n  } else {\n    archString = arch\n  }\n  const platformString = (platform.match(/^win.+/) ? 'windows' : platform) as PlatformStrings\n  return {platform: platformString, arch: archString}\n}\n\nfunction getEnvironmentVariable() {\n  const {env} = process\n\n  return env.SUDO_USER || env.C9_USER || env.LOGNAME || env.USER || env.LNAME || env.USERNAME\n}\n\nfunction getUsernameFromOsUserInfo(): string | null {\n  try {\n    return osUserInfo().username\n    // eslint-disable-next-line no-catch-all/no-catch-all\n  } catch {\n    return null\n  }\n}\n\nfunction cleanWindowsCommand(value: string) {\n  return value.replace(/^.*\\\\/, '')\n}\n\nfunction makeUsernameFromId(userId: string) {\n  return `no-username-${userId}`\n}\n"],
  "mappings": ";;;;;;;;;;AAAA;AAEA,SAAQ,YAAY,kBAAiB;AASrC,eAAsB,SAAS,WAAoC,QAAQ,UAAQ;AACjF,cAAY,qCAAqC;AACjD,MAAM,sBAAsB,uBAAsB;AAClD,MAAI;AACF,WAAO;AAGT,MAAM,mBAAmB,0BAAyB;AAClD,MAAI;AACF,WAAO;AAMT,MAAI;AACF,QAAI,aAAa,SAAS;AACxB,UAAM,EAAC,OAAM,IAAI,MAAM,MAAM,QAAQ;AACrC,aAAO,oBAAoB,MAAM;IACnC;AAEA,QAAM,EAAC,QAAQ,OAAM,IAAI,MAAM,MAAM,MAAM,CAAC,IAAI,CAAC;AACjD,QAAI;AACF,UAAM,EAAC,OAAM,IAAI,MAAM,MAAM,MAAM,CAAC,OAAO,MAAM,CAAC;AAClD,aAAO;IAGT,QAAQ;IAAC;AACT,WAAO,mBAAmB,MAAM;EAElC,QAAQ;AACN,WAAO;EACT;AACF;AAQM,SAAU,gBACd,WAAoC,QAAQ,UAC5C,OAA4B,QAAQ,MAAI;AAKxC,MAAI;AACJ,SAAI,SAAS,QACX,aAAa,UACJ,SAAS,SAClB,aAAa,QAEb,aAAa,MAGR,EAAC,UADgB,SAAS,MAAM,QAAQ,IAAI,YAAY,UAC7B,MAAM,WAAU;AACpD;AAEA,SAAS,yBAAsB;AAC7B,MAAM,EAAC,IAAG,IAAI;AAEd,SAAO,IAAI,aAAa,IAAI,WAAW,IAAI,WAAW,IAAI,QAAQ,IAAI,SAAS,IAAI;AACrF;AAEA,SAAS,4BAAyB;AAChC,MAAI;AACF,WAAO,WAAU,EAAG;EAEtB,QAAQ;AACN,WAAO;EACT;AACF;AAEA,SAAS,oBAAoB,OAAa;AACxC,SAAO,MAAM,QAAQ,SAAS,EAAE;AAClC;AAEA,SAAS,mBAAmB,QAAc;AACxC,SAAO,eAAe,MAAM;AAC9B;",
  "names": []
}
